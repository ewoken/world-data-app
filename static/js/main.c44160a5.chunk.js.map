{"version":3,"sources":["api/countries.js","store/countries.js","api/helpers.js","store/statistics.js","api/statistics.js","store/index.js","utils/types.js","utils/index.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","views/CountryView/components/PrimaryEnergyChart.jsx","views/CountryView/containers/PrimaryEnergyChartContainer.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/containers/ProdConsoCharContainer.jsx","views/CountryView/components/CountryMap.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","loaders/index.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["countryMapValues","country","a","worldTopo","objects","countries","geometries","find","c","id","numericCode","Object","objectSpread","geojson","feature","_callee","res","regenerator_default","wrap","_context","prev","next","fetch","sent","json","abrupt","map","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","receiveCountriesAction","_ref","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","dependentCountriesSelector","countrySelector","countryCode","countriesReducer","arguments","length","undefined","action","fetchJSON","url","options","then","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","_ref2","statisticCode","receiveStatisticOfCountriesAction","_ref3","initialCountryStatistic","countryStatisticReducer","countryStatistic","d","omit","statisticsLoadedSelector","statistics","allStatisticsSelector","statisticSelector","countryStatisticSelector","_ref4","countryStatisticLoadedSelector","_ref5","countryStatisticsLoadedSelector","_ref7","statisticCodes","every","compiledCountryStatisticsSelector","_ref9","_ref13","mapOfCountryStatistics","perCapita","parsedMapOfCountryStatistics","defaultCountry","parsed","countryCodes","uniq","populations","mergeAll","defineProperty","concat","parseMapOfStatistics","mapOfStatistic","_ref10","mapOfStatisticValues","_ref6","countryStatisticValuesSelector","_computeYearInterval","arrayOfStatisticValues","startingYears","statisticValues","Math","min","apply","toConsumableArray","v","year","endingYears","max","computeYearInterval","_computeYearInterval2","slicedToArray","startingYear","endingYear","mapOfNamedStatisticValues","mapObjIndexed","compileName","_ref11","value","allValues","allValuesByYear","groupBy","keys","sort","compiledValue","population","factor","computeValue","unit","compiledStatisticForCountriesAndYear","_ref14","alpha2Code","push","yearValue","loadCountryStatistic","_ref15","dispatch","getState","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","loadCountryStatistics","_ref16","Promise","all","loadStatisticOfCountries","loadStatisticOfCountriesAction","getStatisticOfAllCountries","statisticsReducer","statistic","reduce","acc","WORLD","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","area","number","latlng","arrayOf","object","name","main","base","bool","coordsToLatLng","coords","_coords","longitude","latitude","L","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","MAP_HEIGHT","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","dependentCountries","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","indexBy","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","dragging","_colorValueMap$countr","GeoJSON","key","code","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","toLocaleString","background","backgroundColor","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","formatedData","s","es_select","width","placeholder","optionFilterProp","showSearch","onChange","sortBy","Option","title","slider","defaultValue","onAfterChange","debounce","included","marks","label","margin","left","right","es_radio","Group","marginBottom","buttonStyle","size","e","target","Button","disabled","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","href","defaultSortOrder","align","onRow","record","onClick","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","CustomTooltip","active","payload","payloadWithoutWorld","p","dataKey","worldPrimary","total","sum","lineHeight","Number","toFixed","defaultProps","PrimaryEnergyChart","stacked","setStacked","dataWithTotal","coal","oil","gas","hydro","nuclear","renewables","hasCoal","some","hasOil","hasGas","hasNuclear","hasHydro","hasRenewables","LineArea","Area","Line","marginRight","ResponsiveContainer","ComposedChart","top","bottom","dot","activeDot","stroke","fill","stackId","CartesianGrid","opacity","XAxis","interval","YAxis","angle","position","component_Tooltip","content","Legend","iconType","mapOfStatistics","worldReferences","ConnectedPrimaryEnergyChart","PrimaryEnergyChartContainer","_this$props","loadStatistics","prevProps","_this$props2","_this$props3","isLoaded","spin","spinning","containers_PrimaryEnergyChartContainer","ProdConsoChart","fuel","prodStatistic","consoStatistic","console","warn","dataWithImportAndExport","l","diff","prod","conso","export","import","strokeOpacity","strokeWidth","offset","props2","ProdConsoChart_CustomTooltip","assign","ConnectedProdConsoChart","prodStatisticCode","consoStatisticCode","ProdConsoChartContainer","CustomGeoJSON","createGeoJSON","remove","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","CountryMap","TileLayer","attribution","CountryMap_GeoJSON","CountryView","Redirect","to","xs","sm","src","toLowerCase","alt","components_CountryMap","ProdConsoCharContainer","match","params","AboutView","card","rel","GitHubLink","icon","theme","HeaderMenu","goTo","menu","mode","selectable","Item","Link","onSelect","components_GitHubLink","withLoader","config","loadFunctions","_config$isLoadedSelec","isLoadedSelector","_config$mapStateToPro","mapStateToProps","loadAll","loadFunction","WrappedComponent","ConnectedWrappedComponent","load","_Component","LoaderComponent","inherits","createClass","objectWithoutProperties","otherProps","CountriesLoader","prop","StatisticsLoader","ConnectedHeaderMenu","withRouter","isReady","layout","Header","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c44160a5.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport worldTopo from 'world-atlas/world/110m.json';\n\nfunction countryMapValues(country) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  return {\n    ...country,\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nasync function getAllCountries() {\n  const res = await fetch('/data/countries.json');\n  const countries = await res.json();\n  return countries.map(countryMapValues);\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport default countriesReducer;\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","import {\n  values,\n  indexBy,\n  prop,\n  mapObjIndexed,\n  mergeAll,\n  groupBy,\n  map,\n  omit,\n  uniq,\n} from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfCountry,\n  getStatisticOfAllCountries,\n} from '../api/statistics';\nimport { countriesSelector } from './countries';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(\n  { statisticCodes, countryCode },\n  state,\n) {\n  return statisticCodes.every(statisticCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor) {\n  if (!value || (!population && perCapita)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / population : value;\n}\n\nfunction parseMapOfStatistics(\n  mapOfCountryStatistics,\n  defaultCountry,\n  perCapita,\n) {\n  const parsed = map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n  const countryCodes = uniq(values(parsed).map(d => d.countryCode));\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...(perCapita ? populations : {}),\n    ...parsed,\n  };\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfCountryStatistics, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    parsedMapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    parsedMapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .filter(value => startingYear <= value.year && value.year <= endingYear)\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed(\n        (value, compileName) =>\n          computeValue(\n            value,\n            compiledValue[\n              `pop/${parsedMapOfCountryStatistics[compileName].countryCode}`\n            ],\n            perCapita,\n            mapOfStatistic[compileName].unit.factor,\n          ),\n        omit(['year', 'pop'], compiledValue),\n      ),\n    }));\n\n  return compiledStatistics;\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics({ statisticCodes, countryCode }) {\n  return function dispatchloadCountryStatistics(dispatch, getState) {\n    return Promise.all(\n      statisticCodes.map(statisticCode =>\n        loadCountryStatistic({ statisticCode, countryCode })(\n          dispatch,\n          getState,\n        ),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const countries = countriesSelector(getState());\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        getState(),\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n\nexport default statisticsReducer;\n","import { fetchJSON } from './helpers';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json');\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n","import L from 'leaflet';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\n// function bindEvent(countries, onCountryClick) {\n//   return function onEachFeature(feature, layer) {\n//     const country = countries.find(c => c.numericCode === feature.id);\n//     layer.on({\n//       click: () => onCountryClick(country),\n//     });\n//   };\n// }\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { coordsToLatLng, isMobileOrTablet } from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value: 'NA' };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value: 0 };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n  } = props;\n  const maxValue = Math.max(...data.map(d => d.value));\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: 'white',\n                  weight: 0.5,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${value.toLocaleString()}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div className=\"WorldMap__legend__gradient\">\n          <div>\n            {`${currentStatistic.name} (${\n              perCapita\n                ? `${currentStatistic.unit.base}/capita`\n                : currentStatistic.unit.main\n            })`}\n          </div>\n          <div\n            className=\"WorldMap__legend__gradientColor\"\n            style={{\n              background: colorGradient,\n            }}\n          />\n          <div className=\"WorldMap__legend__gradientRange\">\n            <div>0</div>\n            <div>{maxValue.toLocaleString()}</div>\n          </div>\n        </div>\n        <div>\n          <div>{' '}</div>\n          <div\n            className=\"WorldMap__legend__NA__square\"\n            style={{ backgroundColor: NA_COLOR }}\n          />\n          <div>NA</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy } from 'ramda';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet } from '../../../utils';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet}\n        onChange={value => setStatistic(value)}\n      >\n        {sortBy(s => s.name, statistics).map(statistic => (\n          <Select.Option key={statistic.code} title={statistic.name}>\n            {`${statistic.name}`}\n          </Select.Option>\n        ))}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <Radio.Group\n        style={{ marginBottom: '10px' }}\n        buttonStyle=\"solid\"\n        size=\"small\"\n        value={perCapita}\n        onChange={e => setPerCapita(e.target.value)}\n      >\n        <Radio.Button value={false}>Absolute</Radio.Button>\n        <Radio.Button value disabled={currentStatistic.code === 'POPULATION'}>\n          Per capita\n        </Radio.Button>\n      </Radio.Group>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: perCapita\n              ? `${currentStatistic.unit.base}/capita`\n              : currentStatistic.unit.main,\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: value => value.toLocaleString(),\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n} from '../../store/statistics';\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { Radio } from 'antd';\n\nfunction CustomTooltip(props) {\n  const { active, payload } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label } = props;\n    const { unit } = payload[0];\n    const payloadWithoutWorld = payload\n      ? payload.filter(p => p.dataKey !== 'worldPrimary')\n      : [];\n    const worldPrimary = payload\n      ? payload.find(p => p.dataKey === 'worldPrimary')\n      : [];\n    const total = payloadWithoutWorld.reduce(\n      (sum, { value }) => sum + value,\n      0,\n    );\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payloadWithoutWorld.map(p => (\n            <div key={p.dataKey} style={{ lineHeight: '22px', color: p.color }}>\n              {`${p.name} : ${p.value.toLocaleString()} ${p.unit}`}\n            </div>\n          ))}\n          <hr size={1} />\n          <div key=\"total\" style={{ lineHeight: '22px', color: 'black' }}>\n            {`Total : ${Number(total.toFixed(2)).toLocaleString()} ${unit}`}\n          </div>\n          {worldPrimary && (\n            <div\n              key=\"primaryWorld\"\n              style={{ lineHeight: '22px', color: 'red' }}\n            >\n              {`World : ${Number(\n                worldPrimary.value.toFixed(2),\n              ).toLocaleString()} ${unit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n};\n\nfunction PrimaryEnergyChart(props) {\n  const { data, stacked, setStacked, perCapita, setPerCapita } = props;\n  const unit = perCapita ? ' toe/capita' : ' Mtoe';\n\n  const dataWithTotal = data.map(v => ({\n    ...v,\n    total: Number(\n      (v.coal + v.oil + v.gas + v.hydro + v.nuclear + v.renewables).toFixed(2),\n    ),\n  }));\n\n  // TODO\n  const hasCoal = data.some(v => v.coal >= 0.01);\n  const hasOil = data.some(v => v.oil >= 0.01);\n  const hasGas = data.some(v => v.gas >= 0.01);\n  const hasNuclear = data.some(v => v.nuclear >= 0.01);\n  const hasHydro = data.some(v => v.hydro >= 0.01);\n  const hasRenewables = data.some(v => v.renewables >= 0.01);\n\n  const LineArea = stacked ? Area : Line;\n\n  return (\n    <div className=\"PrimaryEnergyChart\">\n      <h3 className=\"PrimaryEnergyChart__title\">Primary Energy Consumption</h3>\n      <div>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={stacked}\n          onChange={e => setStacked(e.target.value)}\n          style={{ marginRight: '10px' }}\n        >\n          <Radio.Button value>Stacked</Radio.Button>\n          <Radio.Button value={false}>Split</Radio.Button>\n        </Radio.Group>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button value>Per capita</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ResponsiveContainer height={300} width=\"100%\">\n        <ComposedChart\n          data={dataWithTotal}\n          margin={{ top: 10, right: 0, bottom: 10, left: 0 }}\n        >\n          {hasCoal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasOil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasGas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasNuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasHydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasRenewables && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"renewables\"\n              dot={false}\n              activeDot={false}\n              name=\"Other renewables\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"worldPrimary\"\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            label={{\n              value: unit,\n              angle: -90,\n              position: 'insideLeft',\n            }}\n          />\n          <Tooltip content={CustomTooltip} />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nPrimaryEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      renewables: PropTypes.number,\n      worldPrimary: PropTypes.number,\n      total: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default PrimaryEnergyChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport PrimaryEnergyChart from '../components/PrimaryEnergyChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst WORLD = 'WORLD';\n\nconst mapOfStatistics = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_CONSUMPTION_MTOE',\n  nuclear: 'NUCLEAR_CONSUMPTION_MTOE',\n  renewables: 'NON_HYDRO_RENEWABLES_CONSUMPTION_MTOE',\n};\nconst statisticCodes = values(mapOfStatistics).concat(['POPULATION']);\nconst worldReferences = ['POPULATION', 'PRIMARY_ENERGY_MTOE'];\n\nconst ConnectedPrimaryEnergyChart = connect(\n  (state, { countryCode, perCapita }) => ({\n    data: compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: {\n          ...mapOfStatistics,\n          worldPrimary: {\n            statisticCode: 'PRIMARY_ENERGY_MTOE',\n            countryCode: WORLD,\n          },\n        },\n        countryCode,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(PrimaryEnergyChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stacked: true,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { countryCode, loadStatistics } = this.props;\n\n    loadStatistics({ statisticCodes, countryCode });\n    loadStatistics({\n      statisticCodes: worldReferences,\n      countryCode: WORLD,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistics } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  setStacked(stacked) {\n    this.setState({ stacked });\n  }\n\n  setPerCapita(perCapita) {\n    this.setState({ perCapita });\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n    const { stacked, perCapita } = this.state;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedPrimaryEnergyChart\n          countryCode={countryCode}\n          setStacked={value => this.setStacked(value)}\n          setPerCapita={value => this.setPerCapita(value)}\n          stacked={stacked}\n          perCapita={perCapita}\n        />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded:\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes,\n          countryCode: props.countryCode,\n        },\n        state,\n      ) &&\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes: worldReferences,\n          countryCode: WORLD,\n        },\n        state,\n      ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(PrimaryEnergyChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\n\nfunction CustomTooltip(props) {\n  const { active } = props;\n\n  if (active) {\n    const { payload, label, filter } = props;\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.filter(filter).map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${p.value.toLocaleString()} ${p.unit}`}\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n  filter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  filter: i => i,\n};\n\nfunction ProdConsoChart(props) {\n  const {\n    fuel,\n    prodStatistic,\n    consoStatistic,\n    // reservesStatistic,\n    data,\n  } = props;\n\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <h3>{fuel}</h3>\n      <ResponsiveContainer height={250} width=\"100%\">\n        <ComposedChart\n          data={dataWithImportAndExport}\n          margin={{ top: 30, right: 20, bottom: 5, left: 20 }}\n        >\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={1}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={1}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#880000\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          {/* {reservesStatisticCode && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reserves\"\n              dot={false}\n              unit={reservesStatistic.unit}\n              stroke=\"blue\"\n              strokeWidth={3}\n              strokeOpacity={0.7}\n              name={reservesStatistic.name}\n              yAxisId=\"1\"\n            />\n          )} */}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis\n            label={{ value: unit, position: 'insideTopLeft', offset: -20 }}\n          />\n          {/* {reservesStatisticCode && (\n            <YAxis\n              orientation=\"right\"\n              label={{\n                value: reservesStatistic.unit,\n                position: 'insideTopRight',\n                offset: -20,\n              }}\n              yAxisId=\"1\"\n            />\n          )} */}\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip {...props2} filter={p => p.name !== 'base'} />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  prodStatistic: StatisticType.isRequired,\n  consoStatistic: StatisticType.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Spin } from 'antd';\n\nimport ProdConsoChart from '../components/ProdConsoChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst ConnectedProdConsoChart = connect((state, props) => ({\n  prodStatistic: statisticSelector(props.prodStatisticCode, state),\n  consoStatistic: statisticSelector(props.consoStatisticCode, state),\n  data: compiledCountryStatisticsSelector(\n    {\n      mapOfCountryStatistics: {\n        prod: props.prodStatisticCode,\n        conso: props.consoStatisticCode,\n      },\n      countryCode: props.countryCode,\n    },\n    state,\n  ),\n}))(ProdConsoChart);\n\nclass ProdConsoChartContainer extends Component {\n  componentDidMount() {\n    const {\n      consoStatisticCode,\n      prodStatisticCode,\n      countryCode,\n      loadStatistics,\n    } = this.props;\n    const statisticCodes = [consoStatisticCode, prodStatisticCode];\n    loadStatistics({ statisticCodes, countryCode });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      countryCode,\n      loadStatistics,\n      consoStatisticCode,\n      prodStatisticCode,\n    } = this.props;\n    const statisticCodes = [consoStatisticCode, prodStatisticCode];\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  render() {\n    const {\n      isLoaded,\n      fuel,\n      consoStatisticCode,\n      prodStatisticCode,\n      countryCode,\n    } = this.props;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedProdConsoChart\n          fuel={fuel}\n          consoStatisticCode={consoStatisticCode}\n          prodStatisticCode={prodStatisticCode}\n          countryCode={countryCode}\n        />\n      </Spin>\n    );\n  }\n}\n\nProdConsoChartContainer.propTypes = {\n  prodStatisticCode: PropTypes.string.isRequired,\n  consoStatisticCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  fuel: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded: countryStatisticsLoadedSelector(\n      {\n        statisticCodes: [props.prodStatisticCode, props.consoStatisticCode],\n        countryCode: props.countryCode,\n      },\n      state,\n    ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(ProdConsoChartContainer);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../../../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction CountryMap(props) {\n  const { country } = props;\n\n  return (\n    <div className=\"CountryMap\">\n      <Map\n        center={country.latlng}\n        zoom={2}\n        style={{ height: '300px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {country.geojson && <GeoJSON data={country.geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nCountryMap.propTypes = {\n  country: PropTypes.shape({\n    latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n    area: PropTypes.number.isRequired,\n    geojson: PropTypes.object.isRequired,\n  }).isRequired,\n};\n\nexport default CountryMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Redirect } from 'react-router-dom';\n\nimport { Row, Col } from 'antd';\n\nimport { countrySelector } from '../../store/countries';\n\nimport PrimaryEnergyChartContainer from './containers/PrimaryEnergyChartContainer';\nimport ProdConsoChartContainer from './containers/ProdConsoCharContainer';\nimport CountryMap from './components/CountryMap';\n\nfunction CountryView(props) {\n  const { country } = props;\n\n  if (!country || country.disabled) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const countryCode = country.alpha2Code;\n  return (\n    <div className=\"CountryView\">\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <h2>{country.commonName}</h2>\n          <div>{`Capital: ${country.capital}`}</div>\n          <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n          <div>\n            <PrimaryEnergyChartContainer countryCode={country.alpha2Code} />\n          </div>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <img\n            style={{ height: '100px' }}\n            src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n            alt={`Flag of ${country.commonName}`}\n          />\n          <CountryMap country={country} />\n        </Col>\n      </Row>\n      <Row>\n        <h3>Imports/Exports</h3>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n            fuel=\"Coal\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n            fuel=\"Oil\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n            consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n            fuel=\"Gas\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nCountryView.propTypes = {\n  country: PropTypes.shape({\n    alpha2Code: PropTypes.string.isRequired,\n    commonName: PropTypes.string.isRequired,\n  }),\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countrySelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { loadAllCountries } from '../store/countries';\nimport {\n  loadAllStatistics,\n  loadStatisticOfCountries,\n} from '../store/statistics';\n\nexport function withLoader(config) {\n  const {\n    loadFunctions,\n    isLoadedSelector = () => false,\n    mapStateToProps = () => {},\n  } = config;\n\n  const loadAll = props => (dispatch, getState) =>\n    loadFunctions.map(loadFunction => loadFunction(props)(dispatch, getState));\n\n  return function wrapLoaderHOC(WrappedComponent) {\n    const ConnectedWrappedComponent = WrappedComponent\n      ? connect(mapStateToProps)(WrappedComponent)\n      : () => null;\n\n    return connect(\n      (state, props) => ({\n        isLoaded: isLoadedSelector(props, state),\n      }),\n      { load: loadAll },\n    )(\n      class LoaderComponent extends Component {\n        static propTypes = {\n          load: PropTypes.func.isRequired,\n          isLoaded: PropTypes.bool.isRequired,\n        };\n\n        componentDidMount() {\n          const { load, isLoaded, ...args } = this.props;\n          load(args);\n        }\n\n        render() {\n          const { isLoaded, load, ...otherProps } = this.props;\n\n          if (!isLoaded) {\n            return null;\n          }\n          return <ConnectedWrappedComponent {...otherProps} />;\n        }\n      },\n    );\n  };\n}\n\nexport const CountriesLoader = withLoader({\n  loadFunctions: [loadAllCountries],\n})();\n\nexport const StatisticsLoader = withLoader({\n  loadFunctions: [loadAllStatistics],\n})();\n\nexport const StatisticAllCountriesLoader = withLoader({\n  loadFunctions: [\n    ({ statisticCode }) => loadStatisticOfCountries(statisticCode),\n  ],\n})();\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport { CountriesLoader, StatisticsLoader } from '../loaders';\n\nimport { countriesLoadedSelector, countriesSelector } from '../store/countries';\nimport { statisticsLoadedSelector } from '../store/statistics';\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isReady } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      {!isReady && <Spin size=\"large\" />}\n      {isReady && (\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            <Switch>\n              <Route path=\"/home\" exact component={HomeView} />\n              <Route\n                path=\"/country/:countryCode\"\n                exact\n                component={CountryView}\n              />\n              <Route path=\"/about\" exact component={AboutView} />\n              <Route\n                component={() => <Redirect to={{ pathname: '/home' }} />}\n              />\n            </Switch>\n          </Layout.Content>\n          <Layout.Footer>Sources: IEA, EIA, World Data Bank</Layout.Footer>\n        </Layout>\n      )}\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isReady: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isReady: countriesLoadedSelector(state) && statisticsLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}