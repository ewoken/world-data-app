{"version":3,"sources":["api/countries.js","store/countries.js","utils/index.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","api/areas.js","store/areas.js","store/index.js","components/ScrollToTop.jsx","utils/types.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/ControlledSlider.jsx","components/StatisticDetails.jsx","utils/copyToClipboard.js","components/ShareChartComponent.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","store/otherSelectors.js","HOC/components/ChartSettings.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","HOC/buildChart.jsx","views/CountryView/components/CustomTooltip.jsx","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.jsx","components/GeoJSONMap.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/GDPByEnergyChart.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SettingsComponent.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/components/TabsComponent.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","views/AreaView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["countryMapValues","country","worldTopo","a","objects","countries","geometries","find","c","id","numericCode","geojson","feature","bounds","L","geoJSON","getBounds","Object","objectSpread","_callee","_ref","_ref2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","map","p","then","res","json","sent","slicedToArray","abrupt","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","defaultIndicators","coal","oil","gas","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","countriesInBounds","boundsFilter","intersects","dependentCountriesSelector","countrySelector","countryCode","areas","fuelConsumedCountrySelector","hasConsumed","fuelProducedOrConsumedCountrySelector","mapObjIndexed","v","k","hasProduced","countriesReducer","arguments","length","undefined","action","coordsToLatLng","coords","_coords","longitude","latitude","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","value","Number","isNaN","toPrecision","toLocaleString","tickFormatter","displayUnit","unit","perCapita","concat","base","main","parseMapOfStatistics","mapOfCountryStatistics","defaultCountry","statistics","statisticCode","addPopCountryStatistics","countryCodes","uniq","d","populations","mergeAll","defineProperty","clickHandlers","onClick","onDoubleClick","clicks","_len2","args","Array","_key2","setTimeout","apply","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","statistic","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref4","compiledCountryStatisticsSelector","_ref3","year","sources","objectWithoutProperties","isFinite","computeDerivedValueFromCompiled","statisticOfAllCountriesLoadedSelector","alpha2Code","fn","hashFunction","JSON","stringify","cacheSize","cache","_len","_key","hash","hashes","keys","memoize","_ref5","_ref9","baseMap","mapOfStatistic","_ref6","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","statisticValues","Math","min","toConsumableArray","endingYears","max","computeYearInterval","_computeYearInterval2","startingYear","endingYear","mapOfNamedStatisticValues","compileName","_ref7","allValues","allValuesByYear","groupBy","sort","compiledValue","popCompileName","population","factor","populationFactor","computeValue","omit","compiledStatisticForCountriesAndYear","_ref10","push","yearValue","statisticSourcesSelector","statisticCodes","reduce","statisticSources","code","fetchJSON","url","options","MTOE_UNIT","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","derivedStatistics","name","description","consumption","production","sourceAttribution","category","isIntensive","energy","gdp","co2","scale","geothSolarWindTide","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","countryStatistics","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","initialCountryStatistic","countryStatisticReducer","statisticsReducer","acc","WORLD","indexedCountries","indexBy","cca2","countriesData","computeGeojson","area","countryAlpha3Codes","ccn3","includes","merge","commonName","AREAS_LOAD_ACTION","AREAS_RECEIVE_ACTION","receiveAreasAction","areasLoadedSelector","areasSelector","areasReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","actionSanitizer","store","createStore","ScrollToTop","scrollTo","prevProps","equals","props","Component","CountryType","PropTypes","shape","string","isRequired","alpha3Code","capital","number","latlng","arrayOf","object","MAP_HEIGHT","bool","sourceUrl","sourceDescriptionUrl","pathname","search","NA_COLOR","BORDER_COLOR","LEGEND_COLORS_COUNT","LEGEND_WIDTH","interpolator","d3Colors","WorldMap","selectedCountries","dependentCountries","currentStatistic","currentYear","minZoom","onMapChange","selectedCountryByCode","selectedData","maxValue","colorValueMap","scaleString","minValue","valueMap","scaleLinear","scaleLog","domain","color","computeColorMap","react_default","createElement","className","Map","zoom","zoomSnap","zoomDelta","center","style","height","zIndex","dragging","onZoomend","onMoveend","countryData","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","range","i","width","background","backgroundColor","defaultProps","ControlledSlider","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","defaultValue","setState","nextProps","onChange","_this2","slider","assign","setValue","StatisticDetails","descriptionLines","split","popover","title","arrowPointAtCenter","overlayStyle","maxWidth","content","stat","href","target","rel","placement","es_button","size","icon","marginRight","copyTextToClipboard","text","element","clipboard","writeText","body","textArea","document","appendChild","focus","select","successful","execCommand","removeChild","resolve","reject","Error","err","fallbackCopyTextToClipboard","ShareChartComponent","chartRef","query","location","noHash","dropdown","overlay","menu","domElement","offsetHeight","padding","offsetWidth","classFiltered","classList","add","domToImage","toBlob","bgcolor","transform","blob","remove","chartToPngBlob","current","saveAs","message","error","compileNames","headers","dataLines","dataItem","csv","l","join","Blob","origin","link","copyToClipboard","success","Item","theme","withRouter","WITH_SCALE_SETTINGS","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","mapRef","setScale","countryByCode","formatedData","s","statisticByCategory","es_select","placeholder","optionFilterProp","showSearch","stats","OptGroup","label","sortBy","Option","components_ControlledSlider","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","e","Button","disabled","components_ShareChartComponent","replace","qs","components_StatisticDetails","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","defaultSortOrder","align","onRow","record","f","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","React","createRef","setFilterBounds","getZoom","_this$props","loadStatistic","_this$props2","parameters","_this$props3","goTo","newPerCapita","newParameters","_this$props4","_this$state","components_ScrollToTop","row","gutter","md","col","setParameters","queryObject","parse","path","history","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","countryWithAreasSelector","areasOfCountrySelector","areaWithCountriesSelector","areaCode","areaSelector","countriesAndAreasSelector","ChartSettings","perCapitaSwitch","stackedSwitch","stacked","setStacked","es_switch","checked","Loader","load","prevOtherProps","otherProps","buildLoader","loadFunction","StatisticsLoader","defaultSelector","mapStateToProps","mapOfCountryStatisticsInput","withReference","_props$referenceCount","referenceCountryCode","reference","parsedMapOfCountryStatistics","mapOfCountryStatisticsToLoad","countryStatisticsToLoad","countryStatitics","countryStatisticsLoadedSelector","referenceCountry","withCountryStatistics","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","spin","spinning","defaultHeight","buildChart","_options$perCapitaSwi","_options$stackedSwitc","hocs","hasSettings","withStateHandlers","_ref$defaultPerCapita","defaultPerCapita","_ref$defaultStacked","defaultStacked","WrappedChart","compose","_Component","ChartWrapper","buttonRef","inherits","createClass","_this$props$perCapita","_this$props$stacked","statisticList","finalHeight","toLowerCase","descriptionStatistic","finalDescription","boxShadow","data-html2canvas-ignore","components_ChartSettings","CustomTooltip","active","separator","payload","withTotal","displayFilter","totalFilter","units","filteredPayload","_payload$","_payload$$formatter","formatter","total","sum","totalUnit","_p$formatter","dataKey","BasicChart","withComparison","ResponsiveContainer","LineChart","Line","stroke","strokeWidth","dot","CartesianGrid","opacity","XAxis","interval","YAxis","component_Tooltip","props2","components_CustomTooltip","Legend","iconType","CustomGeoJSON","createGeoJSON","leaflet","addTo","flyToBounds","withLeaflet","GeoJSONMap","boxZoom","doubleClickZoom","scrollWheelZoom","zoomControl","TileLayer","attribution","GeoJSONMap_GeoJSON","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","console","warn","dataWithImportAndExport","diff","toFixed","export","import","ComposedChart","Area","stackId","activeDot","fill","strokeOpacity","GDPByEnergyChart","ScatterChart","bottom","Scatter","cx","cy","r","line","dataMin","floor","dataMax","ceil","position","top","0","1","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","GDPByEnergyChartContainer","IndependencyTab","fuelProducedOrConsumed","sm","BasicChartContainer","REFERENCE_DATAKEY","defaultLineAreaProps","isAnimationActive","lineAreaPropsMap","legendPayload","inactive","alpha","cssa","getLegendPayload","fuelConsumed","displayedStats","EnergyMixChart","toggleStat","setDisplayedStats","coalUnit","LineArea","lineAreaProps","some","fuelProps","displayedFuels","chartMax","ticks","getNiceTickValues","pop","getTicksAndDomain","EnergyMixChartWithState","bind","assertThisInitialized","initDone","init","newProps","toggledStat","components_EnergyMixChart","EnergyMixChartBuilded","EnergyMixChartContainer","SettingsComponent","setReferenceCountry","onSelect","primaryMap","primaryReference","electrictyMap","electricityReference","ConnectedSettingsComponent","SummaryTab","containers_EnergyMixChartContainer","ClimateTab","ClimateTab_ConnectedSettingsComponent","tabList","tab","tabContents","summary","independency","climate","TabsComponent","currentTab","onTabChange","TabComponent","card","activeTabKey","TabsComponentWithState","withState","CountryView","Redirect","to","flag","flagIcon","xs","Link","marginTop","lg","maxHeight","src","alt","components_GeoJSONMap","match","params","AboutView","AreaView","AreaView_TabsComponentWithState","GitHubLink","HeaderMenu","mode","selectable","lineHeight","SubMenu","components_GitHubLink","CountriesLoader","prop","AreasLoader","_getAreas","getAllAreas","ConnectedHeaderMenu","scrollToAnchor","getElementById","scrollIntoView","behavior","block","inline","AppLayout","onhashchange","AppLayout_StatisticsLoader","layout","Header","Content","Switch","Route","exact","component","Footer","App","es","HashRouter","components_AppLayout","Boolean","hostname","ReactDOM","src_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d8acbc1.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport L from 'leaflet';\n\nfunction countryMapValues(country, worldTopo) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  const geojson = a && feature(worldTopo, a);\n  const bounds = a && L.geoJSON(geojson).getBounds();\n  return {\n    ...country,\n    geojson,\n    bounds,\n  };\n}\n\nasync function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [fetch('/data/countries.json'), fetch('/data/worldTopo.json')].map(p =>\n      p.then(res => res.json()),\n    ),\n  );\n  return countries.map(country => countryMapValues(country, worldTopo));\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop, mapObjIndexed } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nconst defaultIndicators = {\n  // for areas\n  coal: true,\n  oil: true,\n  gas: true,\n  hydro: true,\n  nuclear: true,\n  biofuelsWaste: true,\n  solarWindTideGeoth: true,\n};\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function countriesInBounds(boundsFilter, state) {\n  const countries = countriesSelector(state);\n\n  return boundsFilter\n    ? countries.filter(\n        country => country.bounds && boundsFilter.intersects(country.bounds),\n      )\n    : countries;\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode] || state.areas.data[countryCode];\n}\n\nexport function fuelConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasConsumed : defaultIndicators;\n}\n\nexport function fuelProducedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasProduced : defaultIndicators;\n}\n\nexport function fuelProducedOrConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country\n    ? mapObjIndexed((v, k) => v || country.hasConsumed[k], country.hasProduced)\n    : defaultIndicators;\n}\n\nexport default countriesReducer;\n","import L from 'leaflet';\nimport { map, uniq, values, mergeAll } from 'ramda';\nimport domToImage from 'dom-to-image';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n\nexport function parseMapOfStatistics(mapOfCountryStatistics, defaultCountry) {\n  return map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n}\n\nexport function addPopCountryStatistics(mapOfCountryStatistics, perCapita) {\n  if (!perCapita) {\n    return mapOfCountryStatistics;\n  }\n\n  const countryCodes = uniq(\n    values(mapOfCountryStatistics).map(d => d.countryCode),\n  );\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...populations,\n    ...mapOfCountryStatistics,\n  };\n}\n\nexport function chartToPngBlob(domElement, scale) {\n  const padding = 10;\n  const height = domElement.offsetHeight + padding * 2;\n  const width = domElement.offsetWidth + padding * 2;\n  const classFiltered = [\n    'ChartWrapper__header__right',\n    'leaflet-control-container',\n  ];\n  domElement.classList.add('transformingToPng');\n  return domToImage\n    .toBlob(domElement, {\n      filter: element => !classFiltered.includes(element.className),\n      bgcolor: 'white',\n      style: {\n        padding: `${padding}px`,\n        transform: `scale(${scale}) translate(${width / 2 / scale}px, ${height /\n          2 /\n          scale}px)`,\n      },\n      height: height * scale,\n      width: width * scale,\n    })\n    .then(blob => {\n      domElement.classList.remove('transformingToPng');\n      return blob;\n    });\n}\n\nexport function memoize(\n  fn,\n  hashFunction = args => JSON.stringify(args),\n  cacheSize = 30,\n) {\n  const cache = {};\n  return function memoizedFun(...args) {\n    const hash = hashFunction(args);\n    if (cache[hash]) {\n      return cache[hash];\n    }\n    const res = fn(...args);\n\n    cache[hash] = res;\n\n    const hashes = Object.keys(cache);\n    if (hashes.length > cacheSize) {\n      delete cache[hashes[0]];\n    }\n\n    return res;\n  };\n}\n\nexport function clickHandlers({ onClick, onDoubleClick }) {\n  let clicks = 0;\n  return function clickHandler(...args) {\n    clicks += 1;\n    if (clicks < 2) {\n      setTimeout(() => {\n        if (clicks < 2) {\n          onClick(...args);\n        } else {\n          onDoubleClick(...args);\n        }\n        clicks = 0;\n      }, 300);\n    }\n  };\n}\n","import { values, mapObjIndexed, mergeAll, groupBy, map, omit } from 'ramda';\nimport { countriesSelector } from '../countries';\nimport {\n  parseMapOfStatistics,\n  addPopCountryStatistics,\n  memoize,\n} from '../../utils';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, value: null }\n      : { year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(countryStatitics, state) {\n  return countryStatitics.every(countryStatistic =>\n    countryStatisticLoadedSelector(countryStatistic, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (perCapita && !population)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction compiledCountryStatisticsSelectorFn(\n  { mapOfCountryStatistics: baseMap, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    baseMap,\n    countryCode,\n  );\n  const mapOfCountryStatistics = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    mapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    mapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .map(year => Number(year))\n    .filter(year => startingYear <= year && year <= endingYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          mapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\nexport const compiledCountryStatisticsSelector = memoize(\n  compiledCountryStatisticsSelectorFn,\n  args => JSON.stringify(args[0]),\n);\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function statisticSourcesSelector(statisticCodes, state) {\n  return statisticCodes.reduce((statisticSources, statisticCode) => {\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sources = values(statistic.source).map(code =>\n        statisticSelector(code, state),\n      );\n      return statisticSources.concat(sources);\n    }\n\n    return statisticSources.concat([statistic]);\n  }, []);\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","const PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description:\n      'This indicator made up by dividing primary energy consumption by primary energy production, gives an indication on the level of self-sufficiency (or dependency) of a country.',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description:\n      'Measures the mass of CO2 by unit of energy that is emitted by the country.',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'FOSSIL_CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    scale: 'linear',\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: 'Includes hydroelectricity, solar, wind and tide productions.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description:\n      'Includes renewables and nuclear productions. Excludes biofuels at the moment.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      const countryStatistics = sourceCodes.map(sourceCode => ({\n        statisticCode: sourceCode,\n        countryCode,\n      }));\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics(countryStatistics),\n      );\n      return;\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics(countryStatistics) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      countryStatistics.map(countryStatistic =>\n        dispatch(loadCountryStatistic(countryStatistic)),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import worldTopo from 'world-atlas/world/110m.json';\nimport countriesData from 'world-countries/countries';\nimport { merge } from 'topojson-client';\nimport { indexBy } from 'ramda';\n\nconst indexedCountries = indexBy(c => c.cca2, countriesData);\n\nfunction computeGeojson(area) {\n  const countryAlpha3Codes = area.countryCodes.map(\n    countryCode => indexedCountries[countryCode].ccn3,\n  );\n  const geometries = worldTopo.objects.countries.geometries.filter(c =>\n    countryAlpha3Codes.includes(c.id),\n  );\n  return merge(worldTopo, geometries);\n}\n\nexport default async function getAreas() {\n  const res = await fetch('/data/areas.json');\n  const data = await res.json();\n\n  return data.map(area => ({\n    ...area,\n    alpha2Code: area.code,\n    commonName: area.name,\n    geojson: area.countryCodes ? computeGeojson(area) : null,\n  }));\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllAreas from '../api/areas';\n\nexport const AREAS_LOAD_ACTION = 'AREAS_LOAD_ACTION';\nexport const AREAS_RECEIVE_ACTION = 'AREAS_RECEIVE_ACTION';\n\nfunction loadAreasAction() {\n  return { type: AREAS_LOAD_ACTION };\n}\n\nfunction receiveAreasAction({ data, errors }) {\n  return { type: AREAS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllAreas() {\n  return function dispatchLoadAllAreas(dispatch) {\n    dispatch(loadAreasAction());\n    return getAllAreas()\n      .then(data =>\n        dispatch(\n          receiveAreasAction({\n            data: indexBy(prop('code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveAreasAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction areasReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case AREAS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case AREAS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function areasLoadedSelector(state) {\n  return state.areas.loaded;\n}\n\nexport function areasSelector(state) {\n  return values(state.areas.data);\n}\n\nexport function areaSelector(areaCode, state) {\n  return state.areas.data[areaCode];\n}\n\nexport function areasOfCountrySelector(countryCode, state) {\n  return values(state.areas.data).filter(\n    area => area.countryCodes && area.countryCodes.includes(countryCode),\n  );\n}\n\nexport default areasReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer, {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n} from './statistics';\nimport areasReducer from './areas';\n\nfunction actionSanitizer(action) {\n  if (\n    (action.type === COUNTRY_STATISTIC_RECEIVE_ACTION ||\n      action.type === STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION) &&\n    action.data\n  ) {\n    return { ...action, data: 'DATA' };\n  }\n  return action;\n}\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n  areas: areasReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  actionSanitizer,\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import { Component } from 'react';\nimport { equals } from 'ramda';\n\nclass ScrollToTop extends Component {\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!equals(this.props, prevProps)) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default ScrollToTop;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n  category: PropTypes.string.isRequired,\n  sourceAttribution: PropTypes.string,\n  sourceUrl: PropTypes.string,\n  sourceDescriptionUrl: PropTypes.string,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n\nexport const AreaType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  countries: PropTypes.arrayOf(CountryType),\n});\n\nexport const LocationType = PropTypes.shape({\n  hash: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map, range } from 'ramda';\nimport { scaleLog, scaleLinear } from 'd3-scale';\nimport * as d3Colors from 'd3-scale-chromatic';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst NA_COLOR = '#888';\nconst BORDER_COLOR = 'black';\nconst LEGEND_COLORS_COUNT = 4;\nconst LEGEND_WIDTH = 300; // px\nconst COLORS_SCHEME = 'YlGnBu';\n\nconst interpolator = d3Colors[`interpolate${COLORS_SCHEME}`];\n\nfunction computeColorMap(data, scaleString) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n  const scaleType = scaleString === 'linear' ? scaleLinear() : scaleLog();\n  const scale = scaleType.domain([minValue, maxValue]);\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: interpolator(0), value };\n    }\n    return {\n      color: interpolator(scale(value)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    selectedCountries,\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    scale,\n    minZoom,\n    onMapChange,\n  } = props;\n  const selectedCountryByCode = indexBy(c => c.alpha2Code, selectedCountries);\n  const selectedData = data.filter(\n    d => d.countryCode !== 'WORLD' && selectedCountryByCode[d.countryCode],\n  );\n  const maxValue = Math.max(...selectedData.map(d => d.value));\n  const colorValueMap = computeColorMap(\n    selectedData,\n    currentStatistic.scale || scale,\n  );\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        minZoom={minZoom}\n        zoom={minZoom}\n        zoomSnap={0.1}\n        zoomDelta={0.5}\n        center={[20, 30]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        dragging={!isMobileOrTablet()}\n        onZoomend={onMapChange}\n        onMoveend={onMapChange}\n      >\n        {countries.map(country => {\n          const countryData = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: BORDER_COLOR,\n                  weight: 0.5,\n                  fillColor: countryData ? countryData.color : NA_COLOR,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(\n                  countryData && countryData.value,\n                )}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          <div>\n            {`${currentStatistic.name} (${displayUnit(\n              currentStatistic.unit,\n              perCapita,\n            )})`}\n          </div>\n          <div className=\"WorldMap__legend__colors\">\n            <div>\n              <div className=\"WorldMap__legend__gradient\">\n                {range(0, LEGEND_COLORS_COUNT).map(i => (\n                  <div\n                    key={i}\n                    className=\"WorldMap__legend__gradient__item\"\n                    style={{\n                      width: LEGEND_WIDTH / LEGEND_COLORS_COUNT,\n                      background: `linear-gradient(to right, ${interpolator(\n                        i / LEGEND_COLORS_COUNT,\n                      )}, ${interpolator((i + 1) / LEGEND_COLORS_COUNT)}`,\n                    }}\n                  />\n                ))}\n              </div>\n              <div className=\"WorldMap__legend__gradientRange\">\n                <div>0</div>\n                <div>{formatNumber(maxValue)}</div>\n              </div>\n            </div>\n            <div>\n              <div\n                className=\"WorldMap__legend__NA__square\"\n                style={{ backgroundColor: NA_COLOR }}\n              />\n              <div>NA</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"WorldMap__sources toPng\">\n        From http://worldenergydata.tk - Sources: IEA, World Bank\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  selectedCountries: PropTypes.arrayOf(CountryType).isRequired,\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  scale: PropTypes.string,\n  minZoom: PropTypes.number,\n  onMapChange: PropTypes.func.isRequired,\n};\n\nWorldMap.defaultProps = {\n  scale: null,\n  minZoom: 1.8,\n};\n\nexport default WorldMap;\n","import React, { Component } from 'react';\nimport { Slider } from 'antd';\n\nclass ControlledSlider extends Component {\n  constructor() {\n    super();\n    this.state = { value: undefined };\n  }\n\n  componentDidMount() {\n    const { defaultValue } = this.props;\n    this.setState({\n      value: defaultValue,\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { defaultValue } = this.props;\n    if (defaultValue !== nextProps.defaultValue) {\n      this.setState({ value: nextProps.defaultValue });\n    }\n  }\n\n  setValue(value) {\n    const { onChange } = this.props;\n    this.setState({ value });\n    onChange(value);\n  }\n\n  render() {\n    const { value } = this.state;\n    return (\n      <Slider {...this.props} value={value} onChange={v => this.setValue(v)} />\n    );\n  }\n}\n\nexport default ControlledSlider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Popover, Button } from 'antd';\n\nimport { StatisticType } from '../utils/types';\n\nfunction StatisticDetails(props) {\n  const { statisticSources, description } = props;\n  const descriptionLines = description && description.split('\\n');\n\n  return (\n    <div className=\"StatisticDetails\">\n      <Popover\n        title=\"Details\"\n        arrowPointAtCenter\n        overlayStyle={{ maxWidth: '300px' }}\n        content={\n          // eslint-disable-next-line react/jsx-wrap-multilines\n          <div>\n            {description && (\n              <div>\n                <strong>Description : </strong>\n                {`${descriptionLines[0]}`}\n              </div>\n            )}\n            <div>\n              <strong>\n                {`Source${statisticSources.length > 1 ? 's' : ''}`}\n              </strong>\n              <ul className=\"StatisticDetails__sources\">\n                {statisticSources.map(stat => (\n                  <li key={stat.code}>\n                    <a\n                      href={stat.sourceUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {`${stat.name} (${stat.sourceAttribution})`}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        }\n        placement=\"bottomRight\"\n      >\n        <Button\n          size=\"small\"\n          icon=\"info-circle\"\n          style={{ marginRight: '5px' }}\n        />\n      </Popover>\n    </div>\n  );\n}\n\nStatisticDetails.propTypes = {\n  description: PropTypes.string,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n};\n\nStatisticDetails.defaultProps = {\n  description: null,\n};\n\nexport default StatisticDetails;\n","function fallbackCopyTextToClipboard(text, element = window.body) {\n  const textArea = document.createElement('textarea');\n  textArea.value = text;\n  element.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    const successful = document.execCommand('copy');\n    element.removeChild(textArea);\n    return successful\n      ? Promise.resolve()\n      : Promise.reject(new Error('fallbackCopyTextToClipboard error'));\n  } catch (err) {\n    element.removeChild(textArea);\n    throw Promise.reject(err);\n  }\n}\nfunction copyTextToClipboard(text, element) {\n  return navigator.clipboard\n    ? navigator.clipboard.writeText(text)\n    : fallbackCopyTextToClipboard(text, element);\n}\n\nexport default copyTextToClipboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { saveAs } from 'file-saver';\nimport { withRouter } from 'react-router-dom';\n\nimport { Button, Dropdown, Menu, Icon, message } from 'antd';\nimport { chartToPngBlob } from '../utils';\nimport copyToClipboard from '../utils/copyToClipboard';\nimport { LocationType } from '../utils/types';\n\nfunction ShareChartComponent(props) {\n  const { id, chartRef, query, location, noHash } = props;\n  return (\n    <div className=\"ShareChartComponent\">\n      <Dropdown\n        overlay={\n          // eslint-disable-next-line\n          <Menu\n            onClick={({ key }) => {\n              if (key === 'png') {\n                chartToPngBlob(chartRef.current, 2)\n                  .then(blob => saveAs(blob, `${id}.png`))\n                  .catch(() => message.error('An error occured !'));\n              } else if (key === 'csv') {\n                const { data, statistics } = props;\n                const compileNames = Object.keys(statistics);\n                const headers = compileNames.map(\n                  compileName => statistics[compileName].code,\n                );\n                const dataLines = data.map(dataItem =>\n                  compileNames.map(compileName => dataItem[compileName]),\n                );\n                const lines = [headers, ...dataLines];\n                const csv = lines.map(l => l.join(',')).join('\\n');\n                const blob = new Blob([csv], {\n                  type: 'text/plain;charset=utf-8',\n                });\n                saveAs(blob, `${id}.csv`);\n              } else if (key === 'link') {\n                const { origin } = window.location;\n                const { pathname } = location;\n\n                const link = `${origin}#${pathname}${query}${\n                  noHash ? '' : `#${id}`\n                }`;\n                copyToClipboard(link, chartRef.current)\n                  .then(() => message.success('Copied !'))\n                  .catch(() => message.error('An error occured !'));\n              }\n            }}\n          >\n            <Menu.Item key=\"link\">\n              <Icon type=\"copy\" theme=\"filled\" />\n              Copy link\n            </Menu.Item>\n            <Menu.Item key=\"png\">\n              <Icon type=\"picture\" theme=\"filled\" />\n              .png\n            </Menu.Item>\n            <Menu.Item key=\"csv\">\n              <Icon type=\"file-text\" theme=\"filled\" />\n              .csv\n            </Menu.Item>\n          </Menu>\n        }\n      >\n        <Button size=\"small\" icon=\"share-alt\" style={{ marginRight: '5px' }} />\n      </Dropdown>\n    </div>\n  );\n}\n\nShareChartComponent.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  chartRef: PropTypes.any.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  statistics: PropTypes.object.isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  id: PropTypes.string.isRequired,\n  query: PropTypes.string,\n  location: LocationType.isRequired,\n  noHash: PropTypes.bool,\n};\n\nShareChartComponent.defaultProps = {\n  query: '',\n  noHash: false,\n};\n\nexport default withRouter(ShareChartComponent);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Radio, Popover, Button, Icon } from 'antd';\nimport debounce from 'lodash.debounce';\nimport qs from 'qs';\n\nimport { sortBy, groupBy, indexBy } from 'ramda';\n\nimport Slider from './ControlledSlider';\nimport StatisticDetails from '../../../components/StatisticDetails';\nimport ShareChartComponent from '../../../components/ShareChartComponent';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nconst WITH_SCALE_SETTINGS = false;\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    statisticSources,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n    mapRef,\n    scale,\n    setScale,\n  } = props;\n\n  const countryByCode = indexBy(c => c.alpha2Code, countries);\n  const formatedData = data\n    .filter(s => s.value !== null && countryByCode[s.countryCode])\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countryByCode[s.countryCode].commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  if (currentStatistic.isIntensive && perCapita) {\n    setPerCapita(false);\n  }\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <div className=\"StatisticExplorer__options\">\n        <Radio.Group\n          style={{ marginBottom: '10px' }}\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button\n            value\n            disabled={\n              currentStatistic.code === 'POPULATION' ||\n              currentStatistic.isIntensive\n            }\n          >\n            Per capita\n          </Radio.Button>\n        </Radio.Group>\n        <div className=\"StatisticExplorer__options__right\">\n          <ShareChartComponent\n            id={currentStatistic.name.replace(/ /g, '_')}\n            chartRef={mapRef}\n            statistics={{\n              countryCode: { code: 'COUNTRY_CODE' },\n              value: currentStatistic,\n            }}\n            data={data}\n            query={`?${qs.stringify({\n              statisticCode: currentStatistic.code,\n              perCapita,\n              currentYear,\n            })}`}\n            noHash\n          />\n          <StatisticDetails\n            statisticSources={statisticSources}\n            description={currentStatistic.description}\n          />\n          {WITH_SCALE_SETTINGS && (\n            <Popover\n              title=\"Settings\"\n              arrowPointAtCenter\n              content={\n                // eslint-disable-next-line react/jsx-wrap-multilines\n                <div>\n                  {'Scale '}\n                  <Radio.Group\n                    buttonStyle=\"solid\"\n                    size=\"small\"\n                    value={scale}\n                    onChange={e => setScale(e.target.value)}\n                  >\n                    <Radio.Button value=\"log\">Log</Radio.Button>\n                    <Radio.Button value=\"linear\">Linear</Radio.Button>\n                  </Radio.Group>\n                </div>\n              }\n              placement=\"bottomRight\"\n            >\n              <Button size=\"small\">\n                <Icon type=\"setting\" theme=\"filled\" />\n              </Button>\n            </Popover>\n          )}\n        </div>\n      </div>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  mapRef: PropTypes.object.isRequired,\n  scale: PropTypes.string,\n  setScale: PropTypes.func.isRequired,\n};\n\nStatisticExplorer.defaultProps = {\n  scale: null,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport qs from 'qs';\n\nimport { Row, Col } from 'antd';\nimport ScrollToTop from '../../components/ScrollToTop';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  countriesInBounds,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../store/statistics';\n\nfunction f(statisticCode, perCapita) {\n  // TODO\n  return perCapita ? [statisticCode, 'POPULATION'] : [statisticCode];\n}\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    selectedCountries: countriesInBounds(boundsFilter, state),\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    countries: countriesInBounds(boundsFilter, state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    statisticSources: statisticSourcesSelector(\n      f(statisticCode, perCapita),\n      state,\n    ),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nconst MIN_ZOOM = 2;\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      scale: null,\n      boundsFilter: null,\n    };\n    this.mapRef = React.createRef();\n    this.onMapChange = e =>\n      this.setFilterBounds(e.target.getBounds(), e.target.getZoom());\n  }\n\n  componentDidMount() {\n    const { loadStatistic, statisticCode, perCapita } = this.props;\n\n    loadStatistic(statisticCode);\n\n    if (perCapita) {\n      loadStatistic('POPULATION');\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { loadStatistic, statisticCode, perCapita } = this.props;\n    if (statisticCode !== prevProps.statisticCode) {\n      loadStatistic(statisticCode);\n    }\n    if (perCapita !== prevProps.perCapita && perCapita) {\n      loadStatistic('POPULATION');\n    }\n  }\n\n  setParameters(parameters) {\n    const { statisticCode, perCapita, currentYear, goTo } = this.props;\n    const newPerCapita =\n      parameters.perCapita === undefined ? perCapita : parameters.perCapita;\n\n    const newParameters = {\n      statisticCode,\n      currentYear,\n      ...parameters,\n      perCapita: newPerCapita && parameters.statisticCode !== 'POPULATION',\n    };\n    goTo(`?${qs.stringify(newParameters)}`);\n  }\n\n  setFilterBounds(bounds, zoom) {\n    this.setState({ boundsFilter: zoom === MIN_ZOOM ? null : bounds });\n  }\n\n  setScale(scale) {\n    this.setState({ scale });\n  }\n\n  render() {\n    const { goTo, currentYear, statisticCode, perCapita } = this.props;\n    const { scale, boundsFilter } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <ScrollToTop />\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <div ref={this.mapRef}>\n              <ConnectedWorldMap\n                statisticCode={statisticCode}\n                currentYear={currentYear}\n                perCapita={perCapita}\n                scale={scale}\n                minZoom={MIN_ZOOM}\n                onMapChange={this.onMapChange}\n                boundsFilter={boundsFilter}\n              />\n            </div>\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => goTo(`country/${record.countryCode}`)}\n              setYear={year => this.setParameters({ currentYear: year })}\n              setStatistic={value =>\n                this.setParameters({ statisticCode: value })\n              }\n              setPerCapita={value => this.setParameters({ perCapita: value })}\n              mapRef={this.mapRef}\n              scale={scale}\n              setScale={value => this.setScale(value)}\n              boundsFilter={boundsFilter}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  loadStatistic: PropTypes.func.isRequired,\n  statisticCode: PropTypes.string,\n  perCapita: PropTypes.bool.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nHomeView.defaultProps = {\n  statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n};\n\nexport default connect(\n  (state, props) => {\n    const { search } = props.location;\n    const queryObject = search ? qs.parse(search.substr(1)) : {};\n    return {\n      goTo(path) {\n        props.history.push(path);\n      },\n      currentYear: Number(queryObject.currentYear) || 2010,\n      perCapita: queryObject.perCapita === 'true',\n      statisticCode: queryObject.statisticCode,\n    };\n  },\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import { countrySelector, countriesSelector } from './countries';\nimport { areaSelector, areasOfCountrySelector, areasSelector } from './areas';\n\nexport function countryWithAreasSelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  const areas = areasOfCountrySelector(countryCode, state);\n\n  return {\n    ...country,\n    areas,\n  };\n}\n\nexport function areaWithCountriesSelector(areaCode, state) {\n  const area = areaSelector(areaCode, state);\n  const countries = area.countryCodes\n    ? area.countryCodes\n        .map(countryCode => countrySelector(countryCode, state))\n        .filter(c => !!c)\n    : countriesSelector(state);\n  return {\n    ...area,\n    countries,\n  };\n}\n\nexport function countriesAndAreasSelector(state) {\n  return [\n    ...countriesSelector(state).filter(c => !c.disabled),\n    ...areasSelector(state),\n  ];\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Switch } from 'antd';\n\nfunction ChartSettings(props) {\n  const {\n    perCapitaSwitch,\n    stackedSwitch,\n    perCapita,\n    stacked,\n    setPerCapita,\n    setStacked,\n  } = props;\n\n  return (\n    <div className=\"ChartSettings\">\n      {perCapitaSwitch && (\n        <div>\n          {'Per capita '}\n          <Switch size=\"small\" checked={perCapita} onChange={setPerCapita} />\n        </div>\n      )}\n      {stackedSwitch && (\n        <div>\n          {'Stacked '}\n          <Switch size=\"small\" checked={stacked} onChange={setStacked} />\n        </div>\n      )}\n    </div>\n  );\n}\nChartSettings.propTypes = {\n  perCapitaSwitch: PropTypes.bool.isRequired,\n  stackedSwitch: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  setStacked: PropTypes.func.isRequired,\n};\n\nexport default ChartSettings;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values, uniq } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n  statisticSourcesSelector,\n} from '../store/statistics';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../utils';\nimport { countrySelector } from '../store/countries';\n\nconst StatisticsLoader = buildLoader(({ countryStatistics }) =>\n  loadCountryStatistics(countryStatistics),\n);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction mapStateToProps(state, props) {\n  const {\n    perCapita,\n    statisticCode,\n    mapOfCountryStatistics: mapOfCountryStatisticsInput,\n    countryCode,\n    withReference,\n    referenceCountryCode = 'WORLD',\n  } = props;\n  const isIntensive =\n    statisticCode && statisticSelector(statisticCode, state).isIntensive;\n  const mapOfCountryStatistics =\n    (perCapita || isIntensive) && withReference\n      ? {\n          ...mapOfCountryStatisticsInput,\n          reference: {\n            countryCode: referenceCountryCode,\n            statisticCode:\n              typeof withReference === 'boolean'\n                ? statisticCode\n                : withReference,\n          },\n        }\n      : mapOfCountryStatisticsInput;\n\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n  );\n  const mapOfCountryStatisticsToLoad = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const countryStatisticsToLoad = values(mapOfCountryStatisticsToLoad);\n  const statisticCodes = uniq(\n    countryStatisticsToLoad.map(c => c.statisticCode),\n  );\n  const isLoaded = countryStatisticsLoadedSelector(\n    countryStatisticsToLoad,\n    state,\n  );\n  const data = isLoaded\n    ? compiledCountryStatisticsSelector(\n        {\n          mapOfCountryStatistics,\n          countryCode: props.countryCode,\n          perCapita: props.perCapita,\n        },\n        state,\n      )\n    : [];\n\n  return {\n    data,\n    statistics: map(\n      ({ statisticCode: code }) => statisticSelector(code, state),\n      parsedMapOfCountryStatistics,\n    ),\n    statisticSources: statisticSourcesSelector(statisticCodes, state),\n    isLoaded,\n    countryStatisticsToLoad,\n    country: countrySelector(countryCode, state),\n    referenceCountry: countrySelector(referenceCountryCode, state),\n  };\n}\n\nfunction withCountryStatistics(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) =>\n      mapStateToProps(state, {\n        mapOfCountryStatistics: mapOfCountryStatisticsSelector(state, props),\n        ...props,\n      }),\n    )(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader countryStatistics={props.countryStatisticsToLoad} />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistics;\n","import React, { Component } from 'react';\nimport { values } from 'ramda';\nimport { withStateHandlers, compose } from 'recompose';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\n\nimport { Icon, Popover, Button } from 'antd';\n\nimport { displayUnit } from '../utils';\nimport StatisticDetails from '../components/StatisticDetails';\n\nimport ChartSettings from './components/ChartSettings';\nimport ShareChartComponent from '../components/ShareChartComponent';\nimport withCountryStatistics from './withCountryStatistics';\n\nconst defaultHeight = 200;\n\nfunction buildChart(options = {}) {\n  const {\n    mapOfCountryStatisticsSelector,\n    perCapitaSwitch = false,\n    stackedSwitch = false,\n  } = options;\n  const hocs = [withRouter];\n  const hasSettings = perCapitaSwitch || stackedSwitch;\n\n  if (hasSettings) {\n    hocs.push(\n      withStateHandlers(\n        ({ defaultPerCapita = false, defaultStacked = false }) => ({\n          perCapita: defaultPerCapita,\n          stacked: defaultStacked,\n        }),\n        {\n          setPerCapita: () => perCapita => ({ perCapita }),\n          setStacked: () => stacked => ({ stacked }),\n        },\n      ),\n    );\n  }\n  hocs.push(withCountryStatistics(mapOfCountryStatisticsSelector));\n\n  return function buildChartWrapper(WrappedChart) {\n    return compose(...hocs)(\n      class ChartWrapper extends Component {\n        constructor() {\n          super();\n          this.chartRef = React.createRef();\n          this.buttonRef = React.createRef();\n        }\n\n        render() {\n          const {\n            title,\n            description,\n            statistics,\n            statisticSources,\n            height,\n            perCapita = false,\n            stacked = false,\n            setPerCapita,\n            setStacked,\n            data,\n            withReference,\n            referenceCountryCode,\n            location,\n          } = this.props;\n          const statisticList = values(statistics);\n          const statistic = statisticList[0];\n          const finalHeight = options.height || height || defaultHeight;\n          const id = (title\n            ? title.replace(/ /g, '_')\n            : statistic.name.replace(/ /g, '_')\n          ).toLowerCase();\n\n          const descriptionStatistic = statisticList.find(\n            s => s.code === description,\n          );\n          const finalDescription =\n            statisticList.length < 2\n              ? description || statistic.description\n              : (descriptionStatistic && descriptionStatistic.description) ||\n                description;\n          const hash = location.hash.substr(1);\n          const style =\n            hash === id\n              ? {\n                  boxShadow: '0px 0px 10px 1px rgba(0,0,0,0.5)',\n                }\n              : {};\n\n          return (\n            <div\n              id={id}\n              className=\"ChartWrapper\"\n              ref={this.chartRef}\n              style={style}\n            >\n              <div className=\"ChartWrapper__header\">\n                <div className=\"ChartWrapper__header__left\">\n                  <span className=\"ChartWrapper__title\">\n                    {title || statistic.name}\n                  </span>\n                  <span className=\"ChartWrapper__title__unit\">\n                    {` (${displayUnit(statistic.unit, perCapita)})`}\n                  </span>\n                </div>\n                <div\n                  className=\"ChartWrapper__header__right\"\n                  data-html2canvas-ignore\n                >\n                  <ShareChartComponent\n                    id={id}\n                    chartRef={this.chartRef}\n                    statistics={{ year: { code: 'YEAR' }, ...statistics }}\n                    data={data}\n                    {...(withReference\n                      ? {\n                          query: `?${qs.stringify({\n                            referenceCountry: referenceCountryCode,\n                          })}`,\n                        }\n                      : {})}\n                  />\n                  <StatisticDetails\n                    statisticSources={statisticSources}\n                    description={finalDescription}\n                  />\n                  {hasSettings && (\n                    <div>\n                      <Popover\n                        title=\"Settings\"\n                        arrowPointAtCenter\n                        content={\n                          // eslint-disable-next-line react/jsx-wrap-multilines\n                          <ChartSettings\n                            perCapitaSwitch={perCapitaSwitch}\n                            stackedSwitch={stackedSwitch}\n                            stacked={stacked}\n                            perCapita={perCapita}\n                            setPerCapita={setPerCapita}\n                            setStacked={setStacked}\n                          />\n                        }\n                        placement=\"bottomRight\"\n                      >\n                        <Button size=\"small\">\n                          <Icon type=\"setting\" theme=\"filled\" />\n                        </Button>\n                      </Popover>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <WrappedChart\n                {...this.props}\n                height={finalHeight}\n                perCapita={perCapita}\n                stacked={stacked}\n              />\n              <div className=\"ChartWrapper__footer toPng\">\n                From http://worldenergydata.tk - Sources: IEA, World Bank\n              </div>\n            </div>\n          );\n        }\n      },\n    );\n  };\n}\n\nexport default buildChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label, displayFilter, totalFilter, units } = props;\n    const filteredPayload = payload.filter(displayFilter);\n\n    if (filteredPayload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload\n      .filter(totalFilter)\n      .reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = filteredPayload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {filteredPayload.map((p, i) => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey || name} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit || units[i]}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  withTotal: PropTypes.bool,\n  displayFilter: PropTypes.func,\n  totalFilter: PropTypes.func,\n  units: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  withTotal: false,\n  displayFilter: i => i,\n  totalFilter: i => i,\n  units: {},\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  Legend,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const {\n    data,\n    statistics,\n    color,\n    perCapita,\n    height,\n    country,\n    referenceCountry,\n    withReference,\n  } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n  const withComparison = withReference && (perCapita || statistic.isIntensive);\n\n  return (\n    <div className=\"BasicChart\">\n      <ResponsiveContainer height={height}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={country.commonName}\n            unit={` ${unit}`}\n          />\n          {withComparison && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reference\"\n              stroke=\"red\"\n              strokeWidth={3}\n              dot={false}\n              name={referenceCountry.commonName}\n              unit={` ${unit}`}\n            />\n          )}\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={props2 => <CustomTooltip {...props2} />} />\n          {withComparison && <Legend iconType=\"circle\" />}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n  withReference: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  country: CountryType.isRequired,\n  referenceCountry: CountryType.isRequired,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n  withReference: false,\n};\n\nexport default BasicChart;\n","import buildChart from '../../../HOC/buildChart';\nimport BasicChart from '../components/BasicChart';\n\nexport default buildChart()(BasicChart);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction GeoJSONMap(props) {\n  const { geojson, center } = props;\n\n  return (\n    <div className=\"GeoJSONMap\">\n      <Map\n        center={center}\n        zoom={2}\n        zoomDelta={0}\n        zoomSnap={0}\n        boxZoom={false}\n        doubleClickZoom={false}\n        scrollWheelZoom={false}\n        zoomControl={false}\n        dragging={false}\n        style={{ height: '300px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {geojson && <GeoJSON data={geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nGeoJSONMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  geojson: PropTypes.object.isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default GeoJSONMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data, height } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={dataWithImportAndExport}>\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                displayFilter={p => p.name !== 'base'}\n              />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\n\nfunction GDPByEnergyChart(props) {\n  const { data, color, statistics } = props;\n  // const statistic = statistics.value;\n  // const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"GDPByEnergyChart\">\n      <ResponsiveContainer height={300}>\n        <ScatterChart data={data} margin={{ bottom: 50 }}>\n          <Scatter\n            fill={color}\n            shape={props2 => (\n              <circle cx={props2.cx} cy={props2.cy} r={3} fill={color} />\n            )}\n            line\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"energy\"\n            name={statistics.energy.name}\n            type=\"number\"\n            domain={[\n              dataMin => Math.floor(0.95 * dataMin),\n              dataMax => Math.ceil(1.05 * dataMax),\n            ]}\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.energy.name} (${\n                statistics.energy.unit.main\n              })`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"gdp\"\n            name={statistics.gdp.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.year\n                }\n                units={{\n                  '0': statistics.energy.unit.main,\n                  '1': statistics.gdp.unit.main,\n                }}\n              />\n            )}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nGDPByEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      gdp: PropTypes.number,\n      energy: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    gdp: StatisticType,\n    energy: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  color: PropTypes.string,\n};\n\nGDPByEnergyChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default GDPByEnergyChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport buildChart from '../../../HOC/buildChart';\nimport ProdConsoChart from './ProdConsoChart';\nimport GDPByEnergyChart from './GDPByEnergyChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst ProdConsoChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: (state, props) => ({\n    prod: props.prodStatisticCode,\n    conso: props.consoStatisticCode,\n  }),\n})(ProdConsoChart);\n\nconst GDPByEnergyChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    gdp: 'GDP_2010_USD',\n    energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n  },\n})(GDPByEnergyChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode, fuelProducedOrConsumed } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <h3>Imports/Exports</h3>\n        {fuelProducedOrConsumed.coal && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n              fuel=\"Coal\"\n              title=\"Coal Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.oil && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n              fuel=\"Oil\"\n              title=\"Oil Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.gas && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n              consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n              fuel=\"Gas\"\n              title=\"Gas Trade\"\n            />\n          </Col>\n        )}\n      </Row>\n      <Row>\n        <h3>Energy/GDP coupling</h3>\n        <Col md={16} sm={24}>\n          <GDPByEnergyChartContainer\n            countryCode={countryCode}\n            title=\"GDP according to primary energy\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  fuelProducedOrConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { values, mapObjIndexed } from 'ramda';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport color from 'onecolor';\n\nimport { getNiceTickValues } from 'recharts-scale';\nimport { tickFormatter, displayUnit, clickHandlers } from '../../../utils';\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nconst FILL_OPACITY = 0.7;\nconst REFERENCE_DATAKEY = 'reference'; // TODO in selectors\nconst defaultLineAreaProps = {\n  type: 'monotone',\n  dot: false,\n  activeDot: false,\n  fillOpacity: FILL_OPACITY,\n  isAnimationActive: false,\n};\n\nconst lineAreaPropsMap = {\n  coal: { name: 'Coal', color: 'black' },\n  oil: { name: 'Oil', color: 'grey' },\n  gas: { name: 'Gas', color: 'orange' },\n  nuclear: { name: 'Nuclear', color: 'purple' },\n  hydro: { name: 'Hydroelectricity', color: 'blue' },\n  biofuelsWaste: { name: 'Biofuels & Waste', color: 'saddlebrown' },\n  solarWindTideGeoth: { name: 'Geothermy, Wind, Solar & Tide', color: 'green' },\n};\n\nconst legendPayload = values(\n  mapObjIndexed((p, key) => ({ ...p, dataKey: key }), lineAreaPropsMap),\n).map(props => ({\n  dataKey: props.dataKey,\n  value: props.name,\n  type: 'circle',\n  inactive: false,\n  color: color(props.color)\n    .alpha(FILL_OPACITY)\n    .cssa(),\n}));\n\nfunction getLegendPayload({\n  fuelConsumed,\n  displayedStats,\n  perCapita,\n  referenceCountry,\n}) {\n  return legendPayload\n    .filter(payload => fuelConsumed[payload.dataKey])\n    .map(payload => ({\n      ...payload,\n      inactive: !displayedStats.includes(payload.dataKey),\n    }))\n    .concat(\n      perCapita\n        ? [\n            {\n              dataKey: REFERENCE_DATAKEY,\n              value: referenceCountry.commonName,\n              color: 'red',\n              type: 'circle',\n              inactive: !displayedStats.includes(REFERENCE_DATAKEY),\n            },\n          ]\n        : [],\n    );\n}\n\nfunction getTicksAndDomain({ data, perCapita, displayedStats, stacked }) {\n  const displayedFuels = displayedStats.filter(s => s !== REFERENCE_DATAKEY);\n  const withReference = perCapita && displayedStats.includes(REFERENCE_DATAKEY);\n  const max = Math.max(\n    ...(stacked\n      ? data.map(d => displayedFuels.reduce((sum, k) => sum + d[k], 0))\n      : data.map(d => Math.max(...displayedFuels.map(k => d[k])))),\n    ...(withReference ? data.map(d => d.reference) : []),\n  );\n\n  const chartMax = max * 1.05;\n  const ticks = getNiceTickValues([0, chartMax], 5, true);\n\n  if (ticks[3] > chartMax) {\n    ticks.pop();\n  }\n  const domain = [0, ticks[ticks.length - 1]];\n  return { domain, ticks };\n}\n\nfunction EnergyMixChart(props) {\n  const {\n    data,\n    stacked,\n    perCapita,\n    fuelConsumed,\n    statistics,\n    referenceCountry,\n    displayedStats,\n    toggleStat,\n    setDisplayedStats,\n  } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n  const lineAreaProps = stacked\n    ? { stackId: '1', unit, ...defaultLineAreaProps }\n    : { strokeWidth: 2, unit, ...defaultLineAreaProps };\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart data={data}>\n          {displayedStats\n            .filter(s => s !== REFERENCE_DATAKEY)\n            .map(fuel => {\n              const fuelProps = lineAreaPropsMap[fuel];\n              return (\n                <LineArea\n                  key={fuel}\n                  {...lineAreaProps}\n                  dataKey={fuel}\n                  name={fuelProps.name}\n                  stroke={fuelProps.color}\n                  fill={fuelProps.color}\n                />\n              );\n            })}\n          {perCapita && displayedStats.includes(REFERENCE_DATAKEY) && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reference\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n              name={referenceCountry.commonName}\n              stroke=\"red\"\n              unit={unit}\n              isAnimationActive={false}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            tickFormatter={tickFormatter}\n            {...getTicksAndDomain({\n              data,\n              perCapita,\n              displayedStats,\n              stacked,\n            })}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={p => p.dataKey !== REFERENCE_DATAKEY}\n              />\n            )}\n          />\n          <Legend\n            iconType=\"circle\"\n            onClick={clickHandlers({\n              onClick: ({ dataKey }) => toggleStat(dataKey),\n              onDoubleClick: ({ dataKey }) => setDisplayedStats([dataKey]),\n            })}\n            payload={getLegendPayload({\n              fuelConsumed,\n              displayedStats,\n              perCapita,\n              referenceCountry,\n            })}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  fuelConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  referenceCountry: CountryType.isRequired,\n  toggleStat: PropTypes.func.isRequired,\n  setDisplayedStats: PropTypes.func.isRequired,\n  displayedStats: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default EnergyMixChart;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { sortBy } from 'ramda';\n\nimport buildChart from '../../../HOC/buildChart';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport { fuelConsumedCountrySelector } from '../../../store/countries';\n\nclass EnergyMixChartWithState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      displayedStats: [],\n    };\n    this.toggleStat = this.toggleStat.bind(this);\n    this.setDisplayedStats = this.setDisplayedStats.bind(this);\n    this.initDone = false;\n  }\n\n  componentDidMount() {\n    this.init(this.props);\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { countryCode, data } = this.props;\n    if (\n      newProps.countryCode !== countryCode ||\n      (data.length !== newProps.data.length && !this.initDone)\n    ) {\n      this.init(newProps);\n    }\n  }\n\n  setDisplayedStats(displayedStats) {\n    this.setState({\n      displayedStats,\n    });\n  }\n\n  init({ data, fuelConsumed }) {\n    this.initDone = true;\n    this.setState({\n      displayedStats: sortBy(\n        fuel => -Math.max(...data.map(d => d[fuel])),\n        Object.keys(fuelConsumed).filter(fuel => fuelConsumed[fuel]),\n      ).concat(['reference']),\n    });\n  }\n\n  toggleStat(toggledStat) {\n    const { displayedStats } = this.state;\n    this.setState({\n      displayedStats: displayedStats.includes(toggledStat)\n        ? displayedStats.filter(d => d !== toggledStat)\n        : [...displayedStats, toggledStat],\n    });\n  }\n\n  render() {\n    return (\n      <EnergyMixChart\n        {...this.props}\n        {...this.state}\n        toggleStat={this.toggleStat}\n        setDisplayedStats={this.setDisplayedStats}\n      />\n    );\n  }\n}\n\nconst EnergyMixChartBuilded = buildChart({\n  perCapitaSwitch: true,\n  stackedSwitch: true,\n})(EnergyMixChartWithState);\n\nconst EnergyMixChartContainer = connect((state, { countryCode }) => ({\n  fuelConsumed: fuelConsumedCountrySelector(countryCode, state),\n}))(EnergyMixChartBuilded);\n\nexport default EnergyMixChartContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { sortBy } from 'ramda';\n\nimport { Select } from 'antd';\n\nimport { CountryType } from '../../../utils/types';\n\nfunction SettingsComponent(props) {\n  const { countries, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"SettingComponent\">\n      {'Compare to : '}\n      <Select\n        value={referenceCountryCode}\n        placeholder=\"Select a country or a zone\"\n        optionFilterProp=\"title\"\n        showSearch\n        style={{ width: '250px' }}\n        onSelect={countryCode => setReferenceCountry(countryCode)}\n      >\n        {sortBy(c => c.commonName, countries).map(country => (\n          <Select.Option\n            key={country.alpha2Code}\n            disabled={country.disabled}\n            title={`${country.commonName} (${country.alpha3Code})`}\n          >\n            {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n          </Select.Option>\n        ))}\n      </Select>\n    </div>\n  );\n}\n\nSettingsComponent.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default SettingsComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\nimport SettingsComponent from './SettingsComponent';\nimport { countriesAndAreasSelector } from '../../../store/otherSelectors';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nconst ConnectedSettingsComponent = connect(state => ({\n  countries: countriesAndAreasSelector(state),\n}))(SettingsComponent);\n\nfunction SummaryTab(props) {\n  const { countryCode, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <Row>\n        <Col md={24} sm={24}>\n          <ConnectedSettingsComponent\n            setReferenceCountry={setReferenceCountry}\n            referenceCountryCode={referenceCountryCode}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={24} sm={24}>\n          <EnergyMixChartContainer\n            title=\"Primary energy consumption\"\n            description=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            countryCode={countryCode}\n            mapOfCountryStatistics={primaryMap}\n            withReference={primaryReference}\n            referenceCountryCode={referenceCountryCode}\n            defaultPerCapita\n            defaultStacked\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={24} sm={24}>\n          <EnergyMixChartContainer\n            title=\"Electricity generation by fuels\"\n            description=\"ELECTRICITY_GENERATION_TWH\"\n            countryCode={countryCode}\n            mapOfCountryStatistics={electrictyMap}\n            withReference={electricityReference}\n            referenceCountryCode={referenceCountryCode}\n            defaultPerCapita\n            defaultStacked\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\nimport SettingsComponent from './SettingsComponent';\n\nimport { countriesAndAreasSelector } from '../../../store/otherSelectors';\n\nconst ConnectedSettingsComponent = connect(state => ({\n  countries: countriesAndAreasSelector(state),\n}))(SettingsComponent);\n\nfunction ClimateTab(props) {\n  const { countryCode, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row>\n        <Col md={24} sm={24}>\n          <ConnectedSettingsComponent\n            setReferenceCountry={setReferenceCountry}\n            referenceCountryCode={referenceCountryCode}\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"FOSSIL_CO2_EMISSIONS_MT\"\n            perCapita\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            perCapita\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_INTENSITY_OF_ENERGY\"\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Card } from 'antd';\n\nimport { fuelProducedOrConsumedCountrySelector } from '../../../store/countries';\n\nimport IndependencyTab from './IndependencyTab';\nimport SummaryTab from './SummaryTab';\nimport ClimateTab from './ClimateTab';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst tabContents = {\n  summary: SummaryTab,\n  independency: IndependencyTabContainer,\n  climate: ClimateTab,\n};\n\nfunction TabsComponent(props) {\n  const {\n    currentTab,\n    countryCode,\n    onTabChange,\n    setReferenceCountry,\n    referenceCountryCode,\n  } = props;\n  const TabComponent = tabContents[currentTab];\n  return (\n    <Card\n      key={currentTab}\n      tabList={tabList}\n      activeTabKey={currentTab}\n      onTabChange={onTabChange}\n    >\n      <TabComponent\n        countryCode={countryCode}\n        setReferenceCountry={setReferenceCountry}\n        referenceCountryCode={referenceCountryCode}\n      />\n    </Card>\n  );\n}\n\nTabsComponent.propTypes = {\n  currentTab: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  onTabChange: PropTypes.func.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default TabsComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { withState } from 'recompose';\nimport qs from 'qs';\n\nimport { Row, Col, Card } from 'antd';\n\nimport { countryWithAreasSelector } from '../../store/otherSelectors';\n\nimport { CountryType } from '../../utils/types';\nimport { isMobileOrTablet } from '../../utils';\n\nimport BasicChartContainer from './containers/BasicChartContainer';\n\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport ScrollToTop from '../../components/ScrollToTop';\nimport TabsComponent from './components/TabsComponent';\n\nconst TabsComponentWithState = withState(\n  'referenceCountryCode',\n  'setReferenceCountry',\n  props => props.referenceCountry,\n)(TabsComponent);\n\nfunction CountryView(props) {\n  const { country, goTo, currentTab, referenceCountry } = props;\n\n  if (!country || country.disabled) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const countryCode = country.alpha2Code;\n  const flag = isMobileOrTablet() ? country.flagIcon : '';\n  return (\n    <div className=\"CountryView\">\n      <ScrollToTop countryCode={countryCode} />\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n            <div>{`Capital: ${country.capital}`}</div>\n            <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n            <div>\n              {`Member of: `}\n              {country.areas.map((area, i) => (\n                <Link key={area.code} to={`/area/${area.code}`}>\n                  {`${i > 0 ? ', ' : ''}${area.name}`}\n                </Link>\n              ))}\n            </div>\n            <Row style={{ marginTop: '20px' }} gutter={20}>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"POPULATION\"\n                  countryCode={countryCode}\n                  color=\"#2c82c9\"\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"GDP_2010_USD\"\n                  countryCode={countryCode}\n                  color=\"#f22613\"\n                  perCapita\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <img\n            key={countryCode}\n            style={{\n              width: '100%',\n              marginBottom: '20px',\n              maxHeight: '180px',\n            }}\n            src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n            alt={`Flag of ${country.commonName}`}\n          />\n          <GeoJSONMap geojson={country.geojson} center={country.latlng} />\n        </Col>\n      </Row>\n      <Row>\n        <TabsComponentWithState\n          countryCode={countryCode}\n          currentTab={currentTab}\n          onTabChange={tab => goTo(`/country/${countryCode}/${tab}`)}\n          referenceCountry={referenceCountry}\n        />\n      </Row>\n    </div>\n  );\n}\n\nCountryView.propTypes = {\n  currentTab: PropTypes.string,\n  country: CountryType,\n  goTo: PropTypes.func.isRequired,\n  referenceCountry: PropTypes.string,\n};\nCountryView.defaultProps = {\n  currentTab: 'summary',\n  country: null,\n  referenceCountry: 'WORLD',\n};\n\nexport default connect((state, props) => ({\n  currentTab: props.match.params.tab,\n  goTo: url => props.history.push(url),\n  country: countryWithAreasSelector(props.match.params.countryCode, state),\n  referenceCountry: qs.parse(props.location.search.substr(1)).referenceCountry,\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { withState } from 'recompose';\nimport qs from 'qs';\n\nimport { Row, Col, Card } from 'antd';\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport ScrollToTop from '../../components/ScrollToTop';\n\nimport { areaWithCountriesSelector } from '../../store/otherSelectors';\nimport { AreaType } from '../../utils/types';\n\nimport BasicChartContainer from '../CountryView/containers/BasicChartContainer';\nimport TabsComponent from '../CountryView/components/TabsComponent';\n\nconst TabsComponentWithState = withState(\n  'referenceCountryCode',\n  'setReferenceCountry',\n  props => props.referenceCountry,\n)(TabsComponent);\n\nfunction AreaView(props) {\n  const { area, currentTab, goTo, referenceCountry } = props;\n  const latlng = [\n    area.countries.reduce((s, c) => c.latlng[0] + s, 0) / area.countries.length,\n    area.countries.reduce((s, c) => c.latlng[1] + s, 0) / area.countries.length,\n  ];\n\n  if (!area) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"AreaView\">\n      <ScrollToTop areaCode={area.code} />\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <Card title={<h2>{`${area.name}`}</h2>}>\n            {area.code !== 'WORLD' && (\n              <div>\n                {`Members : `}\n                {area.countries.map((country, i) => (\n                  <Link\n                    key={country.alpha2Code}\n                    to={`/country/${country.alpha2Code}`}\n                  >\n                    {`${i > 0 ? ', ' : ''}${country.commonName}`}\n                  </Link>\n                ))}\n              </div>\n            )}\n            <Row style={{ marginTop: '20px' }} gutter={10}>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"POPULATION\"\n                  countryCode={area.code}\n                  color=\"#2c82c9\"\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"GDP_2010_USD\"\n                  countryCode={area.code}\n                  color=\"#f22613\"\n                  perCapita\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <GeoJSONMap geojson={area.geojson} center={latlng} />\n        </Col>\n      </Row>\n      <Row>\n        <TabsComponentWithState\n          countryCode={area.code}\n          currentTab={currentTab}\n          onTabChange={tab => goTo(`/area/${area.code}/${tab}`)}\n          referenceCountry={referenceCountry}\n        />\n      </Row>\n    </div>\n  );\n}\n\nAreaView.propTypes = {\n  area: AreaType.isRequired,\n  currentTab: PropTypes.string,\n  goTo: PropTypes.func.isRequired,\n  referenceCountry: PropTypes.string,\n};\n\nAreaView.defaultProps = {\n  currentTab: 'summary',\n  referenceCountry: 'WORLD',\n};\n\nexport default connect((state, props) => ({\n  currentTab: props.match.params.tab,\n  goTo: url => props.history.push(url),\n  area: areaWithCountriesSelector(props.match.params.areaCode, state),\n  referenceCountry: qs.parse(props.location.search.substr(1)).referenceCountry,\n}))(AreaView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType, AreaType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, areas, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Select a country\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.SubMenu title=\"Areas\">\n        {sortBy(a => a.name, areas).map(area => (\n          <Menu.Item key={area.code}>\n            <Link to={`/area/${area.code}`}>{area.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu.SubMenu>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  areas: PropTypes.arrayOf(AreaType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  Route, // as BaseRoute,\n  Switch,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\nimport AreaView from '../views/AreaView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\nimport {\n  loadAllAreas,\n  areasLoadedSelector,\n  areasSelector,\n} from '../store/areas';\nimport { LocationType } from '../utils/types';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\nconst AreasLoader = buildLoader(loadAllAreas);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    areas: areasSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction scrollToAnchor(location) {\n  const { hash } = location;\n\n  if (hash !== '') {\n    const id = hash.substr(1);\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'nearest',\n      });\n    }\n  }\n}\n\nclass AppLayout extends Component {\n  componentDidMount() {\n    const { location } = this.props;\n    window.onhashchange = () => scrollToAnchor(location);\n  }\n\n  componentDidUpdate() {\n    const { location } = this.props;\n    scrollToAnchor(location);\n  }\n\n  render() {\n    const { isLoaded } = this.props;\n    return (\n      <div className=\"AppLayout\">\n        <CountriesLoader />\n        <StatisticsLoader />\n        <AreasLoader />\n        <Spin size=\"large\" spinning={!isLoaded}>\n          <Layout>\n            <Layout.Header\n              style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n            >\n              <ConnectedHeaderMenu />\n            </Layout.Header>\n            <Layout.Content>\n              {!isLoaded && <div className=\"AppLayout__splash\" />}\n              {isLoaded && (\n                <Switch>\n                  <Route path=\"/home\" exact component={HomeView} />\n                  <Route\n                    path=\"/country/:countryCode/:tab?\"\n                    exact\n                    component={CountryView}\n                  />\n                  <Route\n                    path=\"/area/:areaCode/:tab?\"\n                    exact\n                    component={AreaView}\n                  />\n                  <Route path=\"/about\" exact component={AboutView} />\n                  <Route\n                    component={() => <Redirect to={{ pathname: '/home' }} />}\n                  />\n                </Switch>\n              )}\n            </Layout.Content>\n            <Layout.Footer>Sources: IEA, World Bank</Layout.Footer>\n          </Layout>\n        </Spin>\n      </div>\n    );\n  }\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n  location: LocationType.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded:\n      countriesLoadedSelector(state) &&\n      statisticsLoadedSelector(state) &&\n      areasLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}