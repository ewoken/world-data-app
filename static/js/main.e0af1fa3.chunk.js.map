{"version":3,"sources":["api/countries.js","store/countries.js","utils/index.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","api/areas.js","store/areas.js","store/index.js","utils/types.js","views/HomeView/components/WorldMap.jsx","components/StatisticSources.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","store/otherSelectors.js","components/GeoJSONMap.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","HOC/buildChart.jsx","views/CountryView/components/CustomTooltip.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","views/AreaView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["countryMapValues","country","worldTopo","a","objects","countries","geometries","find","c","id","numericCode","Object","objectSpread","geojson","feature","_callee","_ref","_ref2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","map","p","then","res","json","sent","slicedToArray","abrupt","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","defaultIndicators","coal","oil","gas","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","dependentCountriesSelector","countrySelector","countryCode","fuelConsumedCountrySelector","hasConsumed","fuelProducedOrConsumedCountrySelector","mapObjIndexed","v","k","hasProduced","countriesReducer","arguments","length","undefined","action","coordsToLatLng","coords","_coords","longitude","latitude","L","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","value","Number","isNaN","toPrecision","toLocaleString","tickFormatter","displayUnit","unit","perCapita","concat","base","main","parseMapOfStatistics","mapOfCountryStatistics","defaultCountry","statistics","statisticCode","addPopCountryStatistics","countryCodes","uniq","d","populations","mergeAll","defineProperty","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","statistic","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref4","compiledCountryStatisticsSelector","_ref3","year","sources","objectWithoutProperties","isFinite","computeDerivedValueFromCompiled","countryStatisticsLoadedSelector","countryStatitics","statisticOfAllCountriesLoadedSelector","alpha2Code","_ref5","_ref9","baseMap","mapOfStatistic","_ref6","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","statisticValues","Math","min","apply","toConsumableArray","endingYears","max","computeYearInterval","_computeYearInterval2","startingYear","endingYear","mapOfNamedStatisticValues","compileName","_ref7","allValues","allValuesByYear","groupBy","keys","sort","compiledValue","popCompileName","population","factor","populationFactor","computeValue","omit","compiledStatisticForCountriesAndYear","_ref10","push","yearValue","statisticSourcesSelector","statisticCodes","reduce","statisticSources","code","fetchJSON","url","options","MTOE_UNIT","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","derivedStatistics","name","description","consumption","production","sourceAttribution","category","isIntensive","energy","gdp","co2","geothSolarWindTide","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","countryStatistics","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","initialCountryStatistic","countryStatisticReducer","statisticsReducer","acc","WORLD","indexedCountries","indexBy","cca2","countriesData","computeGeojson","area","countryAlpha3Codes","ccn3","includes","merge","AREAS_LOAD_ACTION","AREAS_RECEIVE_ACTION","receiveAreasAction","areasLoadedSelector","areas","areasSelector","areasReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","CountryType","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","number","latlng","arrayOf","object","MAP_HEIGHT","bool","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","dependentCountries","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","dragging","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","background","backgroundColor","StatisticSources","popover","title","arrowPointAtCenter","content","stat","href","sourceUrl","target","rel","placement","es_button","size","icon","marginRight","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","formatedData","s","statisticByCategory","es_select","width","placeholder","optionFilterProp","showSearch","onChange","stats","OptGroup","label","sortBy","Option","slider","defaultValue","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","e","Button","disabled","components_StatisticSources","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","defaultSortOrder","align","onRow","record","onClick","f","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","countryWithAreasSelector","areasOfCountrySelector","areaWithCountriesSelector","areaCode","areaSelector","CustomGeoJSON","createGeoJSON","prevProps","remove","_this$props","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","GeoJSONMap","TileLayer","attribution","GeoJSONMap_GeoJSON","Loader","load","prevOtherProps","_this$props2","otherProps","equals","buildLoader","loadFunction","StatisticsLoader","defaultSelector","withCountryStatistics","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","worldReference","mapOfCountryStatisticsInput","world","parsedMapOfCountryStatistics","mapOfCountryStatisticsToLoad","countryStatisticsToLoad","mapStateToProps","spin","spinning","defaultHeight","ChartSettings","perCapitaSwitch","stackedSwitch","stacked","setStacked","es_switch","checked","buildChart","_options$perCapitaSwi","_options$stackedSwitc","hocs","hasSettings","withStateHandlers","_ref$defaultPerCapita","defaultPerCapita","_ref$defaultStacked","defaultStacked","WrappedChart","compose","_Component","ChartWrapper","chartRef","React","createRef","buttonRef","inherits","createClass","finalHeight","file","replace","data-html2canvas-ignore","domElement","scale","current","domToImage","toBlob","element","bgcolor","transform","offsetWidth","offsetHeight","blob","saveAs","err","console","theme","assign","CustomTooltip","active","separator","payload","withTotal","displayFilter","totalFilter","filteredPayload","_payload$","_payload$$formatter","formatter","total","sum","totalUnit","_p$formatter","dataKey","defaultProps","EnergyMixChart","fuelConsumed","coalUnit","LineArea","Area","Line","defaultLineAreaProps","dot","activeDot","lineAreaProps","stackId","strokeWidth","some","warn","chartMax","ticks","getNiceTickValues","pop","domain","ResponsiveContainer","ComposedChart","stroke","fill","CartesianGrid","opacity","XAxis","interval","YAxis","component_Tooltip","props2","components_CustomTooltip","Legend","iconType","EnergyMixChartBuilded","EnergyMixChartContainer","primaryMap","primaryReference","electrictyMap","electricityReference","SummaryTab","containers_EnergyMixChartContainer","marginTop","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","dataWithImportAndExport","l","diff","toFixed","export","import","strokeOpacity","BasicChart","LineChart","padding","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","IndependencyTab","fuelProducedOrConsumed","sm","BasicChartContainer","ClimateTab","tabList","tab","IndependencyTabContainer","tabContent","summary","components_SummaryTab","independency","climate","components_ClimateTab","CountryView","currentTab","tabKey","Redirect","to","flag","flagIcon","xs","card","Link","lg","maxHeight","src","toLowerCase","alt","components_GeoJSONMap","activeTabKey","onTabChange","setTab","match","params","AboutView","AreaView_IndependencyTabContainer","AreaView","GitHubLink","HeaderMenu","goTo","menu","mode","selectable","lineHeight","Item","onSelect","SubMenu","components_GitHubLink","CountriesLoader","prop","AreasLoader","_getAreas","getAllAreas","ConnectedHeaderMenu","withRouter","AppLayout_StatisticsLoader","layout","Header","position","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0af1fa3.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\n\nfunction countryMapValues(country, worldTopo) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  return {\n    ...country,\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nasync function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [fetch('/data/countries.json'), fetch('/data/worldTopo.json')].map(p =>\n      p.then(res => res.json()),\n    ),\n  );\n  return countries.map(country => countryMapValues(country, worldTopo));\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop, mapObjIndexed } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nconst defaultIndicators = {\n  // for areas\n  coal: true,\n  oil: true,\n  gas: true,\n  hydro: true,\n  nuclear: true,\n  biofuelsWaste: true,\n  solarWindTideGeoth: true,\n};\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport function fuelConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasConsumed : defaultIndicators;\n}\n\nexport function fuelProducedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasProduced : defaultIndicators;\n}\n\nexport function fuelProducedOrConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country\n    ? mapObjIndexed((v, k) => v || country.hasConsumed[k], country.hasProduced)\n    : defaultIndicators;\n}\n\nexport default countriesReducer;\n","import L from 'leaflet';\nimport { map, uniq, values, mergeAll } from 'ramda';\nimport domToImage from 'dom-to-image';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n\nexport function parseMapOfStatistics(mapOfCountryStatistics, defaultCountry) {\n  return map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n}\n\nexport function addPopCountryStatistics(mapOfCountryStatistics, perCapita) {\n  if (!perCapita) {\n    return mapOfCountryStatistics;\n  }\n\n  const countryCodes = uniq(\n    values(mapOfCountryStatistics).map(d => d.countryCode),\n  );\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...populations,\n    ...mapOfCountryStatistics,\n  };\n}\n\nexport function chartToPngBlob(domElement, scale) {\n  return domToImage.toBlob(domElement, {\n    filter: element => element.className !== 'ChartWrapper__header__right',\n    bgcolor: 'white',\n    style: {\n      transform: `scale(${scale}) translate(${domElement.offsetWidth /\n        2 /\n        scale}px, ${domElement.offsetHeight / 2 / scale}px)`,\n    },\n    height: domElement.offsetHeight * scale,\n    width: domElement.offsetWidth * scale,\n  });\n}\n","import { values, mapObjIndexed, mergeAll, groupBy, map, omit } from 'ramda';\nimport { countriesSelector } from '../countries';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../../utils';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, value: null }\n      : { year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(countryStatitics, state) {\n  return countryStatitics.every(countryStatistic =>\n    countryStatisticLoadedSelector(countryStatistic, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (perCapita && !population)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfCountryStatistics: baseMap, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    baseMap,\n    countryCode,\n  );\n  const mapOfCountryStatistics = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    mapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    mapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .map(year => Number(year))\n    .filter(year => startingYear <= year && year <= endingYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          mapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function statisticSourcesSelector(statisticCodes, state) {\n  return statisticCodes.reduce((statisticSources, statisticCode) => {\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sources = values(statistic.source).map(code =>\n        statisticSelector(code, state),\n      );\n      return statisticSources.concat(sources);\n    }\n\n    return statisticSources.concat([statistic]);\n  }, []);\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","const PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description: '',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description: '',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'FOSSIL_CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: '',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description: '',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      const countryStatistics = sourceCodes.map(sourceCode => ({\n        statisticCode: sourceCode,\n        countryCode,\n      }));\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics(countryStatistics),\n      );\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics(countryStatistics) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      countryStatistics.map(countryStatistic =>\n        dispatch(loadCountryStatistic(countryStatistic)),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import worldTopo from 'world-atlas/world/110m.json';\nimport countriesData from 'world-countries/countries';\nimport { merge } from 'topojson-client';\nimport { indexBy } from 'ramda';\n\nconst indexedCountries = indexBy(c => c.cca2, countriesData);\n\nfunction computeGeojson(area) {\n  const countryAlpha3Codes = area.countryCodes.map(\n    countryCode => indexedCountries[countryCode].ccn3,\n  );\n  const geometries = worldTopo.objects.countries.geometries.filter(c =>\n    countryAlpha3Codes.includes(c.id),\n  );\n  return merge(worldTopo, geometries);\n}\n\nexport default async function getAreas() {\n  const res = await fetch('/data/areas.json');\n  const data = await res.json();\n\n  return data.map(area => ({\n    ...area,\n    geojson: area.countryCodes ? computeGeojson(area) : null,\n  }));\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllAreas from '../api/areas';\n\nexport const AREAS_LOAD_ACTION = 'AREAS_LOAD_ACTION';\nexport const AREAS_RECEIVE_ACTION = 'AREAS_RECEIVE_ACTION';\n\nfunction loadAreasAction() {\n  return { type: AREAS_LOAD_ACTION };\n}\n\nfunction receiveAreasAction({ data, errors }) {\n  return { type: AREAS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllAreas() {\n  return function dispatchLoadAllAreas(dispatch) {\n    dispatch(loadAreasAction());\n    return getAllAreas()\n      .then(data =>\n        dispatch(\n          receiveAreasAction({\n            data: indexBy(prop('code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveAreasAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction areasReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case AREAS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case AREAS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function areasLoadedSelector(state) {\n  return state.areas.loaded;\n}\n\nexport function areasSelector(state) {\n  return values(state.areas.data);\n}\n\nexport function areaSelector(areaCode, state) {\n  return state.areas.data[areaCode];\n}\n\nexport function areasOfCountrySelector(countryCode, state) {\n  return values(state.areas.data).filter(\n    area => area.countryCodes && area.countryCodes.includes(countryCode),\n  );\n}\n\nexport default areasReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\nimport areasReducer from './areas';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n  areas: areasReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n\nexport const AreaType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  countries: PropTypes.arrayOf(CountryType),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n  } = props;\n  const maxValue = Math.max(\n    ...data.filter(d => d.countryCode !== 'WORLD').map(d => d.value),\n  );\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: 'white',\n                  weight: 0.5,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(value)}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          <div>\n            {`${currentStatistic.name} (${displayUnit(\n              currentStatistic.unit,\n              perCapita,\n            )})`}\n          </div>\n          <div className=\"WorldMap__legend__colors\">\n            <div>\n              <div\n                className=\"WorldMap__legend__gradient\"\n                style={{\n                  background: colorGradient,\n                }}\n              />\n              <div className=\"WorldMap__legend__gradientRange\">\n                <div>0</div>\n                <div>{formatNumber(maxValue)}</div>\n              </div>\n            </div>\n            <div>\n              <div\n                className=\"WorldMap__legend__NA__square\"\n                style={{ backgroundColor: NA_COLOR }}\n              />\n              <div>NA</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Popover, Button } from 'antd';\n\nimport { StatisticType } from '../utils/types';\n\nfunction StatisticSources(props) {\n  const { statisticSources } = props;\n  return (\n    <div className=\"StatisticSources\">\n      <Popover\n        title={`Source${statisticSources.length > 1 ? 's' : ''}`}\n        arrowPointAtCenter\n        content={\n          // eslint-disable-next-line react/jsx-wrap-multilines\n          <ul className=\"StatisticSources__list\">\n            {statisticSources.map(stat => (\n              <li key={stat.code}>\n                <a\n                  href={stat.sourceUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {`${stat.name} (${stat.sourceAttribution})`}\n                </a>\n              </li>\n            ))}\n          </ul>\n        }\n        placement=\"bottomRight\"\n      >\n        <Button size=\"small\" icon=\"bars\" style={{ marginRight: '5px' }} />\n      </Popover>\n    </div>\n  );\n}\n\nStatisticSources.propTypes = {\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n};\n\nexport default StatisticSources;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy, groupBy } from 'ramda';\n\nimport StatisticSources from '../../../components/StatisticSources';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    statisticSources,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <div className=\"StatisticExplorer__options\">\n        <Radio.Group\n          style={{ marginBottom: '10px' }}\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button\n            value\n            disabled={\n              currentStatistic.code === 'POPULATION' ||\n              currentStatistic.isIntensive\n            }\n          >\n            Per capita\n          </Radio.Button>\n        </Radio.Group>\n        <StatisticSources statisticSources={statisticSources} />\n      </div>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../store/statistics';\n\nfunction f(statisticCode, perCapita) {\n  // TODO\n  return perCapita ? [statisticCode, 'POPULATION'] : [statisticCode];\n}\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    statisticSources: statisticSourcesSelector(\n      f(statisticCode, perCapita),\n      state,\n    ),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import { countrySelector, countriesSelector } from './countries';\nimport { areaSelector, areasOfCountrySelector } from './areas';\n\nexport function countryWithAreasSelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  const areas = areasOfCountrySelector(countryCode, state);\n\n  return {\n    ...country,\n    areas,\n  };\n}\n\nexport function areaWithCountriesSelector(areaCode, state) {\n  const area = areaSelector(areaCode, state);\n  const countries = area.countryCodes\n    ? area.countryCodes\n        .map(countryCode => countrySelector(countryCode, state))\n        .filter(c => !!c)\n    : countriesSelector(state);\n  return {\n    ...area,\n    countries,\n  };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction GeoJSONMap(props) {\n  const { geojson, center } = props;\n\n  return (\n    <div className=\"GeoJSONMap\">\n      <Map center={center} zoom={2} style={{ height: '300px', zIndex: 0 }}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {geojson && <GeoJSON data={geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nGeoJSONMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  geojson: PropTypes.object.isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default GeoJSONMap;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values, uniq } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n  statisticSourcesSelector,\n} from '../store/statistics';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../utils';\n\nconst StatisticsLoader = buildLoader(({ countryStatistics }) =>\n  loadCountryStatistics(countryStatistics),\n);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction mapStateToProps(state, props) {\n  const {\n    perCapita,\n    worldReference,\n    mapOfCountryStatistics: mapOfCountryStatisticsInput,\n    countryCode,\n  } = props;\n  const mapOfCountryStatistics =\n    perCapita && worldReference\n      ? {\n          ...mapOfCountryStatisticsInput,\n          world: {\n            countryCode: 'WORLD',\n            statisticCode: worldReference,\n          },\n        }\n      : mapOfCountryStatisticsInput;\n\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n  );\n  const mapOfCountryStatisticsToLoad = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const countryStatisticsToLoad = values(mapOfCountryStatisticsToLoad);\n  const statisticCodes = uniq(\n    countryStatisticsToLoad.map(c => c.statisticCode),\n  );\n\n  return {\n    data: compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics,\n        countryCode: props.countryCode,\n        perCapita: props.perCapita,\n      },\n      state,\n    ),\n    statistics: map(\n      ({ statisticCode }) => statisticSelector(statisticCode, state),\n      parsedMapOfCountryStatistics,\n    ),\n    statisticSources: statisticSourcesSelector(statisticCodes, state),\n    isLoaded: countryStatisticsLoadedSelector(countryStatisticsToLoad, state),\n    countryStatisticsToLoad,\n    perCapita: props.perCapita || false,\n  };\n}\n\nfunction withCountryStatistics(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) =>\n      mapStateToProps(state, {\n        mapOfCountryStatistics: mapOfCountryStatisticsSelector(state, props),\n        ...props,\n      }),\n    )(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader countryStatistics={props.countryStatisticsToLoad} />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistics;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { values } from 'ramda';\nimport { withStateHandlers, compose } from 'recompose';\nimport { saveAs } from 'file-saver';\n\nimport { Icon, Popover, Switch, Button } from 'antd';\n\nimport withCountryStatistics from './withCountryStatistics';\nimport { displayUnit, chartToPngBlob } from '../utils';\nimport StatisticSources from '../components/StatisticSources';\n\nconst defaultHeight = 200;\n\nfunction ChartSettings(props) {\n  const {\n    perCapitaSwitch,\n    stackedSwitch,\n    perCapita,\n    stacked,\n    setPerCapita,\n    setStacked,\n  } = props;\n\n  return (\n    <div className=\"ChartSettings\">\n      {perCapitaSwitch && (\n        <div>\n          {'Per capita '}\n          <Switch size=\"small\" checked={perCapita} onChange={setPerCapita} />\n        </div>\n      )}\n      {stackedSwitch && (\n        <div>\n          {'Stacked '}\n          <Switch size=\"small\" checked={stacked} onChange={setStacked} />\n        </div>\n      )}\n    </div>\n  );\n}\nChartSettings.propTypes = {\n  perCapitaSwitch: PropTypes.bool.isRequired,\n  stackedSwitch: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  setStacked: PropTypes.func.isRequired,\n};\n\nfunction buildChart(options = {}) {\n  const {\n    mapOfCountryStatisticsSelector,\n    perCapitaSwitch = false,\n    stackedSwitch = false,\n  } = options;\n  const hocs = [];\n  const hasSettings = perCapitaSwitch || stackedSwitch;\n\n  if (hasSettings) {\n    hocs.push(\n      withStateHandlers(\n        ({ defaultPerCapita = false, defaultStacked = false }) => ({\n          perCapita: defaultPerCapita,\n          stacked: defaultStacked,\n        }),\n        {\n          setPerCapita: () => perCapita => ({ perCapita }),\n          setStacked: () => stacked => ({ stacked }),\n        },\n      ),\n    );\n  }\n  hocs.push(withCountryStatistics(mapOfCountryStatisticsSelector));\n\n  return function buildChartWrapper(WrappedChart) {\n    return compose(...hocs)(\n      class ChartWrapper extends Component {\n        constructor() {\n          super();\n          this.chartRef = React.createRef();\n          this.buttonRef = React.createRef();\n        }\n\n        render() {\n          const {\n            title,\n            statistics,\n            statisticSources,\n            height,\n            perCapita,\n            stacked,\n            setPerCapita,\n            setStacked,\n          } = this.props;\n\n          const statistic = values(statistics)[0];\n          const finalHeight = options.height || height || defaultHeight;\n          const file = title\n            ? title.replace(/ /g, '_')\n            : statistic.name.replace(/ /g, '_');\n\n          return (\n            <div className=\"ChartWrapper\" ref={this.chartRef}>\n              <div className=\"ChartWrapper__header\">\n                <div className=\"ChartWrapper__header__left\">\n                  <span className=\"ChartWrapper__title\">\n                    {title || statistic.name}\n                  </span>\n                  <span className=\"ChartWrapper__title__unit\">\n                    {` (${displayUnit(statistic.unit, perCapita)})`}\n                  </span>\n                </div>\n                <div\n                  className=\"ChartWrapper__header__right\"\n                  data-html2canvas-ignore\n                >\n                  <div style={{ marginRight: '5px' }}>\n                    <Button\n                      icon=\"download\"\n                      size=\"small\"\n                      onClick={() => {\n                        chartToPngBlob(this.chartRef.current, 2)\n                          .then(blob => saveAs(blob, `${file}.png`))\n                          .catch(err => console.err(err));\n                      }}\n                    />\n                  </div>\n                  <StatisticSources statisticSources={statisticSources} />\n                  {hasSettings && (\n                    <div>\n                      <Popover\n                        title=\"Settings\"\n                        arrowPointAtCenter\n                        content={\n                          // eslint-disable-next-line react/jsx-wrap-multilines\n                          <ChartSettings\n                            perCapitaSwitch={perCapitaSwitch}\n                            stackedSwitch={stackedSwitch}\n                            stacked={stacked}\n                            perCapita={perCapita}\n                            setPerCapita={setPerCapita}\n                            setStacked={setStacked}\n                          />\n                        }\n                        placement=\"bottomRight\"\n                      >\n                        <Button size=\"small\">\n                          <Icon type=\"setting\" theme=\"filled\" />\n                        </Button>\n                      </Popover>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <WrappedChart\n                {...this.props}\n                height={finalHeight}\n                perCapita={perCapita}\n                stacked={stacked}\n              />\n              <div className=\"ChartWrapper__footer\" />\n            </div>\n          );\n        }\n      },\n    );\n  };\n}\n\nexport default buildChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label, displayFilter, totalFilter } = props;\n    const filteredPayload = payload.filter(displayFilter);\n\n    if (filteredPayload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload\n      .filter(totalFilter)\n      .reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = filteredPayload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {filteredPayload.map(p => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  withTotal: PropTypes.bool,\n  displayFilter: PropTypes.func,\n  totalFilter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  withTotal: false,\n  displayFilter: i => i,\n  totalFilter: i => i,\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { values } from 'ramda';\n\nimport { getNiceTickValues } from 'recharts-scale';\nimport { tickFormatter, displayUnit } from '../../../utils';\nimport { StatisticType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nfunction EnergyMixChart(props) {\n  const { data, stacked, perCapita, fuelConsumed, statistics } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n  const defaultLineAreaProps = {\n    type: 'monotone',\n    dot: false,\n    activeDot: false,\n    unit,\n  };\n\n  const lineAreaProps = stacked\n    ? { stackId: '1', ...defaultLineAreaProps }\n    : { strokeWidth: 2, ...defaultLineAreaProps };\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  const max = stacked\n    ? Math.max(\n        ...data.map(d =>\n          Object.keys(fuelConsumed).reduce((sum, k) => sum + d[k], 0),\n        ),\n      )\n    : Math.max(\n        ...data.map(d => Math.max(...Object.keys(fuelConsumed).map(k => d[k]))),\n      );\n  const chartMax = max * 1.05;\n  const ticks = getNiceTickValues([0, chartMax], 5, true);\n\n  if (ticks[3] > chartMax) {\n    ticks.pop();\n  }\n  const domain = [0, ticks[ticks.length - 1]];\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart data={data}>\n          {fuelConsumed.coal && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"coal\"\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n            />\n          )}\n          {fuelConsumed.oil && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"oil\"\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n            />\n          )}\n          {fuelConsumed.gas && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"gas\"\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n            />\n          )}\n          {fuelConsumed.nuclear && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"nuclear\"\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n            />\n          )}\n          {fuelConsumed.hydro && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"hydro\"\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n            />\n          )}\n          {fuelConsumed.biofuelsWaste && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"biofuelsWaste\"\n              name=\"Biofuels & Waste\"\n              stroke=\"saddlebrown\"\n              fill=\"saddlebrown\"\n            />\n          )}\n          {fuelConsumed.solarWindTideGeoth && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"solarWindTideGeoth\"\n              name=\"Geothermy, Wind, Solar & Tide\"\n              stroke=\"green\"\n              fill=\"green\"\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis tickFormatter={tickFormatter} ticks={ticks} domain={domain} />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={p => p.name !== 'World'}\n              />\n            )}\n          />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  fuelConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default EnergyMixChart;\n","import { connect } from 'react-redux';\n\nimport buildChart from '../../../HOC/buildChart';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport { fuelConsumedCountrySelector } from '../../../store/countries';\n\nconst EnergyMixChartBuilded = buildChart({\n  perCapitaSwitch: true,\n  stackedSwitch: true,\n})(EnergyMixChart);\n\nconst EnergyMixChartContainer = connect((state, { countryCode }) => ({\n  fuelConsumed: fuelConsumedCountrySelector(countryCode, state),\n}))(EnergyMixChartBuilded);\n\nexport default EnergyMixChartContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nfunction SummaryTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <div>\n        <EnergyMixChartContainer\n          title=\"Primary energy consumption\"\n          countryCode={countryCode}\n          mapOfCountryStatistics={primaryMap}\n          worldReference={primaryReference}\n          defaultPerCapita\n          defaultStacked\n        />\n      </div>\n      <div id=\"test\" style={{ marginTop: '20px' }}>\n        <EnergyMixChartContainer\n          title=\"Electricity generation by fuels\"\n          countryCode={countryCode}\n          mapOfCountryStatistics={electrictyMap}\n          worldReference={electricityReference}\n          defaultPerCapita\n          defaultStacked\n        />\n      </div>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data, height } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={dataWithImportAndExport}>\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                displayFilter={p => p.name !== 'base'}\n              />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const { data, statistics, color, perCapita, height } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"BasicChart\">\n      <ResponsiveContainer height={height}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={statistic.name}\n            unit={` ${unit}`}\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={props2 => <CustomTooltip {...props2} />} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default BasicChart;\n","import buildChart from '../../../HOC/buildChart';\nimport BasicChart from '../components/BasicChart';\n\nexport default buildChart()(BasicChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport buildChart from '../../../HOC/buildChart';\nimport ProdConsoChart from './ProdConsoChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst ProdConsoChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: (state, props) => ({\n    prod: props.prodStatisticCode,\n    conso: props.consoStatisticCode,\n  }),\n})(ProdConsoChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode, fuelProducedOrConsumed } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <h3>Imports/Exports</h3>\n        {fuelProducedOrConsumed.coal && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n              fuel=\"Coal\"\n              title=\"Coal Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.oil && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n              fuel=\"Oil\"\n              title=\"Oil Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.gas && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n              consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n              fuel=\"Gas\"\n              title=\"Gas Trade\"\n            />\n          </Col>\n        )}\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  fuelProducedOrConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nfunction ClimateTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"FOSSIL_CO2_EMISSIONS_MT\"\n            perCapita\n            countryCode={countryCode}\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            perCapita\n            countryCode={countryCode}\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_INTENSITY_OF_ENERGY\"\n            countryCode={countryCode}\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\n\n// import { countrySelector } from '../../store/countries';\nimport { countryWithAreasSelector } from '../../store/otherSelectors';\nimport { CountryType } from '../../utils/types';\n\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport SummaryTab from './components/SummaryTab';\nimport IndependencyTab from './components/IndependencyTab';\nimport ClimateTab from './components/ClimateTab';\n\nimport BasicChartContainer from './containers/BasicChartContainer';\nimport { isMobileOrTablet } from '../../utils';\nimport { fuelProducedOrConsumedCountrySelector } from '../../store/countries';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst tabContent = {\n  summary: countryCode => <SummaryTab countryCode={countryCode} />,\n  independency: countryCode => (\n    <IndependencyTabContainer countryCode={countryCode} />\n  ),\n  climate: countryCode => <ClimateTab countryCode={countryCode} />,\n};\n\nclass CountryView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { country } = this.props;\n    const { currentTab } = this.state;\n\n    if (!country || country.disabled) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const countryCode = country.alpha2Code;\n    const flag = isMobileOrTablet() ? country.flagIcon : '';\n    return (\n      <div className=\"CountryView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n              <div>{`Capital: ${country.capital}`}</div>\n              <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n              <div>\n                {`Member of: `}\n                {country.areas.map((area, i) => (\n                  <Link key={area.code} to={`/area/${area.code}`}>\n                    {`${i > 0 ? ', ' : ''}${area.name}`}\n                  </Link>\n                ))}\n              </div>\n              <Row style={{ marginTop: '20px' }} gutter={20}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"POPULATION\"\n                    countryCode={countryCode}\n                    color=\"#2c82c9\"\n                  />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"GDP_2010_USD\"\n                    countryCode={countryCode}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <img\n              style={{\n                width: '100%',\n                marginBottom: '20px',\n                maxHeight: '180px',\n              }}\n              src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n              alt={`Flag of ${country.commonName}`}\n            />\n            <GeoJSONMap geojson={country.geojson} center={country.latlng} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](countryCode)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nCountryView.propTypes = {\n  country: CountryType,\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countryWithAreasSelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\nimport GeoJSONMap from '../../components/GeoJSONMap';\n\nimport { areaWithCountriesSelector } from '../../store/otherSelectors';\nimport { AreaType } from '../../utils/types';\n\nimport SummaryTab from '../CountryView/components/SummaryTab';\nimport IndependencyTab from '../CountryView/components/IndependencyTab';\nimport ClimateTab from '../CountryView/components/ClimateTab';\nimport BasicChartContainer from '../CountryView/containers/BasicChartContainer';\n\nimport { fuelProducedOrConsumedCountrySelector } from '../../store/countries';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst tabContent = {\n  summary: areaCode => <SummaryTab countryCode={areaCode} />,\n  independency: areaCode => <IndependencyTabContainer countryCode={areaCode} />,\n  climate: areaCode => <ClimateTab countryCode={areaCode} />,\n};\n\nclass AreaView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { area } = this.props;\n    const { currentTab } = this.state;\n    const latlng = [\n      area.countries.reduce((s, c) => c.latlng[0] + s, 0) /\n        area.countries.length,\n      area.countries.reduce((s, c) => c.latlng[1] + s, 0) /\n        area.countries.length,\n    ];\n\n    if (!area) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div className=\"AreaView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${area.name}`}</h2>}>\n              {area.code !== 'WORLD' && (\n                <div>\n                  {`Members : `}\n                  {area.countries.map((country, i) => (\n                    <Link\n                      key={country.alpha2Code}\n                      to={`/country/${country.alpha2Code}`}\n                    >\n                      {`${i > 0 ? ', ' : ''}${country.commonName}`}\n                    </Link>\n                  ))}\n                </div>\n              )}\n              <Row style={{ marginTop: '20px' }} gutter={10}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"POPULATION\"\n                    countryCode={area.code}\n                    color=\"#2c82c9\"\n                  />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"GDP_2010_USD\"\n                    countryCode={area.code}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <GeoJSONMap geojson={area.geojson} center={latlng} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](area.code)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nAreaView.propTypes = {\n  area: AreaType.isRequired,\n};\n\nexport default connect((state, props) => ({\n  area: areaWithCountriesSelector(props.match.params.areaCode, state),\n}))(AreaView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType, AreaType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, areas, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.SubMenu title=\"Areas\">\n        {sortBy(a => a.name, areas).map(area => (\n          <Menu.Item key={area.code}>\n            <Link to={`/area/${area.code}`}>{area.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu.SubMenu>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  areas: PropTypes.arrayOf(AreaType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\nimport AreaView from '../views/AreaView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\nimport {\n  loadAllAreas,\n  areasLoadedSelector,\n  areasSelector,\n} from '../store/areas';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\nconst AreasLoader = buildLoader(loadAllAreas);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    areas: areasSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isLoaded } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      <AreasLoader />\n      <Spin size=\"large\" spinning={!isLoaded}>\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            {!isLoaded && <div className=\"AppLayout__splash\" />}\n            {isLoaded && (\n              <Switch>\n                <Route path=\"/home\" exact component={HomeView} />\n                <Route\n                  path=\"/country/:countryCode\"\n                  exact\n                  component={CountryView}\n                />\n                <Route path=\"/area/:areaCode\" exact component={AreaView} />\n                <Route path=\"/about\" exact component={AboutView} />\n                <Route\n                  component={() => <Redirect to={{ pathname: '/home' }} />}\n                />\n              </Switch>\n            )}\n          </Layout.Content>\n          <Layout.Footer>{' '}</Layout.Footer>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded:\n      countriesLoadedSelector(state) &&\n      statisticsLoadedSelector(state) &&\n      areasLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}