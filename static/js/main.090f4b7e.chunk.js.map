{"version":3,"sources":["api/countries.js","store/countries.js","api/helpers.js","api/statistics.js","store/statistics.js","store/index.js","utils/types.js","utils/index.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","views/CountryView/components/PrimaryEnergyChart.jsx","views/CountryView/containers/PrimaryEnergyChartContainer.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/containers/ProdConsoCharContainer.jsx","views/CountryView/components/CountryMap.jsx","views/CountryView/components/SelfSufficiencyChart.jsx","views/CountryView/containers/SelfSufficiencyContainer.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","loaders/index.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["countryMapValues","country","a","worldTopo","objects","countries","geometries","find","c","id","numericCode","Object","objectSpread","geojson","feature","_callee","res","regenerator_default","wrap","_context","prev","next","fetch","sent","json","abrupt","map","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","receiveCountriesAction","_ref","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","dependentCountriesSelector","countrySelector","countryCode","countriesReducer","arguments","length","undefined","action","fetchJSON","url","options","then","derivedStatistics","code","name","description","unit","main","base","factor","source","consumption","production","startingYear","endingYear","sourceAttribution","isIntensive","compute","Math","floor","energy","gdp","_ref2","pow","co2","_ref3","Number","toFixed","derivedCodes","d","computeDerivedValueFromCompiled","statistic","_ref4","year","sources","objectWithoutProperties","value","isNaN","isFinite","statisticCode","_ref7","sourceNames","statisticValues","mapOfNamedStatisticValues","allValues","allValuesByYear","derivedStatisticValues","stat","keys","Promise","all","sourceName","getStatisticOfCountry","index","_ref5","defineProperty","concat","apply","toConsumableArray","groupBy","sort","mergeAll","includes","getDerivedStatisticOfCountry","_callee2","_ref10","allValuesByYearAndCountry","_context2","getStatisticOfAllCountries","_ref8","countryYearValues","getDerivedStatisticOfAllCountries","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","initialCountryStatistic","countryStatisticReducer","countryStatistic","omit","statisticsLoadedSelector","statistics","allStatisticsSelector","statisticSelector","countryStatisticSelector","countryStatisticLoadedSelector","countryStatisticValuesSelector","_ref6","countryStatisticsLoadedSelector","statisticCodes","every","statisticOfAllCountriesLoadedSelector","alpha2Code","compiledCountryStatisticsSelector","_ref9","_ref13","mapOfCountryStatistics","perCapita","parsedMapOfCountryStatistics","defaultCountry","parsed","countryCodes","uniq","populations","parseMapOfStatistics","mapOfStatistic","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","min","v","endingYears","max","computeYearInterval","_computeYearInterval2","slicedToArray","mapObjIndexed","compileName","_ref11","compiledValue","population","computeValue","compiledStatisticForCountriesAndYear","_ref14","push","yearValue","loadCountryStatistic","_ref15","dispatch","getState","loadCountryStatisticAction","statisticValue","catch","loadCountryStatistics","_ref16","loadStatisticOfCountries","loadStatisticOfCountriesAction","statisticsReducer","reduce","acc","WORLD","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","area","number","latlng","arrayOf","object","bool","coordsToLatLng","coords","_coords","longitude","latitude","L","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","MAP_HEIGHT","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","dependentCountries","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","indexBy","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","dragging","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","toLocaleString","background","backgroundColor","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","formatedData","s","es_select","width","placeholder","optionFilterProp","showSearch","onChange","sortBy","Option","title","slider","defaultValue","onAfterChange","debounce","included","marks","label","margin","left","right","es_radio","Group","marginBottom","buttonStyle","size","e","target","Button","disabled","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","href","defaultSortOrder","align","onRow","record","onClick","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","CustomTooltip","active","payload","payloadWithoutWorld","p","dataKey","worldPrimary","total","sum","lineHeight","defaultProps","PrimaryEnergyChart","stacked","setStacked","dataWithTotal","coal","oil","gas","hydro","nuclear","renewables","hasCoal","some","hasOil","hasGas","hasNuclear","hasHydro","hasRenewables","LineArea","Area","Line","marginRight","ResponsiveContainer","ComposedChart","top","bottom","dot","activeDot","stroke","fill","stackId","CartesianGrid","opacity","XAxis","interval","YAxis","angle","position","component_Tooltip","content","Legend","iconType","mapOfStatistics","worldReferences","ConnectedPrimaryEnergyChart","PrimaryEnergyChartContainer","_this$props","loadStatistics","prevProps","_this$props2","_this$props3","spin","spinning","containers_PrimaryEnergyChartContainer","ProdConsoChart","fuel","prodStatistic","consoStatistic","console","warn","dataWithImportAndExport","l","diff","prod","conso","export","import","strokeOpacity","strokeWidth","offset","props2","ProdConsoChart_CustomTooltip","assign","ConnectedProdConsoChart","prodStatisticCode","consoStatisticCode","ProdConsoChartContainer","CustomGeoJSON","createGeoJSON","remove","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","CountryMap","TileLayer","attribution","CountryMap_GeoJSON","SelfSufficiencyChart","LineChart","ConnectedSelfSufficiencyChart","CountryView","Redirect","to","xs","sm","SelfSufficiencyContainer","src","toLowerCase","alt","components_CountryMap","ProdConsoCharContainer","match","params","AboutView","card","rel","GitHubLink","icon","theme","HeaderMenu","goTo","menu","mode","selectable","Item","Link","onSelect","components_GitHubLink","withLoader","config","loadFunctions","_config$isLoadedSelec","isLoadedSelector","_config$mapStateToPro","mapStateToProps","loadAll","loadFunction","WrappedComponent","ConnectedWrappedComponent","load","_Component","LoaderComponent","inherits","createClass","otherProps","CountriesLoader","prop","StatisticsLoader","ConnectedHeaderMenu","withRouter","layout","Header","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.090f4b7e.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport worldTopo from 'world-atlas/world/110m.json';\n\nfunction countryMapValues(country) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  return {\n    ...country,\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nasync function getAllCountries() {\n  const res = await fetch('/data/countries.json');\n  const countries = await res.json();\n  return countries.map(countryMapValues);\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport default countriesReducer;\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","import { values, groupBy, mergeAll } from 'ramda';\nimport { fetchJSON } from './helpers';\n\nconst PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description: '',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return Math.floor((production / consumption) * 100);\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return Math.floor((energy * 10 ** 5) / gdp) * 10;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description: '',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    isIntensive: true,\n    compute({ energy, co2 }) {\n      return Number((co2 / energy).toFixed(2));\n    },\n  },\n];\nconst derivedCodes = derivedStatistics.map(d => d.code);\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, countryCode, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, countryCode, value: null }\n      : { year, countryCode, value };\n  };\n}\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nasync function getDerivedStatisticOfCountry(statisticCode, countryCode) {\n  const statistic = derivedStatistics.find(stat => stat.code === statisticCode);\n  const sourceNames = Object.keys(statistic.source);\n\n  const statisticValues = await Promise.all(\n    sourceNames.map(sourceName =>\n      // eslint-disable-next-line no-use-before-define\n      getStatisticOfCountry(statistic.source[sourceName], countryCode),\n    ),\n  );\n\n  const mapOfNamedStatisticValues = sourceNames.map((sourceName, index) =>\n    statisticValues[index].map(({ year, value }) => ({\n      year,\n      [sourceName]: value,\n    })),\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const derivedStatisticValues = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(computeDerivedValueFromCompiled(statistic));\n\n  return derivedStatisticValues;\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  if (derivedCodes.includes(statisticCode)) {\n    return getDerivedStatisticOfCountry(statisticCode, countryCode);\n  }\n\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nasync function getDerivedStatisticOfAllCountries(statisticCode) {\n  const statistic = derivedStatistics.find(stat => stat.code === statisticCode);\n  const sourceNames = Object.keys(statistic.source);\n\n  const statisticValues = await Promise.all(\n    sourceNames.map(sourceName =>\n      // eslint-disable-next-line no-use-before-define\n      getStatisticOfAllCountries(statistic.source[sourceName]),\n    ),\n  );\n\n  const mapOfNamedStatisticValues = sourceNames.map((sourceName, index) =>\n    statisticValues[index].map(({ year, value, countryCode }) => ({\n      year,\n      countryCode,\n      [sourceName]: value,\n    })),\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYearAndCountry = groupBy(\n    value => `${value.countryCode}${value.year}`,\n    allValues,\n  );\n\n  const derivedStatisticValues = values(allValuesByYearAndCountry)\n    .map(countryYearValues => mergeAll(countryYearValues))\n    .map(computeDerivedValueFromCompiled(statistic));\n\n  return derivedStatisticValues;\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  if (derivedCodes.includes(statisticCode)) {\n    return getDerivedStatisticOfAllCountries(statisticCode);\n  }\n\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import {\n  values,\n  indexBy,\n  prop,\n  mapObjIndexed,\n  mergeAll,\n  groupBy,\n  map,\n  omit,\n  uniq,\n} from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfCountry,\n  getStatisticOfAllCountries,\n} from '../api/statistics';\nimport { countriesSelector } from './countries';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(\n  { statisticCodes, countryCode },\n  state,\n) {\n  return statisticCodes.every(statisticCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor) {\n  if (!value || (!population && perCapita)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / population : value;\n}\n\nfunction parseMapOfStatistics(\n  mapOfCountryStatistics,\n  defaultCountry,\n  perCapita,\n) {\n  const parsed = map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n  const countryCodes = uniq(values(parsed).map(d => d.countryCode));\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...(perCapita ? populations : {}),\n    ...parsed,\n  };\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfCountryStatistics, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    parsedMapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    parsedMapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .filter(value => startingYear <= value.year && value.year <= endingYear)\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed(\n        (value, compileName) =>\n          computeValue(\n            value,\n            compiledValue[\n              `pop/${parsedMapOfCountryStatistics[compileName].countryCode}`\n            ],\n            perCapita,\n            mapOfStatistic[compileName].unit.factor,\n          ),\n        omit(['year', 'pop'], compiledValue),\n      ),\n    }));\n\n  return compiledStatistics;\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics({ statisticCodes, countryCode }) {\n  return function dispatchloadCountryStatistics(dispatch, getState) {\n    return Promise.all(\n      statisticCodes.map(statisticCode =>\n        loadCountryStatistic({ statisticCode, countryCode })(\n          dispatch,\n          getState,\n        ),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const countries = countriesSelector(getState());\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        getState(),\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n\nexport default statisticsReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n","import L from 'leaflet';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\n// function bindEvent(countries, onCountryClick) {\n//   return function onEachFeature(feature, layer) {\n//     const country = countries.find(c => c.numericCode === feature.id);\n//     layer.on({\n//       click: () => onCountryClick(country),\n//     });\n//   };\n// }\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { coordsToLatLng, isMobileOrTablet } from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value: 'NA' };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value: 0 };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n  } = props;\n  const maxValue = Math.max(...data.map(d => d.value));\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: 'white',\n                  weight: 0.5,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${value.toLocaleString()}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div className=\"WorldMap__legend__gradient\">\n          <div>\n            {`${currentStatistic.name} (${\n              perCapita\n                ? `${currentStatistic.unit.base}/capita`\n                : currentStatistic.unit.main\n            })`}\n          </div>\n          <div\n            className=\"WorldMap__legend__gradientColor\"\n            style={{\n              background: colorGradient,\n            }}\n          />\n          <div className=\"WorldMap__legend__gradientRange\">\n            <div>0</div>\n            <div>{maxValue.toLocaleString()}</div>\n          </div>\n        </div>\n        <div>\n          <div>{' '}</div>\n          <div\n            className=\"WorldMap__legend__NA__square\"\n            style={{ backgroundColor: NA_COLOR }}\n          />\n          <div>NA</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy } from 'ramda';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet } from '../../../utils';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet}\n        onChange={value => setStatistic(value)}\n      >\n        {sortBy(s => s.name, statistics).map(statistic => (\n          <Select.Option key={statistic.code} title={statistic.name}>\n            {`${statistic.name}`}\n          </Select.Option>\n        ))}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <Radio.Group\n        style={{ marginBottom: '10px' }}\n        buttonStyle=\"solid\"\n        size=\"small\"\n        value={perCapita}\n        onChange={e => setPerCapita(e.target.value)}\n      >\n        <Radio.Button value={false}>Absolute</Radio.Button>\n        <Radio.Button\n          value\n          disabled={\n            currentStatistic.code === 'POPULATION' ||\n            currentStatistic.isIntensive\n          }\n        >\n          Per capita\n        </Radio.Button>\n      </Radio.Group>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: perCapita\n              ? `${currentStatistic.unit.base}/capita`\n              : currentStatistic.unit.main,\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: value => value.toLocaleString(),\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n} from '../../store/statistics';\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    isLoaded: statisticOfAllCountriesLoadedSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { Radio } from 'antd';\n\nfunction CustomTooltip(props) {\n  const { active, payload } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label } = props;\n    const { unit } = payload[0];\n    const payloadWithoutWorld = payload\n      ? payload.filter(p => p.dataKey !== 'worldPrimary')\n      : [];\n    const worldPrimary = payload\n      ? payload.find(p => p.dataKey === 'worldPrimary')\n      : [];\n    const total = payloadWithoutWorld.reduce(\n      (sum, { value }) => sum + value,\n      0,\n    );\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payloadWithoutWorld.map(p => (\n            <div key={p.dataKey} style={{ lineHeight: '22px', color: p.color }}>\n              {`${p.name} : ${p.value.toLocaleString()} ${p.unit}`}\n            </div>\n          ))}\n          <hr size={1} />\n          <div key=\"total\" style={{ lineHeight: '22px', color: 'black' }}>\n            {`Total : ${Number(total.toFixed(2)).toLocaleString()} ${unit}`}\n          </div>\n          {worldPrimary && (\n            <div\n              key=\"primaryWorld\"\n              style={{ lineHeight: '22px', color: 'red' }}\n            >\n              {`World : ${Number(\n                worldPrimary.value.toFixed(2),\n              ).toLocaleString()} ${unit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n};\n\nfunction PrimaryEnergyChart(props) {\n  const { data, stacked, setStacked, perCapita, setPerCapita } = props;\n  const unit = perCapita ? ' toe/capita' : ' Mtoe';\n\n  const dataWithTotal = data.map(v => ({\n    ...v,\n    total: Number(\n      (v.coal + v.oil + v.gas + v.hydro + v.nuclear + v.renewables).toFixed(2),\n    ),\n  }));\n\n  // TODO\n  const hasCoal = data.some(v => v.coal >= 0.01);\n  const hasOil = data.some(v => v.oil >= 0.01);\n  const hasGas = data.some(v => v.gas >= 0.01);\n  const hasNuclear = data.some(v => v.nuclear >= 0.01);\n  const hasHydro = data.some(v => v.hydro >= 0.01);\n  const hasRenewables = data.some(v => v.renewables >= 0.01);\n\n  const LineArea = stacked ? Area : Line;\n\n  return (\n    <div className=\"PrimaryEnergyChart\">\n      <h3 className=\"PrimaryEnergyChart__title\">Primary Energy Consumption</h3>\n      <div>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={stacked}\n          onChange={e => setStacked(e.target.value)}\n          style={{ marginRight: '10px' }}\n        >\n          <Radio.Button value>Stacked</Radio.Button>\n          <Radio.Button value={false}>Split</Radio.Button>\n        </Radio.Group>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button value>Per capita</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ResponsiveContainer height={300} width=\"100%\">\n        <ComposedChart\n          data={dataWithTotal}\n          margin={{ top: 10, right: 0, bottom: 10, left: 0 }}\n        >\n          {hasCoal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasOil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasGas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasNuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasHydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasRenewables && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"renewables\"\n              dot={false}\n              activeDot={false}\n              name=\"Other renewables\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"worldPrimary\"\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            label={{\n              value: unit,\n              angle: -90,\n              position: 'insideLeft',\n            }}\n          />\n          <Tooltip content={CustomTooltip} />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nPrimaryEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      renewables: PropTypes.number,\n      worldPrimary: PropTypes.number,\n      total: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default PrimaryEnergyChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport PrimaryEnergyChart from '../components/PrimaryEnergyChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst WORLD = 'WORLD';\n\nconst mapOfStatistics = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_CONSUMPTION_MTOE',\n  nuclear: 'NUCLEAR_CONSUMPTION_MTOE',\n  renewables: 'NON_HYDRO_RENEWABLES_CONSUMPTION_MTOE',\n};\nconst statisticCodes = values(mapOfStatistics).concat(['POPULATION']);\nconst worldReferences = ['POPULATION', 'PRIMARY_ENERGY_CONSUMPTION_MTOE'];\n\nconst ConnectedPrimaryEnergyChart = connect(\n  (state, { countryCode, perCapita }) => ({\n    data: compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: {\n          ...mapOfStatistics,\n          worldPrimary: {\n            statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n            countryCode: WORLD,\n          },\n        },\n        countryCode,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(PrimaryEnergyChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stacked: true,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { countryCode, loadStatistics } = this.props;\n\n    loadStatistics({ statisticCodes, countryCode });\n    loadStatistics({\n      statisticCodes: worldReferences,\n      countryCode: WORLD,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistics } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  setStacked(stacked) {\n    this.setState({ stacked });\n  }\n\n  setPerCapita(perCapita) {\n    this.setState({ perCapita });\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n    const { stacked, perCapita } = this.state;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedPrimaryEnergyChart\n          countryCode={countryCode}\n          setStacked={value => this.setStacked(value)}\n          setPerCapita={value => this.setPerCapita(value)}\n          stacked={stacked}\n          perCapita={perCapita}\n        />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded:\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes,\n          countryCode: props.countryCode,\n        },\n        state,\n      ) &&\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes: worldReferences,\n          countryCode: WORLD,\n        },\n        state,\n      ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(PrimaryEnergyChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\n\nfunction CustomTooltip(props) {\n  const { active } = props;\n\n  if (active) {\n    const { payload, label, filter } = props;\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.filter(filter).map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${p.value.toLocaleString()} ${p.unit}`}\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n  filter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  filter: i => i,\n};\n\nfunction ProdConsoChart(props) {\n  const {\n    fuel,\n    prodStatistic,\n    consoStatistic,\n    // reservesStatistic,\n    data,\n  } = props;\n\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <h3>{fuel}</h3>\n      <ResponsiveContainer height={250} width=\"100%\">\n        <ComposedChart\n          data={dataWithImportAndExport}\n          margin={{ top: 30, right: 20, bottom: 5, left: 20 }}\n        >\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={1}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={1}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#880000\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          {/* {reservesStatisticCode && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reserves\"\n              dot={false}\n              unit={reservesStatistic.unit}\n              stroke=\"blue\"\n              strokeWidth={3}\n              strokeOpacity={0.7}\n              name={reservesStatistic.name}\n              yAxisId=\"1\"\n            />\n          )} */}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis\n            label={{ value: unit, position: 'insideTopLeft', offset: -20 }}\n          />\n          {/* {reservesStatisticCode && (\n            <YAxis\n              orientation=\"right\"\n              label={{\n                value: reservesStatistic.unit,\n                position: 'insideTopRight',\n                offset: -20,\n              }}\n              yAxisId=\"1\"\n            />\n          )} */}\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip {...props2} filter={p => p.name !== 'base'} />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  prodStatistic: StatisticType.isRequired,\n  consoStatistic: StatisticType.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Spin } from 'antd';\n\nimport ProdConsoChart from '../components/ProdConsoChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst ConnectedProdConsoChart = connect((state, props) => ({\n  prodStatistic: statisticSelector(props.prodStatisticCode, state),\n  consoStatistic: statisticSelector(props.consoStatisticCode, state),\n  data: compiledCountryStatisticsSelector(\n    {\n      mapOfCountryStatistics: {\n        prod: props.prodStatisticCode,\n        conso: props.consoStatisticCode,\n      },\n      countryCode: props.countryCode,\n    },\n    state,\n  ),\n}))(ProdConsoChart);\n\nclass ProdConsoChartContainer extends Component {\n  componentDidMount() {\n    const {\n      consoStatisticCode,\n      prodStatisticCode,\n      countryCode,\n      loadStatistics,\n    } = this.props;\n    const statisticCodes = [consoStatisticCode, prodStatisticCode];\n    loadStatistics({ statisticCodes, countryCode });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      countryCode,\n      loadStatistics,\n      consoStatisticCode,\n      prodStatisticCode,\n    } = this.props;\n    const statisticCodes = [consoStatisticCode, prodStatisticCode];\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  render() {\n    const {\n      isLoaded,\n      fuel,\n      consoStatisticCode,\n      prodStatisticCode,\n      countryCode,\n    } = this.props;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedProdConsoChart\n          fuel={fuel}\n          consoStatisticCode={consoStatisticCode}\n          prodStatisticCode={prodStatisticCode}\n          countryCode={countryCode}\n        />\n      </Spin>\n    );\n  }\n}\n\nProdConsoChartContainer.propTypes = {\n  prodStatisticCode: PropTypes.string.isRequired,\n  consoStatisticCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  fuel: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded: countryStatisticsLoadedSelector(\n      {\n        statisticCodes: [props.prodStatisticCode, props.consoStatisticCode],\n        countryCode: props.countryCode,\n      },\n      state,\n    ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(ProdConsoChartContainer);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../../../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction CountryMap(props) {\n  const { country } = props;\n\n  return (\n    <div className=\"CountryMap\">\n      <Map\n        center={country.latlng}\n        zoom={2}\n        style={{ height: '300px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {country.geojson && <GeoJSON data={country.geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nCountryMap.propTypes = {\n  country: PropTypes.shape({\n    latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n    area: PropTypes.number.isRequired,\n    geojson: PropTypes.object.isRequired,\n  }).isRequired,\n};\n\nexport default CountryMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Line, XAxis, Tooltip, LineChart } from 'recharts';\n\nfunction SelfSufficiencyChart(props) {\n  const { data } = props;\n  return (\n    <div className=\"SelfSufficiency\">\n      Self-sufficiency\n      <LineChart\n        data={data}\n        height={100}\n        width={300}\n        margin={{ left: 20, top: 10 }}\n      >\n        <Line\n          dataKey=\"value\"\n          width={3}\n          stroke=\"red\"\n          name=\"Self-sufficiency\"\n          dot={false}\n          unit=\" %\"\n        />\n        <XAxis dataKey=\"year\" interval={9} />\n        <Tooltip />\n      </LineChart>\n    </div>\n  );\n}\n\nSelfSufficiencyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n};\n\nexport default SelfSufficiencyChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Spin } from 'antd';\n\nimport SelfSufficiencyChart from '../components/SelfSufficiencyChart';\n\nimport {\n  loadCountryStatistic,\n  countryStatisticLoadedSelector,\n  countryStatisticValuesSelector,\n} from '../../../store/statistics';\n\nconst ENERGY_SELF_SUFFICIENCY = 'ENERGY_SELF_SUFFICIENCY';\n\nconst ConnectedSelfSufficiencyChart = connect((state, { countryCode }) => ({\n  data: countryStatisticValuesSelector(\n    {\n      statisticCode: ENERGY_SELF_SUFFICIENCY,\n      countryCode,\n    },\n    state,\n  ),\n}))(SelfSufficiencyChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  componentDidMount() {\n    const { countryCode, loadStatistic } = this.props;\n\n    loadStatistic({ statisticCode: ENERGY_SELF_SUFFICIENCY, countryCode });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistic } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistic({ statisticCode: ENERGY_SELF_SUFFICIENCY, countryCode });\n    }\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedSelfSufficiencyChart countryCode={countryCode} />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded: countryStatisticLoadedSelector(\n      {\n        statisticCode: ENERGY_SELF_SUFFICIENCY,\n        countryCode: props.countryCode,\n      },\n      state,\n    ),\n  }),\n  { loadStatistic: loadCountryStatistic },\n)(PrimaryEnergyChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Redirect } from 'react-router-dom';\n\nimport { Row, Col } from 'antd';\n\nimport { countrySelector } from '../../store/countries';\n\nimport PrimaryEnergyChartContainer from './containers/PrimaryEnergyChartContainer';\nimport ProdConsoChartContainer from './containers/ProdConsoCharContainer';\nimport CountryMap from './components/CountryMap';\nimport SelfSufficiencyContainer from './containers/SelfSufficiencyContainer';\n\nfunction CountryView(props) {\n  const { country } = props;\n\n  if (!country || country.disabled) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const countryCode = country.alpha2Code;\n  return (\n    <div className=\"CountryView\">\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <h2>{country.commonName}</h2>\n          <div>{`Capital: ${country.capital}`}</div>\n          <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n          <SelfSufficiencyContainer countryCode={countryCode} />\n          <div>\n            <PrimaryEnergyChartContainer countryCode={country.alpha2Code} />\n          </div>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <img\n            style={{ height: '100px' }}\n            src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n            alt={`Flag of ${country.commonName}`}\n          />\n          <CountryMap country={country} />\n        </Col>\n      </Row>\n      <Row>\n        <h3>Imports/Exports</h3>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n            fuel=\"Coal\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n            fuel=\"Oil\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n            consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n            fuel=\"Gas\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nCountryView.propTypes = {\n  country: PropTypes.shape({\n    alpha2Code: PropTypes.string.isRequired,\n    commonName: PropTypes.string.isRequired,\n  }),\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countrySelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { loadAllCountries } from '../store/countries';\nimport {\n  loadAllStatistics,\n  loadStatisticOfCountries,\n} from '../store/statistics';\n\nexport function withLoader(config) {\n  const {\n    loadFunctions,\n    isLoadedSelector = () => false,\n    mapStateToProps = () => {},\n  } = config;\n\n  const loadAll = props => (dispatch, getState) =>\n    loadFunctions.map(loadFunction => loadFunction(props)(dispatch, getState));\n\n  return function wrapLoaderHOC(WrappedComponent) {\n    const ConnectedWrappedComponent = WrappedComponent\n      ? connect(mapStateToProps)(WrappedComponent)\n      : () => null;\n\n    return connect(\n      (state, props) => ({\n        isLoaded: isLoadedSelector(props, state),\n      }),\n      { load: loadAll },\n    )(\n      class LoaderComponent extends Component {\n        static propTypes = {\n          load: PropTypes.func.isRequired,\n          isLoaded: PropTypes.bool.isRequired,\n        };\n\n        componentDidMount() {\n          const { load, isLoaded, ...args } = this.props;\n          load(args);\n        }\n\n        render() {\n          const { isLoaded, load, ...otherProps } = this.props;\n\n          if (!isLoaded) {\n            return null;\n          }\n          return <ConnectedWrappedComponent {...otherProps} />;\n        }\n      },\n    );\n  };\n}\n\nexport const CountriesLoader = withLoader({\n  loadFunctions: [loadAllCountries],\n})();\n\nexport const StatisticsLoader = withLoader({\n  loadFunctions: [loadAllStatistics],\n})();\n\nexport const StatisticAllCountriesLoader = withLoader({\n  loadFunctions: [\n    ({ statisticCode }) => loadStatisticOfCountries(statisticCode),\n  ],\n})();\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport { CountriesLoader, StatisticsLoader } from '../loaders';\n\nimport { countriesLoadedSelector, countriesSelector } from '../store/countries';\nimport { statisticsLoadedSelector } from '../store/statistics';\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isLoaded } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      <Spin size=\"large\" spinning={!isLoaded}>\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            {!isLoaded && <div className=\"AppLayout__splash\" />}\n            {isLoaded && (\n              <Switch>\n                <Route path=\"/home\" exact component={HomeView} />\n                <Route\n                  path=\"/country/:countryCode\"\n                  exact\n                  component={CountryView}\n                />\n                <Route path=\"/about\" exact component={AboutView} />\n                <Route\n                  component={() => <Redirect to={{ pathname: '/home' }} />}\n                />\n              </Switch>\n            )}\n          </Layout.Content>\n          <Layout.Footer>Sources: IEA, EIA, World Data Bank</Layout.Footer>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded: countriesLoadedSelector(state) && statisticsLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}