{"version":3,"sources":["api/countries.js","store/countries.js","utils/index.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","api/areas.js","store/areas.js","store/index.js","utils/types.js","views/HomeView/components/WorldMap.jsx","components/StatisticDetails.jsx","components/ShareChartComponent.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","store/otherSelectors.js","components/GeoJSONMap.jsx","HOC/components/ChartSettings.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","HOC/buildChart.jsx","views/CountryView/components/CustomTooltip.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/GDPByEnergyChart.jsx","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","views/AreaView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["countryMapValues","country","worldTopo","a","objects","countries","geometries","find","c","id","numericCode","Object","objectSpread","geojson","feature","_callee","_ref","_ref2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","map","p","then","res","json","sent","slicedToArray","abrupt","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","defaultIndicators","coal","oil","gas","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","dependentCountriesSelector","countrySelector","countryCode","fuelConsumedCountrySelector","hasConsumed","fuelProducedOrConsumedCountrySelector","mapObjIndexed","v","k","hasProduced","countriesReducer","arguments","length","undefined","action","coordsToLatLng","coords","_coords","longitude","latitude","L","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","value","Number","isNaN","toPrecision","toLocaleString","tickFormatter","displayUnit","unit","perCapita","concat","base","main","parseMapOfStatistics","mapOfCountryStatistics","defaultCountry","statistics","statisticCode","addPopCountryStatistics","countryCodes","uniq","d","populations","mergeAll","defineProperty","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","statistic","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref4","compiledCountryStatisticsSelector","_ref3","year","sources","objectWithoutProperties","isFinite","computeDerivedValueFromCompiled","statisticOfAllCountriesLoadedSelector","alpha2Code","fn","hashFunction","args","JSON","stringify","cacheSize","cache","_len","Array","_key","hash","apply","hashes","keys","memoize","_ref5","_ref9","baseMap","mapOfStatistic","_ref6","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","statisticValues","Math","min","toConsumableArray","endingYears","max","computeYearInterval","_computeYearInterval2","startingYear","endingYear","mapOfNamedStatisticValues","compileName","_ref7","allValues","allValuesByYear","groupBy","sort","compiledValue","popCompileName","population","factor","populationFactor","computeValue","omit","compiledStatisticForCountriesAndYear","_ref10","push","yearValue","statisticSourcesSelector","statisticCodes","reduce","statisticSources","code","fetchJSON","url","options","MTOE_UNIT","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","derivedStatistics","name","description","consumption","production","sourceAttribution","category","isIntensive","energy","gdp","co2","scale","geothSolarWindTide","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","countryStatistics","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","initialCountryStatistic","countryStatisticReducer","statisticsReducer","acc","WORLD","indexedCountries","indexBy","cca2","countriesData","computeGeojson","area","countryAlpha3Codes","ccn3","includes","merge","AREAS_LOAD_ACTION","AREAS_RECEIVE_ACTION","receiveAreasAction","areasLoadedSelector","areas","areasSelector","areasReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","actionSanitizer","store","createStore","CountryType","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","number","latlng","arrayOf","object","MAP_HEIGHT","bool","sourceUrl","sourceDescriptionUrl","NA_COLOR","BORDER_COLOR","LEGEND_COLORS_COUNT","LEGEND_WIDTH","interpolator","d3Colors","WorldMap","props","dependentCountries","currentStatistic","currentYear","dataWithourWorld","maxValue","colorValueMap","scaleString","minValue","valueMap","scaleLinear","scaleLog","domain","color","computeColorMap","react_default","createElement","className","Map","zoom","minZoom","center","style","height","zIndex","dragging","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","range","i","width","background","backgroundColor","defaultProps","StatisticDetails","descriptionLines","split","popover","title","arrowPointAtCenter","overlayStyle","maxWidth","content","stat","href","target","rel","placement","es_button","size","icon","marginRight","ShareChartComponent","dropdown","overlay","menu","onClick","chartRef","filename","domElement","offsetHeight","padding","offsetWidth","classFiltered","domToImage","toBlob","element","bgcolor","transform","chartToPngBlob","current","blob","saveAs","err","console","compileNames","headers","dataLines","dataItem","csv","l","join","Blob","Item","theme","WITH_SCALE_SETTINGS","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","mapRef","setScale","formatedData","s","statisticByCategory","es_select","placeholder","optionFilterProp","showSearch","onChange","stats","OptGroup","label","sortBy","Option","slider","defaultValue","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","e","Button","disabled","components_ShareChartComponent","replace","components_StatisticDetails","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","defaultSortOrder","align","onRow","record","f","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","React","createRef","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","countryWithAreasSelector","areasOfCountrySelector","areaWithCountriesSelector","areaCode","areaSelector","CustomGeoJSON","createGeoJSON","prevProps","remove","_this$props","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","GeoJSONMap","TileLayer","attribution","GeoJSONMap_GeoJSON","ChartSettings","perCapitaSwitch","stackedSwitch","stacked","setStacked","es_switch","checked","Loader","load","prevOtherProps","_this$props2","otherProps","equals","buildLoader","loadFunction","StatisticsLoader","defaultSelector","mapStateToProps","worldReference","mapOfCountryStatisticsInput","world","parsedMapOfCountryStatistics","mapOfCountryStatisticsToLoad","countryStatisticsToLoad","countryStatitics","countryStatisticsLoadedSelector","withCountryStatistics","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","spin","spinning","defaultHeight","buildChart","_options$perCapitaSwi","_options$stackedSwitc","hocs","hasSettings","withStateHandlers","_ref$defaultPerCapita","defaultPerCapita","_ref$defaultStacked","defaultStacked","WrappedChart","compose","_Component","ChartWrapper","buttonRef","inherits","createClass","_this$props$perCapita","_this$props$stacked","statisticList","finalHeight","descriptionStatistic","finalDescription","data-html2canvas-ignore","components_ChartSettings","assign","CustomTooltip","active","separator","payload","withTotal","displayFilter","totalFilter","units","filteredPayload","_payload$","_payload$$formatter","formatter","total","sum","totalUnit","_p$formatter","dataKey","EnergyMixChart","fuelConsumed","coalUnit","LineArea","Area","Line","defaultLineAreaProps","dot","activeDot","lineAreaProps","stackId","strokeWidth","some","warn","chartMax","ticks","getNiceTickValues","pop","ResponsiveContainer","ComposedChart","stroke","fill","CartesianGrid","opacity","XAxis","interval","YAxis","component_Tooltip","props2","components_CustomTooltip","Legend","iconType","EnergyMixChartBuilded","EnergyMixChartContainer","primaryMap","primaryReference","electrictyMap","electricityReference","SummaryTab","containers_EnergyMixChartContainer","marginTop","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","dataWithImportAndExport","diff","toFixed","export","import","strokeOpacity","GDPByEnergyChart","ScatterChart","bottom","Scatter","cx","cy","r","line","dataMin","floor","dataMax","ceil","position","top","0","1","BasicChart","withComparison","LineChart","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","GDPByEnergyChartContainer","IndependencyTab","fuelProducedOrConsumed","sm","BasicChartContainer","ClimateTab","tabList","tab","IndependencyTabContainer","tabContent","summary","components_SummaryTab","independency","climate","components_ClimateTab","CountryView","currentTab","tabKey","Redirect","to","flag","flagIcon","xs","card","Link","lg","maxHeight","src","toLowerCase","alt","components_GeoJSONMap","activeTabKey","onTabChange","setTab","match","params","AboutView","AreaView_IndependencyTabContainer","AreaView","GitHubLink","HeaderMenu","goTo","mode","selectable","lineHeight","onSelect","SubMenu","components_GitHubLink","CountriesLoader","prop","AreasLoader","_getAreas","getAllAreas","ConnectedHeaderMenu","withRouter","AppLayout_StatisticsLoader","layout","Header","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe1c85cc.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\n\nfunction countryMapValues(country, worldTopo) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  return {\n    ...country,\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nasync function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [fetch('/data/countries.json'), fetch('/data/worldTopo.json')].map(p =>\n      p.then(res => res.json()),\n    ),\n  );\n  return countries.map(country => countryMapValues(country, worldTopo));\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop, mapObjIndexed } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nconst defaultIndicators = {\n  // for areas\n  coal: true,\n  oil: true,\n  gas: true,\n  hydro: true,\n  nuclear: true,\n  biofuelsWaste: true,\n  solarWindTideGeoth: true,\n};\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport function fuelConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasConsumed : defaultIndicators;\n}\n\nexport function fuelProducedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasProduced : defaultIndicators;\n}\n\nexport function fuelProducedOrConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country\n    ? mapObjIndexed((v, k) => v || country.hasConsumed[k], country.hasProduced)\n    : defaultIndicators;\n}\n\nexport default countriesReducer;\n","import L from 'leaflet';\nimport { map, uniq, values, mergeAll } from 'ramda';\nimport domToImage from 'dom-to-image';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n\nexport function parseMapOfStatistics(mapOfCountryStatistics, defaultCountry) {\n  return map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n}\n\nexport function addPopCountryStatistics(mapOfCountryStatistics, perCapita) {\n  if (!perCapita) {\n    return mapOfCountryStatistics;\n  }\n\n  const countryCodes = uniq(\n    values(mapOfCountryStatistics).map(d => d.countryCode),\n  );\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...populations,\n    ...mapOfCountryStatistics,\n  };\n}\n\nexport function chartToPngBlob(domElement, scale) {\n  const padding = 10;\n  const height = domElement.offsetHeight + padding * 2;\n  const width = domElement.offsetWidth + padding * 2;\n  const classFiltered = [\n    'ChartWrapper__header__right',\n    'leaflet-control-container',\n  ];\n  return domToImage.toBlob(domElement, {\n    filter: element => !classFiltered.includes(element.className),\n    bgcolor: 'white',\n    style: {\n      padding: `${padding}px`,\n      transform: `scale(${scale}) translate(${width / 2 / scale}px, ${height /\n        2 /\n        scale}px)`,\n    },\n    height: height * scale,\n    width: width * scale,\n  });\n}\n\nexport function memoize(\n  fn,\n  hashFunction = args => JSON.stringify(args),\n  cacheSize = 30,\n) {\n  const cache = {};\n  return function memoizedFun(...args) {\n    const hash = hashFunction(args);\n    if (cache[hash]) {\n      return cache[hash];\n    }\n    const res = fn(...args);\n\n    cache[hash] = res;\n\n    const hashes = Object.keys(cache);\n    if (hashes.length > cacheSize) {\n      delete cache[hashes[0]];\n    }\n\n    return res;\n  };\n}\n","import { values, mapObjIndexed, mergeAll, groupBy, map, omit } from 'ramda';\nimport { countriesSelector } from '../countries';\nimport {\n  parseMapOfStatistics,\n  addPopCountryStatistics,\n  memoize,\n} from '../../utils';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, value: null }\n      : { year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(countryStatitics, state) {\n  return countryStatitics.every(countryStatistic =>\n    countryStatisticLoadedSelector(countryStatistic, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (perCapita && !population)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction compiledCountryStatisticsSelectorFn(\n  { mapOfCountryStatistics: baseMap, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    baseMap,\n    countryCode,\n  );\n  const mapOfCountryStatistics = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    mapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    mapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .map(year => Number(year))\n    .filter(year => startingYear <= year && year <= endingYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          mapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\nexport const compiledCountryStatisticsSelector = memoize(\n  compiledCountryStatisticsSelectorFn,\n  args => JSON.stringify(args[0]),\n);\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function statisticSourcesSelector(statisticCodes, state) {\n  return statisticCodes.reduce((statisticSources, statisticCode) => {\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sources = values(statistic.source).map(code =>\n        statisticSelector(code, state),\n      );\n      return statisticSources.concat(sources);\n    }\n\n    return statisticSources.concat([statistic]);\n  }, []);\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","const PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description:\n      'This indicator made up by dividing primary energy consumption by primary energy production, gives an indication on the level of self-sufficiency (or dependency) of a country.',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description:\n      'Measures the mass of CO2 by unit of energy that is emitted by the country.',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'FOSSIL_CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    scale: 'linear',\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: 'Includes hydroelectricity, solar, wind and tide productions.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description:\n      'Includes renewables and nuclear productions. Excludes biofuels at the moment.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      const countryStatistics = sourceCodes.map(sourceCode => ({\n        statisticCode: sourceCode,\n        countryCode,\n      }));\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics(countryStatistics),\n      );\n      return;\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics(countryStatistics) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      countryStatistics.map(countryStatistic =>\n        dispatch(loadCountryStatistic(countryStatistic)),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import worldTopo from 'world-atlas/world/110m.json';\nimport countriesData from 'world-countries/countries';\nimport { merge } from 'topojson-client';\nimport { indexBy } from 'ramda';\n\nconst indexedCountries = indexBy(c => c.cca2, countriesData);\n\nfunction computeGeojson(area) {\n  const countryAlpha3Codes = area.countryCodes.map(\n    countryCode => indexedCountries[countryCode].ccn3,\n  );\n  const geometries = worldTopo.objects.countries.geometries.filter(c =>\n    countryAlpha3Codes.includes(c.id),\n  );\n  return merge(worldTopo, geometries);\n}\n\nexport default async function getAreas() {\n  const res = await fetch('/data/areas.json');\n  const data = await res.json();\n\n  return data.map(area => ({\n    ...area,\n    geojson: area.countryCodes ? computeGeojson(area) : null,\n  }));\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllAreas from '../api/areas';\n\nexport const AREAS_LOAD_ACTION = 'AREAS_LOAD_ACTION';\nexport const AREAS_RECEIVE_ACTION = 'AREAS_RECEIVE_ACTION';\n\nfunction loadAreasAction() {\n  return { type: AREAS_LOAD_ACTION };\n}\n\nfunction receiveAreasAction({ data, errors }) {\n  return { type: AREAS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllAreas() {\n  return function dispatchLoadAllAreas(dispatch) {\n    dispatch(loadAreasAction());\n    return getAllAreas()\n      .then(data =>\n        dispatch(\n          receiveAreasAction({\n            data: indexBy(prop('code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveAreasAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction areasReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case AREAS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case AREAS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function areasLoadedSelector(state) {\n  return state.areas.loaded;\n}\n\nexport function areasSelector(state) {\n  return values(state.areas.data);\n}\n\nexport function areaSelector(areaCode, state) {\n  return state.areas.data[areaCode];\n}\n\nexport function areasOfCountrySelector(countryCode, state) {\n  return values(state.areas.data).filter(\n    area => area.countryCodes && area.countryCodes.includes(countryCode),\n  );\n}\n\nexport default areasReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer, {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n} from './statistics';\nimport areasReducer from './areas';\n\nfunction actionSanitizer(action) {\n  if (\n    (action.type === COUNTRY_STATISTIC_RECEIVE_ACTION ||\n      action.type === STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION) &&\n    action.data\n  ) {\n    return { ...action, data: 'DATA' };\n  }\n  return action;\n}\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n  areas: areasReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  actionSanitizer,\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n  category: PropTypes.string.isRequired,\n  sourceAttribution: PropTypes.string,\n  sourceUrl: PropTypes.string,\n  sourceDescriptionUrl: PropTypes.string,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n\nexport const AreaType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  countries: PropTypes.arrayOf(CountryType),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map, range } from 'ramda';\nimport { scaleLog, scaleLinear } from 'd3-scale';\nimport * as d3Colors from 'd3-scale-chromatic';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst NA_COLOR = '#888';\nconst BORDER_COLOR = 'black';\nconst LEGEND_COLORS_COUNT = 4;\nconst LEGEND_WIDTH = 300; // px\nconst COLORS_SCHEME = 'YlGnBu';\n\nconst interpolator = d3Colors[`interpolate${COLORS_SCHEME}`];\n\nfunction computeColorMap(data, scaleString) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n  const scaleType = scaleString === 'linear' ? scaleLinear() : scaleLog();\n  const scale = scaleType.domain([minValue, maxValue]);\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: interpolator(0), value };\n    }\n    return {\n      color: interpolator(scale(value)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    scale,\n  } = props;\n  const dataWithourWorld = data.filter(d => d.countryCode !== 'WORLD');\n  const maxValue = Math.max(...dataWithourWorld.map(d => d.value));\n  const colorValueMap = computeColorMap(\n    dataWithourWorld,\n    currentStatistic.scale || scale,\n  );\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={2}\n        minZoom={2}\n        center={[20, 10]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: BORDER_COLOR,\n                  weight: 0.5,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(value)}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          <div>\n            {`${currentStatistic.name} (${displayUnit(\n              currentStatistic.unit,\n              perCapita,\n            )})`}\n          </div>\n          <div className=\"WorldMap__legend__colors\">\n            <div>\n              <div className=\"WorldMap__legend__gradient\">\n                {range(0, LEGEND_COLORS_COUNT).map(i => (\n                  <div\n                    key={i}\n                    className=\"WorldMap__legend__gradient__item\"\n                    style={{\n                      width: LEGEND_WIDTH / LEGEND_COLORS_COUNT,\n                      background: `linear-gradient(to right, ${interpolator(\n                        i / LEGEND_COLORS_COUNT,\n                      )}, ${interpolator((i + 1) / LEGEND_COLORS_COUNT)}`,\n                    }}\n                  />\n                ))}\n              </div>\n              <div className=\"WorldMap__legend__gradientRange\">\n                <div>0</div>\n                <div>{formatNumber(maxValue)}</div>\n              </div>\n            </div>\n            <div>\n              <div\n                className=\"WorldMap__legend__NA__square\"\n                style={{ backgroundColor: NA_COLOR }}\n              />\n              <div>NA</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  scale: PropTypes.string,\n};\n\nWorldMap.defaultProps = {\n  scale: null,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Popover, Button } from 'antd';\n\nimport { StatisticType } from '../utils/types';\n\nfunction StatisticDetails(props) {\n  const { statisticSources, description } = props;\n  const descriptionLines = description && description.split('\\n');\n\n  return (\n    <div className=\"StatisticDetails\">\n      <Popover\n        title=\"Details\"\n        arrowPointAtCenter\n        overlayStyle={{ maxWidth: '300px' }}\n        content={\n          // eslint-disable-next-line react/jsx-wrap-multilines\n          <div>\n            {description && (\n              <div>\n                <strong>Description : </strong>\n                {`${descriptionLines[0]}`}\n              </div>\n            )}\n            <div>\n              <strong>\n                {`Source${statisticSources.length > 1 ? 's' : ''}`}\n              </strong>\n              <ul className=\"StatisticDetails__sources\">\n                {statisticSources.map(stat => (\n                  <li key={stat.code}>\n                    <a\n                      href={stat.sourceUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {`${stat.name} (${stat.sourceAttribution})`}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        }\n        placement=\"bottomRight\"\n      >\n        <Button\n          size=\"small\"\n          icon=\"info-circle\"\n          style={{ marginRight: '5px' }}\n        />\n      </Popover>\n    </div>\n  );\n}\n\nStatisticDetails.propTypes = {\n  description: PropTypes.string,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n};\n\nStatisticDetails.defaultProps = {\n  description: null,\n};\n\nexport default StatisticDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { saveAs } from 'file-saver';\n\nimport { Button, Dropdown, Menu, Icon } from 'antd';\nimport { chartToPngBlob } from '../utils';\n\nfunction ShareChartComponent(props) {\n  return (\n    <div className=\"ShareChartComponent\">\n      <Dropdown\n        overlay={\n          // eslint-disable-next-line\n          <Menu\n            onClick={({ key }) => {\n              if (key === 'png') {\n                const { chartRef, filename } = props;\n                chartToPngBlob(chartRef.current, 2)\n                  .then(blob => saveAs(blob, `${filename}.png`))\n                  .catch(err => console.err(err));\n              } else if (key === 'csv') {\n                const { data, statistics, filename } = props;\n                const compileNames = Object.keys(statistics);\n                const headers = compileNames.map(\n                  compileName => statistics[compileName].code,\n                );\n                const dataLines = data.map(dataItem =>\n                  compileNames.map(compileName => dataItem[compileName]),\n                );\n                const lines = [headers, ...dataLines];\n                const csv = lines.map(l => l.join(',')).join('\\n');\n                const blob = new Blob([csv], {\n                  type: 'text/plain;charset=utf-8',\n                });\n                saveAs(blob, `${filename}.csv`);\n              }\n            }}\n          >\n            <Menu.Item key=\"png\">\n              <Icon type=\"picture\" theme=\"filled\" />\n              .png\n            </Menu.Item>\n            <Menu.Item key=\"csv\">\n              <Icon type=\"file-text\" theme=\"filled\" />\n              .csv\n            </Menu.Item>\n          </Menu>\n        }\n      >\n        <Button size=\"small\" icon=\"share-alt\" style={{ marginRight: '5px' }} />\n      </Dropdown>\n    </div>\n  );\n}\n\nShareChartComponent.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  chartRef: PropTypes.any.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  statistics: PropTypes.object.isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  filename: PropTypes.string.isRequired,\n};\n\nexport default ShareChartComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio, Popover, Button, Icon } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy, groupBy } from 'ramda';\n\nimport StatisticDetails from '../../../components/StatisticDetails';\nimport ShareChartComponent from '../../../components/ShareChartComponent';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nconst WITH_SCALE_SETTINGS = false;\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    statisticSources,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n    mapRef,\n    scale,\n    setScale,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  if (currentStatistic.isIntensive && perCapita) {\n    setPerCapita(false);\n  }\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <div className=\"StatisticExplorer__options\">\n        <Radio.Group\n          style={{ marginBottom: '10px' }}\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button\n            value\n            disabled={\n              currentStatistic.code === 'POPULATION' ||\n              currentStatistic.isIntensive\n            }\n          >\n            Per capita\n          </Radio.Button>\n        </Radio.Group>\n        <div className=\"StatisticExplorer__options__right\">\n          <ShareChartComponent\n            filename={currentStatistic.name.replace(/ /g, '_')}\n            chartRef={mapRef}\n            statistics={{\n              countryCode: { code: 'COUNTRY_CODE' },\n              value: currentStatistic,\n            }}\n            data={data}\n          />\n          <StatisticDetails\n            statisticSources={statisticSources}\n            description={currentStatistic.description}\n          />\n          {WITH_SCALE_SETTINGS && (\n            <Popover\n              title=\"Settings\"\n              arrowPointAtCenter\n              content={\n                // eslint-disable-next-line react/jsx-wrap-multilines\n                <div>\n                  {'Scale '}\n                  <Radio.Group\n                    buttonStyle=\"solid\"\n                    size=\"small\"\n                    value={scale}\n                    onChange={e => setScale(e.target.value)}\n                  >\n                    <Radio.Button value=\"log\">Log</Radio.Button>\n                    <Radio.Button value=\"linear\">Linear</Radio.Button>\n                  </Radio.Group>\n                </div>\n              }\n              placement=\"bottomRight\"\n            >\n              <Button size=\"small\">\n                <Icon type=\"setting\" theme=\"filled\" />\n              </Button>\n            </Popover>\n          )}\n        </div>\n      </div>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  mapRef: PropTypes.object.isRequired,\n  scale: PropTypes.string,\n  setScale: PropTypes.func.isRequired,\n};\n\nStatisticExplorer.defaultProps = {\n  scale: null,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../store/statistics';\n\nfunction f(statisticCode, perCapita) {\n  // TODO\n  return perCapita ? [statisticCode, 'POPULATION'] : [statisticCode];\n}\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    statisticSources: statisticSourcesSelector(\n      f(statisticCode, perCapita),\n      state,\n    ),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n      scale: null,\n    };\n    this.mapRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  setScale(scale) {\n    this.setState({ scale });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita, scale } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <div ref={this.mapRef}>\n              <ConnectedWorldMap\n                statisticCode={statisticCode}\n                currentYear={currentYear}\n                perCapita={perCapita}\n                scale={scale}\n              />\n            </div>\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n              mapRef={this.mapRef}\n              scale={scale}\n              setScale={value => this.setScale(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import { countrySelector, countriesSelector } from './countries';\nimport { areaSelector, areasOfCountrySelector } from './areas';\n\nexport function countryWithAreasSelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  const areas = areasOfCountrySelector(countryCode, state);\n\n  return {\n    ...country,\n    areas,\n  };\n}\n\nexport function areaWithCountriesSelector(areaCode, state) {\n  const area = areaSelector(areaCode, state);\n  const countries = area.countryCodes\n    ? area.countryCodes\n        .map(countryCode => countrySelector(countryCode, state))\n        .filter(c => !!c)\n    : countriesSelector(state);\n  return {\n    ...area,\n    countries,\n  };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction GeoJSONMap(props) {\n  const { geojson, center } = props;\n\n  return (\n    <div className=\"GeoJSONMap\">\n      <Map center={center} zoom={2} style={{ height: '300px', zIndex: 0 }}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {geojson && <GeoJSON data={geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nGeoJSONMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  geojson: PropTypes.object.isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default GeoJSONMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Switch } from 'antd';\n\nfunction ChartSettings(props) {\n  const {\n    perCapitaSwitch,\n    stackedSwitch,\n    perCapita,\n    stacked,\n    setPerCapita,\n    setStacked,\n  } = props;\n\n  return (\n    <div className=\"ChartSettings\">\n      {perCapitaSwitch && (\n        <div>\n          {'Per capita '}\n          <Switch size=\"small\" checked={perCapita} onChange={setPerCapita} />\n        </div>\n      )}\n      {stackedSwitch && (\n        <div>\n          {'Stacked '}\n          <Switch size=\"small\" checked={stacked} onChange={setStacked} />\n        </div>\n      )}\n    </div>\n  );\n}\nChartSettings.propTypes = {\n  perCapitaSwitch: PropTypes.bool.isRequired,\n  stackedSwitch: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  setStacked: PropTypes.func.isRequired,\n};\n\nexport default ChartSettings;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values, uniq } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n  statisticSourcesSelector,\n} from '../store/statistics';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../utils';\nimport { countrySelector } from '../store/countries';\n\nconst StatisticsLoader = buildLoader(({ countryStatistics }) =>\n  loadCountryStatistics(countryStatistics),\n);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction mapStateToProps(state, props) {\n  const {\n    perCapita,\n    worldReference,\n    statisticCode,\n    mapOfCountryStatistics: mapOfCountryStatisticsInput,\n    countryCode,\n  } = props;\n  const isIntensive =\n    statisticCode && statisticSelector(statisticCode, state).isIntensive;\n  const mapOfCountryStatistics =\n    (perCapita || isIntensive) && worldReference\n      ? {\n          ...mapOfCountryStatisticsInput,\n          world: {\n            countryCode: 'WORLD',\n            statisticCode:\n              typeof worldReference === 'boolean'\n                ? statisticCode\n                : worldReference,\n          },\n        }\n      : mapOfCountryStatisticsInput;\n\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n  );\n  const mapOfCountryStatisticsToLoad = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const countryStatisticsToLoad = values(mapOfCountryStatisticsToLoad);\n  const statisticCodes = uniq(\n    countryStatisticsToLoad.map(c => c.statisticCode),\n  );\n  const isLoaded = countryStatisticsLoadedSelector(\n    countryStatisticsToLoad,\n    state,\n  );\n  const data = isLoaded\n    ? compiledCountryStatisticsSelector(\n        {\n          mapOfCountryStatistics,\n          countryCode: props.countryCode,\n          perCapita: props.perCapita,\n        },\n        state,\n      )\n    : [];\n\n  return {\n    data,\n    statistics: map(\n      ({ statisticCode: code }) => statisticSelector(code, state),\n      parsedMapOfCountryStatistics,\n    ),\n    statisticSources: statisticSourcesSelector(statisticCodes, state),\n    isLoaded,\n    countryStatisticsToLoad,\n    country: countrySelector(countryCode, state),\n  };\n}\n\nfunction withCountryStatistics(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) =>\n      mapStateToProps(state, {\n        mapOfCountryStatistics: mapOfCountryStatisticsSelector(state, props),\n        ...props,\n      }),\n    )(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader countryStatistics={props.countryStatisticsToLoad} />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistics;\n","import React, { Component } from 'react';\nimport { values } from 'ramda';\nimport { withStateHandlers, compose } from 'recompose';\n\nimport { Icon, Popover, Button } from 'antd';\n\nimport { displayUnit } from '../utils';\nimport StatisticDetails from '../components/StatisticDetails';\n\nimport ChartSettings from './components/ChartSettings';\nimport ShareChartComponent from '../components/ShareChartComponent';\nimport withCountryStatistics from './withCountryStatistics';\n\nconst defaultHeight = 200;\n\nfunction buildChart(options = {}) {\n  const {\n    mapOfCountryStatisticsSelector,\n    perCapitaSwitch = false,\n    stackedSwitch = false,\n  } = options;\n  const hocs = [];\n  const hasSettings = perCapitaSwitch || stackedSwitch;\n\n  if (hasSettings) {\n    hocs.push(\n      withStateHandlers(\n        ({ defaultPerCapita = false, defaultStacked = false }) => ({\n          perCapita: defaultPerCapita,\n          stacked: defaultStacked,\n        }),\n        {\n          setPerCapita: () => perCapita => ({ perCapita }),\n          setStacked: () => stacked => ({ stacked }),\n        },\n      ),\n    );\n  }\n  hocs.push(withCountryStatistics(mapOfCountryStatisticsSelector));\n\n  return function buildChartWrapper(WrappedChart) {\n    return compose(...hocs)(\n      class ChartWrapper extends Component {\n        constructor() {\n          super();\n          this.chartRef = React.createRef();\n          this.buttonRef = React.createRef();\n        }\n\n        render() {\n          const {\n            title,\n            description,\n            statistics,\n            statisticSources,\n            height,\n            perCapita = false,\n            stacked = false,\n            setPerCapita,\n            setStacked,\n            data,\n          } = this.props;\n          const statisticList = values(statistics);\n          const statistic = statisticList[0];\n          const finalHeight = options.height || height || defaultHeight;\n          const filename = title\n            ? title.replace(/ /g, '_')\n            : statistic.name.replace(/ /g, '_');\n\n          const descriptionStatistic = statisticList.find(\n            s => s.code === description,\n          );\n          const finalDescription =\n            statisticList.length < 2\n              ? description || statistic.description\n              : (descriptionStatistic && descriptionStatistic.description) ||\n                description;\n\n          return (\n            <div className=\"ChartWrapper\" ref={this.chartRef}>\n              <div className=\"ChartWrapper__header\">\n                <div className=\"ChartWrapper__header__left\">\n                  <span className=\"ChartWrapper__title\">\n                    {title || statistic.name}\n                  </span>\n                  <span className=\"ChartWrapper__title__unit\">\n                    {` (${displayUnit(statistic.unit, perCapita)})`}\n                  </span>\n                </div>\n                <div\n                  className=\"ChartWrapper__header__right\"\n                  data-html2canvas-ignore\n                >\n                  <ShareChartComponent\n                    filename={filename}\n                    chartRef={this.chartRef}\n                    statistics={{ year: { code: 'YEAR' }, ...statistics }}\n                    data={data}\n                  />\n                  <StatisticDetails\n                    statisticSources={statisticSources}\n                    description={finalDescription}\n                  />\n                  {hasSettings && (\n                    <div>\n                      <Popover\n                        title=\"Settings\"\n                        arrowPointAtCenter\n                        content={\n                          // eslint-disable-next-line react/jsx-wrap-multilines\n                          <ChartSettings\n                            perCapitaSwitch={perCapitaSwitch}\n                            stackedSwitch={stackedSwitch}\n                            stacked={stacked}\n                            perCapita={perCapita}\n                            setPerCapita={setPerCapita}\n                            setStacked={setStacked}\n                          />\n                        }\n                        placement=\"bottomRight\"\n                      >\n                        <Button size=\"small\">\n                          <Icon type=\"setting\" theme=\"filled\" />\n                        </Button>\n                      </Popover>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <WrappedChart\n                {...this.props}\n                height={finalHeight}\n                perCapita={perCapita}\n                stacked={stacked}\n              />\n              <div className=\"ChartWrapper__footer\" />\n            </div>\n          );\n        }\n      },\n    );\n  };\n}\n\nexport default buildChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label, displayFilter, totalFilter, units } = props;\n    const filteredPayload = payload.filter(displayFilter);\n\n    if (filteredPayload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload\n      .filter(totalFilter)\n      .reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = filteredPayload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {filteredPayload.map((p, i) => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey || name} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit || units[i]}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  withTotal: PropTypes.bool,\n  displayFilter: PropTypes.func,\n  totalFilter: PropTypes.func,\n  units: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  withTotal: false,\n  displayFilter: i => i,\n  totalFilter: i => i,\n  units: {},\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { values } from 'ramda';\n\nimport { getNiceTickValues } from 'recharts-scale';\nimport { tickFormatter, displayUnit } from '../../../utils';\nimport { StatisticType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nfunction EnergyMixChart(props) {\n  const { data, stacked, perCapita, fuelConsumed, statistics } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n  const defaultLineAreaProps = {\n    type: 'monotone',\n    dot: false,\n    activeDot: false,\n    unit,\n  };\n  const lineAreaProps = stacked\n    ? { stackId: '1', ...defaultLineAreaProps }\n    : { strokeWidth: 2, ...defaultLineAreaProps };\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  const max = Math.max(\n    ...(stacked\n      ? data.map(d =>\n          Object.keys(fuelConsumed).reduce((sum, k) => sum + d[k], 0),\n        )\n      : data.map(d => Math.max(...Object.keys(fuelConsumed).map(k => d[k])))),\n    ...(perCapita ? data.map(d => d.world) : []),\n  );\n\n  const chartMax = max * 1.05;\n  const ticks = getNiceTickValues([0, chartMax], 5, true);\n\n  if (ticks[3] > chartMax) {\n    ticks.pop();\n  }\n  const domain = [0, ticks[ticks.length - 1]];\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart data={data}>\n          {fuelConsumed.coal && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"coal\"\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n            />\n          )}\n          {fuelConsumed.oil && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"oil\"\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n            />\n          )}\n          {fuelConsumed.gas && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"gas\"\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n            />\n          )}\n          {fuelConsumed.nuclear && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"nuclear\"\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n            />\n          )}\n          {fuelConsumed.hydro && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"hydro\"\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n            />\n          )}\n          {fuelConsumed.biofuelsWaste && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"biofuelsWaste\"\n              name=\"Biofuels & Waste\"\n              stroke=\"saddlebrown\"\n              fill=\"saddlebrown\"\n            />\n          )}\n          {fuelConsumed.solarWindTideGeoth && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"solarWindTideGeoth\"\n              name=\"Geothermy, Wind, Solar & Tide\"\n              stroke=\"green\"\n              fill=\"green\"\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis tickFormatter={tickFormatter} ticks={ticks} domain={domain} />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={p => p.name !== 'World'}\n              />\n            )}\n          />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  fuelConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default EnergyMixChart;\n","import { connect } from 'react-redux';\n\nimport buildChart from '../../../HOC/buildChart';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport { fuelConsumedCountrySelector } from '../../../store/countries';\n\nconst EnergyMixChartBuilded = buildChart({\n  perCapitaSwitch: true,\n  stackedSwitch: true,\n})(EnergyMixChart);\n\nconst EnergyMixChartContainer = connect((state, { countryCode }) => ({\n  fuelConsumed: fuelConsumedCountrySelector(countryCode, state),\n}))(EnergyMixChartBuilded);\n\nexport default EnergyMixChartContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nfunction SummaryTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <div>\n        <EnergyMixChartContainer\n          title=\"Primary energy consumption\"\n          description=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n          countryCode={countryCode}\n          mapOfCountryStatistics={primaryMap}\n          worldReference={primaryReference}\n          defaultPerCapita\n          defaultStacked\n        />\n      </div>\n      <div id=\"test\" style={{ marginTop: '20px' }}>\n        <EnergyMixChartContainer\n          title=\"Electricity generation by fuels\"\n          description=\"ELECTRICITY_GENERATION_TWH\"\n          countryCode={countryCode}\n          mapOfCountryStatistics={electrictyMap}\n          worldReference={electricityReference}\n          defaultPerCapita\n          defaultStacked\n        />\n      </div>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data, height } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={dataWithImportAndExport}>\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                displayFilter={p => p.name !== 'base'}\n              />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\n\nfunction GDPByEnergyChart(props) {\n  const { data, color, statistics } = props;\n  // const statistic = statistics.value;\n  // const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"GDPByEnergyChart\">\n      <ResponsiveContainer height={300}>\n        <ScatterChart data={data} margin={{ bottom: 50 }}>\n          <Scatter\n            fill={color}\n            shape={props2 => (\n              <circle cx={props2.cx} cy={props2.cy} r={3} fill={color} />\n            )}\n            line\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"energy\"\n            name={statistics.energy.name}\n            type=\"number\"\n            domain={[\n              dataMin => Math.floor(0.95 * dataMin),\n              dataMax => Math.ceil(1.05 * dataMax),\n            ]}\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.energy.name} (${\n                statistics.energy.unit.main\n              })`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"gdp\"\n            name={statistics.gdp.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.year\n                }\n                units={{\n                  '0': statistics.energy.unit.main,\n                  '1': statistics.gdp.unit.main,\n                }}\n              />\n            )}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nGDPByEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      gdp: PropTypes.number,\n      energy: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    gdp: StatisticType,\n    energy: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  color: PropTypes.string,\n};\n\nGDPByEnergyChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default GDPByEnergyChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  Legend,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const {\n    data,\n    statistics,\n    color,\n    perCapita,\n    height,\n    worldReference,\n    country,\n  } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n  const withComparison = worldReference && (perCapita || statistic.isIntensive);\n\n  return (\n    <div className=\"BasicChart\">\n      <ResponsiveContainer height={height}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={country.commonName}\n            unit={` ${unit}`}\n          />\n          {withComparison && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              stroke=\"red\"\n              strokeWidth={3}\n              dot={false}\n              name=\"World\"\n              unit={` ${unit}`}\n            />\n          )}\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={props2 => <CustomTooltip {...props2} />} />\n          {withComparison && <Legend iconType=\"circle\" />}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n  worldReference: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n    .isRequired,\n  country: CountryType.isRequired,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default BasicChart;\n","import buildChart from '../../../HOC/buildChart';\nimport BasicChart from '../components/BasicChart';\n\nexport default buildChart()(BasicChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport buildChart from '../../../HOC/buildChart';\nimport ProdConsoChart from './ProdConsoChart';\nimport GDPByEnergyChart from './GDPByEnergyChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst ProdConsoChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: (state, props) => ({\n    prod: props.prodStatisticCode,\n    conso: props.consoStatisticCode,\n  }),\n})(ProdConsoChart);\n\nconst GDPByEnergyChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    gdp: 'GDP_2010_USD',\n    energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n  },\n})(GDPByEnergyChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode, fuelProducedOrConsumed } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <h3>Imports/Exports</h3>\n        {fuelProducedOrConsumed.coal && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n              fuel=\"Coal\"\n              title=\"Coal Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.oil && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n              fuel=\"Oil\"\n              title=\"Oil Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.gas && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n              consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n              fuel=\"Gas\"\n              title=\"Gas Trade\"\n            />\n          </Col>\n        )}\n      </Row>\n      <Row>\n        <h3>Energy/GDP coupling</h3>\n        <Col md={16} sm={24}>\n          <GDPByEnergyChartContainer\n            countryCode={countryCode}\n            title=\"GDP according to primary energy\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  fuelProducedOrConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nfunction ClimateTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"FOSSIL_CO2_EMISSIONS_MT\"\n            perCapita\n            countryCode={countryCode}\n            worldReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            perCapita\n            countryCode={countryCode}\n            worldReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_INTENSITY_OF_ENERGY\"\n            countryCode={countryCode}\n            worldReference\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\n\n// import { countrySelector } from '../../store/countries';\nimport { countryWithAreasSelector } from '../../store/otherSelectors';\nimport { CountryType } from '../../utils/types';\n\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport SummaryTab from './components/SummaryTab';\nimport IndependencyTab from './components/IndependencyTab';\nimport ClimateTab from './components/ClimateTab';\n\nimport BasicChartContainer from './containers/BasicChartContainer';\nimport { isMobileOrTablet } from '../../utils';\nimport { fuelProducedOrConsumedCountrySelector } from '../../store/countries';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst tabContent = {\n  summary: countryCode => <SummaryTab countryCode={countryCode} />,\n  independency: countryCode => (\n    <IndependencyTabContainer countryCode={countryCode} />\n  ),\n  climate: countryCode => <ClimateTab countryCode={countryCode} />,\n};\n\nclass CountryView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'climate' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { country } = this.props;\n    const { currentTab } = this.state;\n\n    if (!country || country.disabled) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const countryCode = country.alpha2Code;\n    const flag = isMobileOrTablet() ? country.flagIcon : '';\n    return (\n      <div className=\"CountryView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n              <div>{`Capital: ${country.capital}`}</div>\n              <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n              <div>\n                {`Member of: `}\n                {country.areas.map((area, i) => (\n                  <Link key={area.code} to={`/area/${area.code}`}>\n                    {`${i > 0 ? ', ' : ''}${area.name}`}\n                  </Link>\n                ))}\n              </div>\n              <Row style={{ marginTop: '20px' }} gutter={20}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"POPULATION\"\n                    countryCode={countryCode}\n                    color=\"#2c82c9\"\n                  />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"GDP_2010_USD\"\n                    countryCode={countryCode}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <img\n              style={{\n                width: '100%',\n                marginBottom: '20px',\n                maxHeight: '180px',\n              }}\n              src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n              alt={`Flag of ${country.commonName}`}\n            />\n            <GeoJSONMap geojson={country.geojson} center={country.latlng} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](countryCode)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nCountryView.propTypes = {\n  country: CountryType,\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countryWithAreasSelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\nimport GeoJSONMap from '../../components/GeoJSONMap';\n\nimport { areaWithCountriesSelector } from '../../store/otherSelectors';\nimport { AreaType } from '../../utils/types';\n\nimport SummaryTab from '../CountryView/components/SummaryTab';\nimport IndependencyTab from '../CountryView/components/IndependencyTab';\nimport ClimateTab from '../CountryView/components/ClimateTab';\nimport BasicChartContainer from '../CountryView/containers/BasicChartContainer';\n\nimport { fuelProducedOrConsumedCountrySelector } from '../../store/countries';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst tabContent = {\n  summary: areaCode => <SummaryTab countryCode={areaCode} />,\n  independency: areaCode => <IndependencyTabContainer countryCode={areaCode} />,\n  climate: areaCode => <ClimateTab countryCode={areaCode} />,\n};\n\nclass AreaView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { area } = this.props;\n    const { currentTab } = this.state;\n    const latlng = [\n      area.countries.reduce((s, c) => c.latlng[0] + s, 0) /\n        area.countries.length,\n      area.countries.reduce((s, c) => c.latlng[1] + s, 0) /\n        area.countries.length,\n    ];\n\n    if (!area) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div className=\"AreaView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${area.name}`}</h2>}>\n              {area.code !== 'WORLD' && (\n                <div>\n                  {`Members : `}\n                  {area.countries.map((country, i) => (\n                    <Link\n                      key={country.alpha2Code}\n                      to={`/country/${country.alpha2Code}`}\n                    >\n                      {`${i > 0 ? ', ' : ''}${country.commonName}`}\n                    </Link>\n                  ))}\n                </div>\n              )}\n              <Row style={{ marginTop: '20px' }} gutter={10}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"POPULATION\"\n                    countryCode={area.code}\n                    color=\"#2c82c9\"\n                  />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"GDP_2010_USD\"\n                    countryCode={area.code}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <GeoJSONMap geojson={area.geojson} center={latlng} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](area.code)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nAreaView.propTypes = {\n  area: AreaType.isRequired,\n};\n\nexport default connect((state, props) => ({\n  area: areaWithCountriesSelector(props.match.params.areaCode, state),\n}))(AreaView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType, AreaType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, areas, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.SubMenu title=\"Areas\">\n        {sortBy(a => a.name, areas).map(area => (\n          <Menu.Item key={area.code}>\n            <Link to={`/area/${area.code}`}>{area.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu.SubMenu>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  areas: PropTypes.arrayOf(AreaType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\nimport AreaView from '../views/AreaView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\nimport {\n  loadAllAreas,\n  areasLoadedSelector,\n  areasSelector,\n} from '../store/areas';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\nconst AreasLoader = buildLoader(loadAllAreas);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    areas: areasSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isLoaded } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      <AreasLoader />\n      <Spin size=\"large\" spinning={!isLoaded}>\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            {!isLoaded && <div className=\"AppLayout__splash\" />}\n            {isLoaded && (\n              <Switch>\n                <Route path=\"/home\" exact component={HomeView} />\n                <Route\n                  path=\"/country/:countryCode\"\n                  exact\n                  component={CountryView}\n                />\n                <Route path=\"/area/:areaCode\" exact component={AreaView} />\n                <Route path=\"/about\" exact component={AboutView} />\n                <Route\n                  component={() => <Redirect to={{ pathname: '/home' }} />}\n                />\n              </Switch>\n            )}\n          </Layout.Content>\n          <Layout.Footer>{' '}</Layout.Footer>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded:\n      countriesLoadedSelector(state) &&\n      statisticsLoadedSelector(state) &&\n      areasLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}