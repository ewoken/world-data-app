{"version":3,"sources":["api/countries.js","store/countries.js","api/helpers.js","api/statistics.js","store/statistics.js","store/index.js","utils/types.js","utils/index.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","views/CountryView/components/CountryMap.jsx","views/CountryView/components/CustomTooltip.jsx","views/CountryView/components/PrimaryEnergyChart.jsx","views/CountryView/containers/PrimaryEnergyChartContainer.jsx","views/CountryView/components/ElectricityMixChart.jsx","views/CountryView/containers/ElectricityMixChartContainer.jsx","views/CountryView/components/SummaryTab.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.js","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["countryMapValues","country","a","worldTopo","objects","countries","geometries","find","c","id","numericCode","Object","objectSpread","geojson","feature","_callee","res","regenerator_default","wrap","_context","prev","next","fetch","sent","json","abrupt","map","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","receiveCountriesAction","_ref","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","dependentCountriesSelector","countrySelector","countryCode","countriesReducer","arguments","length","undefined","action","fetchJSON","url","options","then","MTOE_UNIT","main","base","factor","Math","pow","derivedStatistics","code","name","description","unit","source","consumption","production","startingYear","endingYear","sourceAttribution","category","isIntensive","compute","energy","gdp","_ref2","co2","_ref3","hydro","geothSolarWindTide","_ref4","nuclear","_ref5","derivedCodes","d","computeDerivedValueFromCompiled","statistic","_ref6","year","sources","objectWithoutProperties","value","Number","isNaN","isFinite","statisticCode","_ref9","sourceNames","statisticValues","mapOfNamedStatisticValues","allValues","allValuesByYear","derivedStatisticValues","stat","keys","Promise","all","sourceName","getStatisticOfCountry","index","_ref7","defineProperty","concat","apply","toConsumableArray","groupBy","sort","mergeAll","includes","getDerivedStatisticOfCountry","_callee2","_ref12","allValuesByYearAndCountry","_context2","getStatisticOfAllCountries","_ref10","countryYearValues","getDerivedStatisticOfAllCountries","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","initialCountryStatistic","countryStatisticReducer","countryStatistic","omit","statisticsLoadedSelector","statistics","allStatisticsSelector","statisticSelector","countryStatisticSelector","countryStatisticLoadedSelector","countryStatisticValuesSelector","countryStatisticsLoadedSelector","statisticCodes","every","statisticOfAllCountriesLoadedSelector","alpha2Code","compiledCountryStatisticsSelector","_ref13","mapOfCountryStatistics","perCapita","parsedMapOfCountryStatistics","defaultCountry","parsed","countryCodes","uniq","populations","parseMapOfStatistics","mapOfStatistic","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","min","v","endingYears","max","computeYearInterval","_computeYearInterval2","slicedToArray","mapObjIndexed","compileName","_ref11","compiledValue","popCompileName","population","populationFactor","computeValue","energySourceCountryConsumedSelector","check","some","coal","gas","oil","biofuelsWaste","solarWindTideGeoth","compiledStatisticForCountriesAndYear","_ref14","push","yearValue","loadCountryStatistic","_ref15","dispatch","getState","loadCountryStatisticAction","statisticValue","catch","loadCountryStatistics","_ref16","statisticsReducer","reduce","acc","WORLD","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","area","number","latlng","arrayOf","object","bool","coordsToLatLng","coords","_coords","longitude","latitude","L","latLng","isMobileOrTablet","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","toPrecision","toLocaleString","tickFormatter","displayUnit","MAP_HEIGHT","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","dependentCountries","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","indexBy","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","dragging","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","background","backgroundColor","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","formatedData","s","statisticByCategory","es_select","width","placeholder","optionFilterProp","showSearch","onChange","stats","OptGroup","label","sortBy","Option","title","slider","defaultValue","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","size","e","target","Button","disabled","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","href","defaultSortOrder","align","onRow","record","onClick","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","loadStatisticOfCountriesAction","CustomGeoJSON","createGeoJSON","prevProps","remove","_this$props","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","CountryMap","TileLayer","attribution","CountryMap_GeoJSON","CustomTooltip","active","separator","payload","withTotal","_payload$","_payload$$formatter","formatter","total","sum","p","totalUnit","_p$formatter","dataKey","defaultProps","PrimaryEnergyChart","sourceConsumed","stacked","setStacked","LineArea","Area","Line","marginRight","ResponsiveContainer","ComposedChart","top","bottom","dot","activeDot","stroke","fill","stackId","CartesianGrid","opacity","XAxis","interval","YAxis","angle","position","component_Tooltip","content","props2","components_CustomTooltip","assign","Legend","iconType","mapOfStatistics","worldReferences","ConnectedPrimaryEnergyChart","world","PrimaryEnergyChartContainer","loadStatistics","_this$props2","_this$props3","spin","spinning","containers_PrimaryEnergyChartContainer","ElectricityMixChart","processedData","gen","ConnectedElectricityMixChart","ElectricityMixChartContainer","SummaryTab","Loader","load","prevOtherProps","otherProps","equals","buildLoader","loadFunction","StatisticsLoader","defaultSelector","withCountryStatistic","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","lineHeight","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","console","warn","dataWithImportAndExport","l","diff","toFixed","export","import","strokeOpacity","strokeWidth","offset","ProdConsoChart_CustomTooltip","BasicChart","LineChart","padding","withCountryStatistics","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","IndependencyTab","sm","BasicChartContainer","ClimateTab","PopulationChart","GDPChart","tabList","tab","tabContent","summary","components_SummaryTab","independency","components_IndependencyTab","climate","components_ClimateTab","CountryView","currentTab","tabKey","Redirect","to","flag","flagIcon","xs","card","marginTop","lg","maxHeight","src","toLowerCase","alt","components_CountryMap","activeTabKey","onTabChange","setTab","match","params","AboutView","rel","GitHubLink","icon","theme","HeaderMenu","goTo","menu","mode","selectable","Item","Link","onSelect","components_GitHubLink","CountriesLoader","prop","ConnectedHeaderMenu","withRouter","AppLayout_StatisticsLoader","layout","Header","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65b539ad.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport worldTopo from 'world-atlas/world/110m.json';\n\nfunction countryMapValues(country) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  return {\n    ...country,\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nasync function getAllCountries() {\n  const res = await fetch('/data/countries.json');\n  const countries = await res.json();\n  return countries.map(countryMapValues);\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport default countriesReducer;\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","import { values, groupBy, mergeAll } from 'ramda';\nimport { fetchJSON } from './helpers';\n\nconst PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description: '',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description: '',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: '',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description: '',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n];\nconst derivedCodes = derivedStatistics.map(d => d.code);\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, countryCode, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, countryCode, value: null }\n      : { year, countryCode, value };\n  };\n}\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nasync function getDerivedStatisticOfCountry(statisticCode, countryCode) {\n  const statistic = derivedStatistics.find(stat => stat.code === statisticCode);\n  const sourceNames = Object.keys(statistic.source);\n\n  const statisticValues = await Promise.all(\n    sourceNames.map(sourceName =>\n      // eslint-disable-next-line no-use-before-define\n      getStatisticOfCountry(statistic.source[sourceName], countryCode),\n    ),\n  );\n\n  const mapOfNamedStatisticValues = sourceNames.map((sourceName, index) =>\n    statisticValues[index].map(({ year, value }) => ({\n      year,\n      [sourceName]: value,\n    })),\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const derivedStatisticValues = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(computeDerivedValueFromCompiled(statistic));\n\n  return derivedStatisticValues;\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  if (derivedCodes.includes(statisticCode)) {\n    return getDerivedStatisticOfCountry(statisticCode, countryCode);\n  }\n\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nasync function getDerivedStatisticOfAllCountries(statisticCode) {\n  const statistic = derivedStatistics.find(stat => stat.code === statisticCode);\n  const sourceNames = Object.keys(statistic.source);\n\n  const statisticValues = await Promise.all(\n    sourceNames.map(sourceName =>\n      // eslint-disable-next-line no-use-before-define\n      getStatisticOfAllCountries(statistic.source[sourceName]),\n    ),\n  );\n\n  const mapOfNamedStatisticValues = sourceNames.map((sourceName, index) =>\n    statisticValues[index].map(({ year, value, countryCode }) => ({\n      year,\n      countryCode,\n      [sourceName]: value,\n    })),\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYearAndCountry = groupBy(\n    value => `${value.countryCode}${value.year}`,\n    allValues,\n  );\n\n  const derivedStatisticValues = values(allValuesByYearAndCountry)\n    .map(countryYearValues => mergeAll(countryYearValues))\n    .map(computeDerivedValueFromCompiled(statistic));\n\n  return derivedStatisticValues;\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  if (derivedCodes.includes(statisticCode)) {\n    return getDerivedStatisticOfAllCountries(statisticCode);\n  }\n\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import {\n  values,\n  indexBy,\n  prop,\n  mapObjIndexed,\n  mergeAll,\n  groupBy,\n  map,\n  omit,\n  uniq,\n} from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfCountry,\n  getStatisticOfAllCountries,\n} from '../api/statistics';\nimport { countriesSelector } from './countries';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(\n  { statisticCodes, countryCode },\n  state,\n) {\n  return statisticCodes.every(statisticCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (!population && perCapita)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction parseMapOfStatistics(\n  mapOfCountryStatistics,\n  defaultCountry,\n  perCapita,\n) {\n  const parsed = map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n  const countryCodes = uniq(values(parsed).map(d => d.countryCode));\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...(perCapita ? populations : {}),\n    ...parsed,\n  };\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfCountryStatistics, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    parsedMapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    parsedMapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .filter(value => startingYear <= value.year && value.year <= endingYear)\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          parsedMapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year', 'pop'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\n\nexport function energySourceCountryConsumedSelector(countryCode, state) {\n  const check = d => d.value > 0.01;\n  const statisticCodeMap = {\n    coal: 'COAL_CONSUMPTION_MTOE',\n    gas: 'GAS_CONSUMPTION_MTOE',\n    oil: 'OIL_CONSUMPTION_MTOE',\n    hydro: 'HYDRO_PRODUCTION_MTOE',\n    nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n    solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n  };\n  return map(\n    statisticCode =>\n      countryStatisticValuesSelector(\n        { statisticCode, countryCode },\n        state,\n      ).some(check),\n    statisticCodeMap,\n  );\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics({ statisticCodes, countryCode }) {\n  return function dispatchloadCountryStatistics(dispatch, getState) {\n    return Promise.all(\n      statisticCodes.map(statisticCode =>\n        loadCountryStatistic({ statisticCode, countryCode })(\n          dispatch,\n          getState,\n        ),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const countries = countriesSelector(getState());\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        getState(),\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n\nexport default statisticsReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n","import L from 'leaflet';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n  } = props;\n  const maxValue = Math.max(\n    ...data.filter(d => d.countryCode !== 'WORLD').map(d => d.value),\n  );\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: 'white',\n                  weight: 0.5,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(value)}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          {`${currentStatistic.name} (${displayUnit(\n            currentStatistic.unit,\n            perCapita,\n          )})`}\n        </div>\n        <div className=\"WorldMap__legend__colors\">\n          <div>\n            <div\n              className=\"WorldMap__legend__gradient\"\n              style={{\n                background: colorGradient,\n              }}\n            />\n            <div className=\"WorldMap__legend__gradientRange\">\n              <div>0</div>\n              <div>{formatNumber(maxValue)}</div>\n            </div>\n          </div>\n          <div>\n            <div\n              className=\"WorldMap__legend__NA__square\"\n              style={{ backgroundColor: NA_COLOR }}\n            />\n            <div>NA</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy, groupBy } from 'ramda';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <Radio.Group\n        style={{ marginBottom: '10px' }}\n        buttonStyle=\"solid\"\n        size=\"small\"\n        value={perCapita}\n        onChange={e => setPerCapita(e.target.value)}\n      >\n        <Radio.Button value={false}>Absolute</Radio.Button>\n        <Radio.Button\n          value\n          disabled={\n            currentStatistic.code === 'POPULATION' ||\n            currentStatistic.isIntensive\n          }\n        >\n          Per capita\n        </Radio.Button>\n      </Radio.Group>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n} from '../../store/statistics';\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../../../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction CountryMap(props) {\n  const { country } = props;\n\n  return (\n    <div className=\"CountryMap\">\n      <Map\n        center={country.latlng}\n        zoom={2}\n        style={{ height: '200px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {country.geojson && <GeoJSON data={country.geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nCountryMap.propTypes = {\n  country: PropTypes.shape({\n    latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n    area: PropTypes.number.isRequired,\n    geojson: PropTypes.object.isRequired,\n  }).isRequired,\n};\n\nexport default CountryMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\n//\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label } = props;\n\n    if (payload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload.reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = payload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload.map(p => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  withTotal: PropTypes.bool,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  withTotal: false,\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { Radio } from 'antd';\nimport { tickFormatter } from '../../../utils';\n\nimport CustomTooltip from './CustomTooltip';\n\nfunction PrimaryEnergyChart(props) {\n  const {\n    data,\n    sourceConsumed,\n    stacked,\n    setStacked,\n    perCapita,\n    setPerCapita,\n  } = props;\n  const unit = perCapita ? ' toe/capita' : ' Mtoe';\n\n  const LineArea = stacked ? Area : Line;\n  return (\n    <div className=\"PrimaryEnergyChart\">\n      <h3 className=\"PrimaryEnergyChart__title\">Primary Energy Consumption</h3>\n      <div>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={stacked}\n          onChange={e => setStacked(e.target.value)}\n          style={{ marginRight: '10px' }}\n        >\n          <Radio.Button value>Stacked</Radio.Button>\n          <Radio.Button value={false}>Split</Radio.Button>\n        </Radio.Group>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button value>Per capita</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ResponsiveContainer height={300} width=\"100%\">\n        <ComposedChart\n          data={data}\n          margin={{ top: 10, right: 0, bottom: 10, left: 0 }}\n        >\n          {sourceConsumed.coal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.oil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.gas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.nuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.hydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.biofuelsWaste && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"biofuelsWaste\"\n              dot={false}\n              activeDot={false}\n              name=\"Biofuels & Waste\"\n              stroke=\"saddlebrown\"\n              fill=\"saddlebrown\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.solarWindTideGeoth && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"solarWindTideGeoth\"\n              dot={false}\n              activeDot={false}\n              name=\"Geothermal, Wind, Solar & Tide\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            tickFormatter={tickFormatter}\n            label={{\n              value: unit,\n              angle: -90,\n              position: 'insideLeft',\n            }}\n          />\n          <Tooltip\n            content={props2 => <CustomTooltip {...props2} withTotal />}\n          />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nPrimaryEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  sourceConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default PrimaryEnergyChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport PrimaryEnergyChart from '../components/PrimaryEnergyChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  compiledCountryStatisticsSelector,\n  energySourceCountryConsumedSelector,\n} from '../../../store/statistics';\n\nconst WORLD = 'WORLD';\n\nconst mapOfStatistics = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst statisticCodes = values(mapOfStatistics).concat(['POPULATION']);\nconst worldReferences = ['POPULATION', 'PRIMARY_ENERGY_CONSUMPTION_MTOE'];\n\nconst ConnectedPrimaryEnergyChart = connect(\n  (state, { countryCode, perCapita }) => ({\n    data: compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: {\n          ...mapOfStatistics,\n          world: {\n            statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n            countryCode: WORLD,\n          },\n        },\n        countryCode,\n        perCapita,\n      },\n      state,\n    ),\n    sourceConsumed: energySourceCountryConsumedSelector(countryCode, state),\n  }),\n)(PrimaryEnergyChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stacked: true,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { countryCode, loadStatistics } = this.props;\n\n    loadStatistics({ statisticCodes, countryCode });\n    loadStatistics({\n      statisticCodes: worldReferences,\n      countryCode: WORLD,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistics } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  setStacked(stacked) {\n    this.setState({ stacked });\n  }\n\n  setPerCapita(perCapita) {\n    this.setState({ perCapita });\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n    const { stacked, perCapita } = this.state;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedPrimaryEnergyChart\n          countryCode={countryCode}\n          setStacked={value => this.setStacked(value)}\n          setPerCapita={value => this.setPerCapita(value)}\n          stacked={stacked}\n          perCapita={perCapita}\n        />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded:\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes,\n          countryCode: props.countryCode,\n        },\n        state,\n      ) &&\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes: worldReferences,\n          countryCode: WORLD,\n        },\n        state,\n      ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(PrimaryEnergyChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { Radio } from 'antd';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ElectricityMixChart(props) {\n  const {\n    data,\n    stacked,\n    setStacked,\n    perCapita,\n    setPerCapita,\n    sourceConsumed,\n  } = props;\n  const unit = perCapita ? ' kWh/capita' : ' TWh';\n  const factor = perCapita ? 1000 : 1;\n\n  // TODO\n  const processedData = data.map(v => ({\n    ...v,\n    nuclear: v.nuclear * 0.33 * 11.63 * factor,\n    hydro: v.hydro * 11.63 * factor,\n    solarWindTideGeoth: v.solarWindTideGeoth * 11.63 * factor,\n  }));\n  const LineArea = stacked ? Area : Line;\n\n  return (\n    <div className=\"ElectricityMixChart\">\n      <h3 className=\"ElectricityMixChart__title\">Electricity generation</h3>\n      <div>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={stacked}\n          onChange={e => setStacked(e.target.value)}\n          style={{ marginRight: '10px' }}\n        >\n          <Radio.Button value>Stacked</Radio.Button>\n          <Radio.Button value={false}>Split</Radio.Button>\n        </Radio.Group>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button value>Per capita</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ResponsiveContainer height={300} width=\"100%\">\n        <ComposedChart\n          data={processedData}\n          margin={{ top: 10, right: 0, bottom: 10, left: 0 }}\n        >\n          {sourceConsumed.coal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.oil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.gas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.nuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.hydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.biofuelsWaste && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"biofuelsWaste\"\n              dot={false}\n              activeDot={false}\n              name=\"Biofuels & Waste\"\n              stroke=\"saddlebrown\"\n              fill=\"saddlebrown\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.solarWindTideGeoth && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"solarWindTideGeoth\"\n              dot={false}\n              activeDot={false}\n              name=\"Geothermy, Wind, Solar & Tide\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            tickFormatter={tickFormatter}\n            label={{\n              value: unit,\n              angle: -90,\n              position: 'insideLeft',\n            }}\n          />\n          <Tooltip\n            content={props2 => <CustomTooltip {...props2} withTotal />}\n          />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nElectricityMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  sourceConsumed: PropTypes.shape({\n    coal: PropTypes.number,\n    oil: PropTypes.number,\n    gas: PropTypes.number,\n    hydro: PropTypes.number,\n    nuclear: PropTypes.number,\n    biofuelsWaste: PropTypes.number,\n    solarWindTideGeoth: PropTypes.number,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default ElectricityMixChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport ElectricityMixChart from '../components/ElectricityMixChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  compiledCountryStatisticsSelector,\n  energySourceCountryConsumedSelector,\n} from '../../../store/statistics';\n\nconst WORLD = 'WORLD';\n\nconst mapOfStatistics = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n  gen: 'ELECTRICITY_GENERATION_TWH',\n};\nconst statisticCodes = values(mapOfStatistics).concat(['POPULATION']);\nconst worldReferences = ['POPULATION', 'ELECTRICITY_GENERATION_TWH'];\n\nconst ConnectedElectricityMixChart = connect(\n  (state, { countryCode, perCapita }) => ({\n    data: compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: {\n          ...mapOfStatistics,\n          world: {\n            statisticCode: 'ELECTRICITY_GENERATION_TWH',\n            countryCode: WORLD,\n          },\n        },\n        countryCode,\n        perCapita,\n      },\n      state,\n    ),\n    sourceConsumed: energySourceCountryConsumedSelector(countryCode, state),\n  }),\n)(ElectricityMixChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stacked: true,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { countryCode, loadStatistics } = this.props;\n\n    loadStatistics({ statisticCodes, countryCode });\n    loadStatistics({\n      statisticCodes: worldReferences,\n      countryCode: WORLD,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistics } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  setStacked(stacked) {\n    this.setState({ stacked });\n  }\n\n  setPerCapita(perCapita) {\n    this.setState({ perCapita });\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n    const { stacked, perCapita } = this.state;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedElectricityMixChart\n          countryCode={countryCode}\n          setStacked={value => this.setStacked(value)}\n          setPerCapita={value => this.setPerCapita(value)}\n          stacked={stacked}\n          perCapita={perCapita}\n        />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded:\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes,\n          countryCode: props.countryCode,\n        },\n        state,\n      ) &&\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes: worldReferences,\n          countryCode: WORLD,\n        },\n        state,\n      ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(PrimaryEnergyChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PrimaryEnergyChartContainer from '../containers/PrimaryEnergyChartContainer';\nimport ElectricityMixChartContainer from '../containers/ElectricityMixChartContainer';\n\nfunction SummaryTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <PrimaryEnergyChartContainer countryCode={countryCode} />\n      <ElectricityMixChartContainer countryCode={countryCode} />\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n} from '../store/statistics';\n\nconst StatisticsLoader = buildLoader(loadCountryStatistics);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction withCountryStatistic(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) => {\n      const mapOfCountryStatistics = mapOfCountryStatisticsSelector(\n        state,\n        props,\n      );\n      const statisticCodes = values(mapOfCountryStatistics);\n      return {\n        data: compiledCountryStatisticsSelector(\n          {\n            mapOfCountryStatistics,\n            countryCode: props.countryCode,\n            perCapita: props.perCapita,\n          },\n          state,\n        ),\n        statistics: map(\n          statisticCode => statisticSelector(statisticCode, state),\n          mapOfCountryStatistics,\n        ),\n        isLoaded: countryStatisticsLoadedSelector(\n          {\n            statisticCodes,\n            countryCode: props.countryCode,\n          },\n          state,\n        ),\n        statisticCodes,\n        perCapita: props.perCapita || false,\n      };\n    })(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader\n          statisticCodes={props.statisticCodes}\n          countryCode={props.countryCode}\n        />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistic;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { formatNumber, tickFormatter } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active } = props;\n\n  if (active) {\n    const { payload, label, filter } = props;\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.filter(filter).map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${formatNumber(p.value)} ${p.unit}`}\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n  filter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  filter: i => i,\n};\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <h3>{fuel}</h3>\n      <ResponsiveContainer height={250} width=\"100%\">\n        <ComposedChart\n          data={dataWithImportAndExport}\n          margin={{ top: 30, right: 20, bottom: 5, left: 20 }}\n        >\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis\n            label={{ value: unit, position: 'insideTopLeft', offset: -20 }}\n          />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip {...props2} filter={p => p.name !== 'base'} />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const { data, statistics, color, perCapita } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"SelfSufficiency\">\n      <strong>{`${statistic.name} (${unit})`}</strong>\n      <ResponsiveContainer height={200}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={statistic.name}\n            unit={` ${unit}`}\n          />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={CustomTooltip} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  color: PropTypes.string,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default BasicChart;\n","import withCountryStatistics from '../../../HOC/withCountryStatistics';\nimport BasicChart from '../components/BasicChart';\n\nexport default withCountryStatistics()(BasicChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport withCountryStatistics from '../../../HOC/withCountryStatistics';\nimport ProdConsoChart from './ProdConsoChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst ProdConsoChartContainer = withCountryStatistics((state, props) => ({\n  prod: props.prodStatisticCode,\n  conso: props.consoStatisticCode,\n}))(ProdConsoChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n      </Row>\n      <Row>\n        <h3>Imports/Exports</h3>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n            fuel=\"Coal\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n            fuel=\"Oil\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n            consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n            fuel=\"Gas\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst statisticCodes = [\n  'CO2_EMISSIONS_MT',\n  'CO2_INTENSITY_OF_ENERGY',\n  'ENERGY_INTENSITY',\n  // 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n];\n\nfunction ClimateTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row gutter={20}>\n        {statisticCodes.map(statisticCode => (\n          <Col md={24 / statisticCodes.length} sm={24}>\n            <BasicChartContainer\n              statisticCode={statisticCode}\n              countryCode={countryCode}\n            />\n          </Col>\n        ))}\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\n\nimport { countrySelector } from '../../store/countries';\n\nimport CountryMap from './components/CountryMap';\nimport SummaryTab from './components/SummaryTab';\nimport IndependencyTab from './components/IndependencyTab';\nimport ClimateTab from './components/ClimateTab';\n\nimport BasicChart from './components/BasicChart';\nimport withCountryStatistics from '../../HOC/withCountryStatistics';\nimport { isMobileOrTablet } from '../../utils';\n\nconst [PopulationChart, GDPChart] = ['POPULATION', 'GDP_2010_USD'].map(\n  statisticCode =>\n    withCountryStatistics({\n      value: statisticCode,\n    })(BasicChart),\n);\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst tabContent = {\n  summary: countryCode => <SummaryTab countryCode={countryCode} />,\n  independency: countryCode => <IndependencyTab countryCode={countryCode} />,\n  climate: countryCode => <ClimateTab countryCode={countryCode} />,\n};\n\nclass CountryView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { country } = this.props;\n    const { currentTab } = this.state;\n\n    if (!country || country.disabled) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const countryCode = country.alpha2Code;\n    const flag = isMobileOrTablet() ? country.flagIcon : '';\n    return (\n      <div className=\"CountryView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n              <div>{`Capital: ${country.capital}`}</div>\n              <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n              <Row style={{ marginTop: '20px' }} gutter={10}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <PopulationChart countryCode={countryCode} color=\"#2c82c9\" />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <GDPChart\n                    countryCode={countryCode}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <img\n              style={{\n                width: '100%',\n                marginBottom: '20px',\n                maxHeight: '180px',\n              }}\n              src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n              alt={`Flag of ${country.commonName}`}\n            />\n            <CountryMap country={country} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](countryCode)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nCountryView.propTypes = {\n  country: PropTypes.shape({\n    alpha2Code: PropTypes.string.isRequired,\n    commonName: PropTypes.string.isRequired,\n  }),\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countrySelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isLoaded } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      <Spin size=\"large\" spinning={!isLoaded}>\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            {!isLoaded && <div className=\"AppLayout__splash\" />}\n            {isLoaded && (\n              <Switch>\n                <Route path=\"/home\" exact component={HomeView} />\n                <Route\n                  path=\"/country/:countryCode\"\n                  exact\n                  component={CountryView}\n                />\n                <Route path=\"/about\" exact component={AboutView} />\n                <Route\n                  component={() => <Redirect to={{ pathname: '/home' }} />}\n                />\n              </Switch>\n            )}\n          </Layout.Content>\n          <Layout.Footer>Sources: IEA, World Data Bank</Layout.Footer>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded: countriesLoadedSelector(state) && statisticsLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}