{"version":3,"sources":["api/countries.js","store/countries.js","utils/index.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","api/areas.js","store/areas.js","store/index.js","utils/types.js","views/HomeView/components/WorldMap.jsx","components/StatisticDetails.jsx","components/ShareChartComponent.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","store/otherSelectors.js","components/GeoJSONMap.jsx","HOC/components/ChartSettings.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","HOC/buildChart.jsx","views/CountryView/components/CustomTooltip.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/GDPByEnergyChart.jsx","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","views/AreaView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["countryMapValues","country","worldTopo","a","objects","countries","geometries","find","c","id","numericCode","geojson","feature","bounds","L","geoJSON","getBounds","Object","objectSpread","_callee","_ref","_ref2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","map","p","then","res","json","sent","slicedToArray","abrupt","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","defaultIndicators","coal","oil","gas","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","countriesInBounds","boundsFilter","intersects","dependentCountriesSelector","countrySelector","countryCode","fuelConsumedCountrySelector","hasConsumed","fuelProducedOrConsumedCountrySelector","mapObjIndexed","v","k","hasProduced","countriesReducer","arguments","length","undefined","action","coordsToLatLng","coords","_coords","longitude","latitude","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","value","Number","isNaN","toPrecision","toLocaleString","tickFormatter","displayUnit","unit","perCapita","concat","base","main","parseMapOfStatistics","mapOfCountryStatistics","defaultCountry","statistics","statisticCode","addPopCountryStatistics","countryCodes","uniq","d","populations","mergeAll","defineProperty","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","statistic","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref4","compiledCountryStatisticsSelector","_ref3","year","sources","objectWithoutProperties","isFinite","computeDerivedValueFromCompiled","statisticOfAllCountriesLoadedSelector","alpha2Code","fn","hashFunction","args","JSON","stringify","cacheSize","cache","_len","Array","_key","hash","apply","hashes","keys","memoize","_ref5","_ref9","baseMap","mapOfStatistic","_ref6","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","statisticValues","Math","min","toConsumableArray","endingYears","max","computeYearInterval","_computeYearInterval2","startingYear","endingYear","mapOfNamedStatisticValues","compileName","_ref7","allValues","allValuesByYear","groupBy","sort","compiledValue","popCompileName","population","factor","populationFactor","computeValue","omit","compiledStatisticForCountriesAndYear","_ref10","push","yearValue","statisticSourcesSelector","statisticCodes","reduce","statisticSources","code","fetchJSON","url","options","MTOE_UNIT","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","derivedStatistics","name","description","consumption","production","sourceAttribution","category","isIntensive","energy","gdp","co2","scale","geothSolarWindTide","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","countryStatistics","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","initialCountryStatistic","countryStatisticReducer","statisticsReducer","acc","WORLD","indexedCountries","indexBy","cca2","countriesData","computeGeojson","area","countryAlpha3Codes","ccn3","includes","merge","AREAS_LOAD_ACTION","AREAS_RECEIVE_ACTION","receiveAreasAction","areasLoadedSelector","areas","areasSelector","areasReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","actionSanitizer","store","createStore","CountryType","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","number","latlng","arrayOf","object","MAP_HEIGHT","bool","sourceUrl","sourceDescriptionUrl","NA_COLOR","BORDER_COLOR","LEGEND_COLORS_COUNT","LEGEND_WIDTH","interpolator","d3Colors","WorldMap","props","selectedCountries","dependentCountries","currentStatistic","currentYear","minZoom","onMapChange","selectedCountryByCode","selectedData","maxValue","colorValueMap","scaleString","minValue","valueMap","scaleLinear","scaleLog","domain","color","computeColorMap","react_default","createElement","className","Map","zoom","zoomSnap","zoomDelta","center","style","height","zIndex","dragging","onZoomend","onMoveend","countryData","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","range","i","width","background","backgroundColor","defaultProps","StatisticDetails","descriptionLines","split","popover","title","arrowPointAtCenter","overlayStyle","maxWidth","content","stat","href","target","rel","placement","es_button","size","icon","marginRight","ShareChartComponent","dropdown","overlay","menu","onClick","chartRef","filename","domElement","offsetHeight","padding","offsetWidth","classFiltered","domToImage","toBlob","element","bgcolor","transform","chartToPngBlob","current","blob","saveAs","err","console","compileNames","headers","dataLines","dataItem","csv","l","join","Blob","Item","theme","WITH_SCALE_SETTINGS","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","mapRef","setScale","countryByCode","formatedData","s","statisticByCategory","es_select","placeholder","optionFilterProp","showSearch","onChange","stats","OptGroup","label","sortBy","Option","slider","defaultValue","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","e","Button","disabled","components_ShareChartComponent","replace","components_StatisticDetails","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","defaultSortOrder","align","onRow","record","f","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","React","createRef","setFilterBounds","getZoom","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","countryWithAreasSelector","areasOfCountrySelector","areaWithCountriesSelector","areaCode","areaSelector","CustomGeoJSON","createGeoJSON","prevProps","remove","_this$props","leaflet","addTo","flyToBounds","withLeaflet","GeoJSONMap","boxZoom","doubleClickZoom","scrollWheelZoom","zoomControl","TileLayer","attribution","GeoJSONMap_GeoJSON","ChartSettings","perCapitaSwitch","stackedSwitch","stacked","setStacked","es_switch","checked","Loader","load","prevOtherProps","_this$props2","otherProps","equals","buildLoader","loadFunction","StatisticsLoader","defaultSelector","mapStateToProps","worldReference","mapOfCountryStatisticsInput","world","parsedMapOfCountryStatistics","mapOfCountryStatisticsToLoad","countryStatisticsToLoad","countryStatitics","countryStatisticsLoadedSelector","withCountryStatistics","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","spin","spinning","defaultHeight","buildChart","_options$perCapitaSwi","_options$stackedSwitc","hocs","hasSettings","withStateHandlers","_ref$defaultPerCapita","defaultPerCapita","_ref$defaultStacked","defaultStacked","WrappedChart","compose","_Component","ChartWrapper","buttonRef","inherits","createClass","_this$props$perCapita","_this$props$stacked","statisticList","finalHeight","descriptionStatistic","finalDescription","data-html2canvas-ignore","components_ChartSettings","assign","CustomTooltip","active","separator","payload","withTotal","displayFilter","totalFilter","units","filteredPayload","_payload$","_payload$$formatter","formatter","total","sum","totalUnit","_p$formatter","dataKey","EnergyMixChart","fuelConsumed","coalUnit","LineArea","Area","Line","defaultLineAreaProps","dot","activeDot","lineAreaProps","stackId","strokeWidth","some","warn","chartMax","ticks","getNiceTickValues","pop","ResponsiveContainer","ComposedChart","stroke","fill","CartesianGrid","opacity","XAxis","interval","YAxis","component_Tooltip","props2","components_CustomTooltip","Legend","iconType","EnergyMixChartBuilded","EnergyMixChartContainer","primaryMap","primaryReference","electrictyMap","electricityReference","SummaryTab","containers_EnergyMixChartContainer","marginTop","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","dataWithImportAndExport","diff","toFixed","export","import","strokeOpacity","GDPByEnergyChart","ScatterChart","bottom","Scatter","cx","cy","r","line","dataMin","floor","dataMax","ceil","position","top","0","1","BasicChart","withComparison","LineChart","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","GDPByEnergyChartContainer","IndependencyTab","fuelProducedOrConsumed","sm","BasicChartContainer","ClimateTab","tabList","tab","IndependencyTabContainer","tabContent","summary","components_SummaryTab","independency","climate","components_ClimateTab","CountryView","currentTab","tabKey","Redirect","to","flag","flagIcon","xs","card","Link","lg","maxHeight","src","toLowerCase","alt","components_GeoJSONMap","activeTabKey","onTabChange","setTab","match","params","AboutView","AreaView_IndependencyTabContainer","AreaView","GitHubLink","HeaderMenu","goTo","mode","selectable","lineHeight","onSelect","SubMenu","components_GitHubLink","CountriesLoader","prop","AreasLoader","_getAreas","getAllAreas","ConnectedHeaderMenu","withRouter","AppLayout_StatisticsLoader","layout","Header","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0d15df4.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport L from 'leaflet';\n\nfunction countryMapValues(country, worldTopo) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  const geojson = a && feature(worldTopo, a);\n  const bounds = a && L.geoJSON(geojson).getBounds();\n  return {\n    ...country,\n    geojson,\n    bounds,\n  };\n}\n\nasync function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [fetch('/data/countries.json'), fetch('/data/worldTopo.json')].map(p =>\n      p.then(res => res.json()),\n    ),\n  );\n  return countries.map(country => countryMapValues(country, worldTopo));\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop, mapObjIndexed } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nconst defaultIndicators = {\n  // for areas\n  coal: true,\n  oil: true,\n  gas: true,\n  hydro: true,\n  nuclear: true,\n  biofuelsWaste: true,\n  solarWindTideGeoth: true,\n};\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function countriesInBounds(boundsFilter, state) {\n  const countries = countriesSelector(state);\n\n  return boundsFilter\n    ? countries.filter(\n        country => country.bounds && boundsFilter.intersects(country.bounds),\n      )\n    : countries;\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport function fuelConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasConsumed : defaultIndicators;\n}\n\nexport function fuelProducedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasProduced : defaultIndicators;\n}\n\nexport function fuelProducedOrConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country\n    ? mapObjIndexed((v, k) => v || country.hasConsumed[k], country.hasProduced)\n    : defaultIndicators;\n}\n\nexport default countriesReducer;\n","import L from 'leaflet';\nimport { map, uniq, values, mergeAll } from 'ramda';\nimport domToImage from 'dom-to-image';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n\nexport function parseMapOfStatistics(mapOfCountryStatistics, defaultCountry) {\n  return map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n}\n\nexport function addPopCountryStatistics(mapOfCountryStatistics, perCapita) {\n  if (!perCapita) {\n    return mapOfCountryStatistics;\n  }\n\n  const countryCodes = uniq(\n    values(mapOfCountryStatistics).map(d => d.countryCode),\n  );\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...populations,\n    ...mapOfCountryStatistics,\n  };\n}\n\nexport function chartToPngBlob(domElement, scale) {\n  const padding = 10;\n  const height = domElement.offsetHeight + padding * 2;\n  const width = domElement.offsetWidth + padding * 2;\n  const classFiltered = [\n    'ChartWrapper__header__right',\n    'leaflet-control-container',\n  ];\n  return domToImage.toBlob(domElement, {\n    filter: element => !classFiltered.includes(element.className),\n    bgcolor: 'white',\n    style: {\n      padding: `${padding}px`,\n      transform: `scale(${scale}) translate(${width / 2 / scale}px, ${height /\n        2 /\n        scale}px)`,\n    },\n    height: height * scale,\n    width: width * scale,\n  });\n}\n\nexport function memoize(\n  fn,\n  hashFunction = args => JSON.stringify(args),\n  cacheSize = 30,\n) {\n  const cache = {};\n  return function memoizedFun(...args) {\n    const hash = hashFunction(args);\n    if (cache[hash]) {\n      return cache[hash];\n    }\n    const res = fn(...args);\n\n    cache[hash] = res;\n\n    const hashes = Object.keys(cache);\n    if (hashes.length > cacheSize) {\n      delete cache[hashes[0]];\n    }\n\n    return res;\n  };\n}\n","import { values, mapObjIndexed, mergeAll, groupBy, map, omit } from 'ramda';\nimport { countriesSelector } from '../countries';\nimport {\n  parseMapOfStatistics,\n  addPopCountryStatistics,\n  memoize,\n} from '../../utils';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, value: null }\n      : { year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(countryStatitics, state) {\n  return countryStatitics.every(countryStatistic =>\n    countryStatisticLoadedSelector(countryStatistic, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (perCapita && !population)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction compiledCountryStatisticsSelectorFn(\n  { mapOfCountryStatistics: baseMap, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    baseMap,\n    countryCode,\n  );\n  const mapOfCountryStatistics = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    mapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    mapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .map(year => Number(year))\n    .filter(year => startingYear <= year && year <= endingYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          mapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\nexport const compiledCountryStatisticsSelector = memoize(\n  compiledCountryStatisticsSelectorFn,\n  args => JSON.stringify(args[0]),\n);\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function statisticSourcesSelector(statisticCodes, state) {\n  return statisticCodes.reduce((statisticSources, statisticCode) => {\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sources = values(statistic.source).map(code =>\n        statisticSelector(code, state),\n      );\n      return statisticSources.concat(sources);\n    }\n\n    return statisticSources.concat([statistic]);\n  }, []);\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","const PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description:\n      'This indicator made up by dividing primary energy consumption by primary energy production, gives an indication on the level of self-sufficiency (or dependency) of a country.',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description:\n      'Measures the mass of CO2 by unit of energy that is emitted by the country.',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'FOSSIL_CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    scale: 'linear',\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: 'Includes hydroelectricity, solar, wind and tide productions.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description:\n      'Includes renewables and nuclear productions. Excludes biofuels at the moment.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      const countryStatistics = sourceCodes.map(sourceCode => ({\n        statisticCode: sourceCode,\n        countryCode,\n      }));\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics(countryStatistics),\n      );\n      return;\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics(countryStatistics) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      countryStatistics.map(countryStatistic =>\n        dispatch(loadCountryStatistic(countryStatistic)),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import worldTopo from 'world-atlas/world/110m.json';\nimport countriesData from 'world-countries/countries';\nimport { merge } from 'topojson-client';\nimport { indexBy } from 'ramda';\n\nconst indexedCountries = indexBy(c => c.cca2, countriesData);\n\nfunction computeGeojson(area) {\n  const countryAlpha3Codes = area.countryCodes.map(\n    countryCode => indexedCountries[countryCode].ccn3,\n  );\n  const geometries = worldTopo.objects.countries.geometries.filter(c =>\n    countryAlpha3Codes.includes(c.id),\n  );\n  return merge(worldTopo, geometries);\n}\n\nexport default async function getAreas() {\n  const res = await fetch('/data/areas.json');\n  const data = await res.json();\n\n  return data.map(area => ({\n    ...area,\n    geojson: area.countryCodes ? computeGeojson(area) : null,\n  }));\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllAreas from '../api/areas';\n\nexport const AREAS_LOAD_ACTION = 'AREAS_LOAD_ACTION';\nexport const AREAS_RECEIVE_ACTION = 'AREAS_RECEIVE_ACTION';\n\nfunction loadAreasAction() {\n  return { type: AREAS_LOAD_ACTION };\n}\n\nfunction receiveAreasAction({ data, errors }) {\n  return { type: AREAS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllAreas() {\n  return function dispatchLoadAllAreas(dispatch) {\n    dispatch(loadAreasAction());\n    return getAllAreas()\n      .then(data =>\n        dispatch(\n          receiveAreasAction({\n            data: indexBy(prop('code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveAreasAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction areasReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case AREAS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case AREAS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function areasLoadedSelector(state) {\n  return state.areas.loaded;\n}\n\nexport function areasSelector(state) {\n  return values(state.areas.data);\n}\n\nexport function areaSelector(areaCode, state) {\n  return state.areas.data[areaCode];\n}\n\nexport function areasOfCountrySelector(countryCode, state) {\n  return values(state.areas.data).filter(\n    area => area.countryCodes && area.countryCodes.includes(countryCode),\n  );\n}\n\nexport default areasReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer, {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n} from './statistics';\nimport areasReducer from './areas';\n\nfunction actionSanitizer(action) {\n  if (\n    (action.type === COUNTRY_STATISTIC_RECEIVE_ACTION ||\n      action.type === STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION) &&\n    action.data\n  ) {\n    return { ...action, data: 'DATA' };\n  }\n  return action;\n}\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n  areas: areasReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  actionSanitizer,\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n  category: PropTypes.string.isRequired,\n  sourceAttribution: PropTypes.string,\n  sourceUrl: PropTypes.string,\n  sourceDescriptionUrl: PropTypes.string,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n\nexport const AreaType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  countries: PropTypes.arrayOf(CountryType),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map, range } from 'ramda';\nimport { scaleLog, scaleLinear } from 'd3-scale';\nimport * as d3Colors from 'd3-scale-chromatic';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst NA_COLOR = '#888';\nconst BORDER_COLOR = 'black';\nconst LEGEND_COLORS_COUNT = 4;\nconst LEGEND_WIDTH = 300; // px\nconst COLORS_SCHEME = 'YlGnBu';\n\nconst interpolator = d3Colors[`interpolate${COLORS_SCHEME}`];\n\nfunction computeColorMap(data, scaleString) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n  const scaleType = scaleString === 'linear' ? scaleLinear() : scaleLog();\n  const scale = scaleType.domain([minValue, maxValue]);\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: interpolator(0), value };\n    }\n    return {\n      color: interpolator(scale(value)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    selectedCountries,\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    scale,\n    minZoom,\n    onMapChange,\n  } = props;\n  const selectedCountryByCode = indexBy(c => c.alpha2Code, selectedCountries);\n  const selectedData = data.filter(\n    d => d.countryCode !== 'WORLD' && selectedCountryByCode[d.countryCode],\n  );\n  const maxValue = Math.max(...selectedData.map(d => d.value));\n  const colorValueMap = computeColorMap(\n    selectedData,\n    currentStatistic.scale || scale,\n  );\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        minZoom={minZoom}\n        zoom={minZoom}\n        zoomSnap={0.1}\n        zoomDelta={0.5}\n        center={[20, 30]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        dragging={!isMobileOrTablet()}\n        onZoomend={onMapChange}\n        onMoveend={onMapChange}\n      >\n        {countries.map(country => {\n          const countryData = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: BORDER_COLOR,\n                  weight: 0.5,\n                  fillColor: countryData ? countryData.color : NA_COLOR,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(\n                  countryData && countryData.value,\n                )}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          <div>\n            {`${currentStatistic.name} (${displayUnit(\n              currentStatistic.unit,\n              perCapita,\n            )})`}\n          </div>\n          <div className=\"WorldMap__legend__colors\">\n            <div>\n              <div className=\"WorldMap__legend__gradient\">\n                {range(0, LEGEND_COLORS_COUNT).map(i => (\n                  <div\n                    key={i}\n                    className=\"WorldMap__legend__gradient__item\"\n                    style={{\n                      width: LEGEND_WIDTH / LEGEND_COLORS_COUNT,\n                      background: `linear-gradient(to right, ${interpolator(\n                        i / LEGEND_COLORS_COUNT,\n                      )}, ${interpolator((i + 1) / LEGEND_COLORS_COUNT)}`,\n                    }}\n                  />\n                ))}\n              </div>\n              <div className=\"WorldMap__legend__gradientRange\">\n                <div>0</div>\n                <div>{formatNumber(maxValue)}</div>\n              </div>\n            </div>\n            <div>\n              <div\n                className=\"WorldMap__legend__NA__square\"\n                style={{ backgroundColor: NA_COLOR }}\n              />\n              <div>NA</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  selectedCountries: PropTypes.arrayOf(CountryType).isRequired,\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  scale: PropTypes.string,\n  minZoom: PropTypes.number,\n  onMapChange: PropTypes.func.isRequired,\n};\n\nWorldMap.defaultProps = {\n  scale: null,\n  minZoom: 1.8,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Popover, Button } from 'antd';\n\nimport { StatisticType } from '../utils/types';\n\nfunction StatisticDetails(props) {\n  const { statisticSources, description } = props;\n  const descriptionLines = description && description.split('\\n');\n\n  return (\n    <div className=\"StatisticDetails\">\n      <Popover\n        title=\"Details\"\n        arrowPointAtCenter\n        overlayStyle={{ maxWidth: '300px' }}\n        content={\n          // eslint-disable-next-line react/jsx-wrap-multilines\n          <div>\n            {description && (\n              <div>\n                <strong>Description : </strong>\n                {`${descriptionLines[0]}`}\n              </div>\n            )}\n            <div>\n              <strong>\n                {`Source${statisticSources.length > 1 ? 's' : ''}`}\n              </strong>\n              <ul className=\"StatisticDetails__sources\">\n                {statisticSources.map(stat => (\n                  <li key={stat.code}>\n                    <a\n                      href={stat.sourceUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {`${stat.name} (${stat.sourceAttribution})`}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        }\n        placement=\"bottomRight\"\n      >\n        <Button\n          size=\"small\"\n          icon=\"info-circle\"\n          style={{ marginRight: '5px' }}\n        />\n      </Popover>\n    </div>\n  );\n}\n\nStatisticDetails.propTypes = {\n  description: PropTypes.string,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n};\n\nStatisticDetails.defaultProps = {\n  description: null,\n};\n\nexport default StatisticDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { saveAs } from 'file-saver';\n\nimport { Button, Dropdown, Menu, Icon } from 'antd';\nimport { chartToPngBlob } from '../utils';\n\nfunction ShareChartComponent(props) {\n  return (\n    <div className=\"ShareChartComponent\">\n      <Dropdown\n        overlay={\n          // eslint-disable-next-line\n          <Menu\n            onClick={({ key }) => {\n              if (key === 'png') {\n                const { chartRef, filename } = props;\n                chartToPngBlob(chartRef.current, 2)\n                  .then(blob => saveAs(blob, `${filename}.png`))\n                  .catch(err => console.err(err));\n              } else if (key === 'csv') {\n                const { data, statistics, filename } = props;\n                const compileNames = Object.keys(statistics);\n                const headers = compileNames.map(\n                  compileName => statistics[compileName].code,\n                );\n                const dataLines = data.map(dataItem =>\n                  compileNames.map(compileName => dataItem[compileName]),\n                );\n                const lines = [headers, ...dataLines];\n                const csv = lines.map(l => l.join(',')).join('\\n');\n                const blob = new Blob([csv], {\n                  type: 'text/plain;charset=utf-8',\n                });\n                saveAs(blob, `${filename}.csv`);\n              }\n            }}\n          >\n            <Menu.Item key=\"png\">\n              <Icon type=\"picture\" theme=\"filled\" />\n              .png\n            </Menu.Item>\n            <Menu.Item key=\"csv\">\n              <Icon type=\"file-text\" theme=\"filled\" />\n              .csv\n            </Menu.Item>\n          </Menu>\n        }\n      >\n        <Button size=\"small\" icon=\"share-alt\" style={{ marginRight: '5px' }} />\n      </Dropdown>\n    </div>\n  );\n}\n\nShareChartComponent.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  chartRef: PropTypes.any.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  statistics: PropTypes.object.isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  filename: PropTypes.string.isRequired,\n};\n\nexport default ShareChartComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio, Popover, Button, Icon } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy, groupBy, indexBy } from 'ramda';\n\nimport StatisticDetails from '../../../components/StatisticDetails';\nimport ShareChartComponent from '../../../components/ShareChartComponent';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nconst WITH_SCALE_SETTINGS = false;\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    statisticSources,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n    mapRef,\n    scale,\n    setScale,\n  } = props;\n\n  const countryByCode = indexBy(c => c.alpha2Code, countries);\n  const formatedData = data\n    .filter(s => s.value !== null && countryByCode[s.countryCode])\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countryByCode[s.countryCode].commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  if (currentStatistic.isIntensive && perCapita) {\n    setPerCapita(false);\n  }\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <div className=\"StatisticExplorer__options\">\n        <Radio.Group\n          style={{ marginBottom: '10px' }}\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button\n            value\n            disabled={\n              currentStatistic.code === 'POPULATION' ||\n              currentStatistic.isIntensive\n            }\n          >\n            Per capita\n          </Radio.Button>\n        </Radio.Group>\n        <div className=\"StatisticExplorer__options__right\">\n          <ShareChartComponent\n            filename={currentStatistic.name.replace(/ /g, '_')}\n            chartRef={mapRef}\n            statistics={{\n              countryCode: { code: 'COUNTRY_CODE' },\n              value: currentStatistic,\n            }}\n            data={data}\n          />\n          <StatisticDetails\n            statisticSources={statisticSources}\n            description={currentStatistic.description}\n          />\n          {WITH_SCALE_SETTINGS && (\n            <Popover\n              title=\"Settings\"\n              arrowPointAtCenter\n              content={\n                // eslint-disable-next-line react/jsx-wrap-multilines\n                <div>\n                  {'Scale '}\n                  <Radio.Group\n                    buttonStyle=\"solid\"\n                    size=\"small\"\n                    value={scale}\n                    onChange={e => setScale(e.target.value)}\n                  >\n                    <Radio.Button value=\"log\">Log</Radio.Button>\n                    <Radio.Button value=\"linear\">Linear</Radio.Button>\n                  </Radio.Group>\n                </div>\n              }\n              placement=\"bottomRight\"\n            >\n              <Button size=\"small\">\n                <Icon type=\"setting\" theme=\"filled\" />\n              </Button>\n            </Popover>\n          )}\n        </div>\n      </div>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  mapRef: PropTypes.object.isRequired,\n  scale: PropTypes.string,\n  setScale: PropTypes.func.isRequired,\n};\n\nStatisticExplorer.defaultProps = {\n  scale: null,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  countriesInBounds,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../store/statistics';\n\nfunction f(statisticCode, perCapita) {\n  // TODO\n  return perCapita ? [statisticCode, 'POPULATION'] : [statisticCode];\n}\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    selectedCountries: countriesInBounds(boundsFilter, state),\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    countries: countriesInBounds(boundsFilter, state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    statisticSources: statisticSourcesSelector(\n      f(statisticCode, perCapita),\n      state,\n    ),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nconst MIN_ZOOM = 2;\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n      scale: null,\n      boundsFilter: null,\n    };\n    this.mapRef = React.createRef();\n    this.onMapChange = e =>\n      this.setFilterBounds(e.target.getBounds(), e.target.getZoom());\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setFilterBounds(bounds, zoom) {\n    this.setState({ boundsFilter: zoom === MIN_ZOOM ? null : bounds });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  setScale(scale) {\n    this.setState({ scale });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const {\n      currentYear,\n      statisticCode,\n      perCapita,\n      scale,\n      boundsFilter,\n    } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <div ref={this.mapRef}>\n              <ConnectedWorldMap\n                statisticCode={statisticCode}\n                currentYear={currentYear}\n                perCapita={perCapita}\n                scale={scale}\n                minZoom={MIN_ZOOM}\n                onMapChange={this.onMapChange}\n                boundsFilter={boundsFilter}\n              />\n            </div>\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n              mapRef={this.mapRef}\n              scale={scale}\n              setScale={value => this.setScale(value)}\n              boundsFilter={boundsFilter}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import { countrySelector, countriesSelector } from './countries';\nimport { areaSelector, areasOfCountrySelector } from './areas';\n\nexport function countryWithAreasSelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  const areas = areasOfCountrySelector(countryCode, state);\n\n  return {\n    ...country,\n    areas,\n  };\n}\n\nexport function areaWithCountriesSelector(areaCode, state) {\n  const area = areaSelector(areaCode, state);\n  const countries = area.countryCodes\n    ? area.countryCodes\n        .map(countryCode => countrySelector(countryCode, state))\n        .filter(c => !!c)\n    : countriesSelector(state);\n  return {\n    ...area,\n    countries,\n  };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction GeoJSONMap(props) {\n  const { geojson, center } = props;\n\n  return (\n    <div className=\"GeoJSONMap\">\n      <Map\n        center={center}\n        zoom={2}\n        zoomDelta={0}\n        zoomSnap={0}\n        boxZoom={false}\n        doubleClickZoom={false}\n        scrollWheelZoom={false}\n        zoomControl={false}\n        dragging={false}\n        style={{ height: '300px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {geojson && <GeoJSON data={geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nGeoJSONMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  geojson: PropTypes.object.isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default GeoJSONMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Switch } from 'antd';\n\nfunction ChartSettings(props) {\n  const {\n    perCapitaSwitch,\n    stackedSwitch,\n    perCapita,\n    stacked,\n    setPerCapita,\n    setStacked,\n  } = props;\n\n  return (\n    <div className=\"ChartSettings\">\n      {perCapitaSwitch && (\n        <div>\n          {'Per capita '}\n          <Switch size=\"small\" checked={perCapita} onChange={setPerCapita} />\n        </div>\n      )}\n      {stackedSwitch && (\n        <div>\n          {'Stacked '}\n          <Switch size=\"small\" checked={stacked} onChange={setStacked} />\n        </div>\n      )}\n    </div>\n  );\n}\nChartSettings.propTypes = {\n  perCapitaSwitch: PropTypes.bool.isRequired,\n  stackedSwitch: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  setStacked: PropTypes.func.isRequired,\n};\n\nexport default ChartSettings;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values, uniq } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n  statisticSourcesSelector,\n} from '../store/statistics';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../utils';\nimport { countrySelector } from '../store/countries';\n\nconst StatisticsLoader = buildLoader(({ countryStatistics }) =>\n  loadCountryStatistics(countryStatistics),\n);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction mapStateToProps(state, props) {\n  const {\n    perCapita,\n    worldReference,\n    statisticCode,\n    mapOfCountryStatistics: mapOfCountryStatisticsInput,\n    countryCode,\n  } = props;\n  const isIntensive =\n    statisticCode && statisticSelector(statisticCode, state).isIntensive;\n  const mapOfCountryStatistics =\n    (perCapita || isIntensive) && worldReference\n      ? {\n          ...mapOfCountryStatisticsInput,\n          world: {\n            countryCode: 'WORLD',\n            statisticCode:\n              typeof worldReference === 'boolean'\n                ? statisticCode\n                : worldReference,\n          },\n        }\n      : mapOfCountryStatisticsInput;\n\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n  );\n  const mapOfCountryStatisticsToLoad = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const countryStatisticsToLoad = values(mapOfCountryStatisticsToLoad);\n  const statisticCodes = uniq(\n    countryStatisticsToLoad.map(c => c.statisticCode),\n  );\n  const isLoaded = countryStatisticsLoadedSelector(\n    countryStatisticsToLoad,\n    state,\n  );\n  const data = isLoaded\n    ? compiledCountryStatisticsSelector(\n        {\n          mapOfCountryStatistics,\n          countryCode: props.countryCode,\n          perCapita: props.perCapita,\n        },\n        state,\n      )\n    : [];\n\n  return {\n    data,\n    statistics: map(\n      ({ statisticCode: code }) => statisticSelector(code, state),\n      parsedMapOfCountryStatistics,\n    ),\n    statisticSources: statisticSourcesSelector(statisticCodes, state),\n    isLoaded,\n    countryStatisticsToLoad,\n    country: countrySelector(countryCode, state),\n  };\n}\n\nfunction withCountryStatistics(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) =>\n      mapStateToProps(state, {\n        mapOfCountryStatistics: mapOfCountryStatisticsSelector(state, props),\n        ...props,\n      }),\n    )(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader countryStatistics={props.countryStatisticsToLoad} />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistics;\n","import React, { Component } from 'react';\nimport { values } from 'ramda';\nimport { withStateHandlers, compose } from 'recompose';\n\nimport { Icon, Popover, Button } from 'antd';\n\nimport { displayUnit } from '../utils';\nimport StatisticDetails from '../components/StatisticDetails';\n\nimport ChartSettings from './components/ChartSettings';\nimport ShareChartComponent from '../components/ShareChartComponent';\nimport withCountryStatistics from './withCountryStatistics';\n\nconst defaultHeight = 200;\n\nfunction buildChart(options = {}) {\n  const {\n    mapOfCountryStatisticsSelector,\n    perCapitaSwitch = false,\n    stackedSwitch = false,\n  } = options;\n  const hocs = [];\n  const hasSettings = perCapitaSwitch || stackedSwitch;\n\n  if (hasSettings) {\n    hocs.push(\n      withStateHandlers(\n        ({ defaultPerCapita = false, defaultStacked = false }) => ({\n          perCapita: defaultPerCapita,\n          stacked: defaultStacked,\n        }),\n        {\n          setPerCapita: () => perCapita => ({ perCapita }),\n          setStacked: () => stacked => ({ stacked }),\n        },\n      ),\n    );\n  }\n  hocs.push(withCountryStatistics(mapOfCountryStatisticsSelector));\n\n  return function buildChartWrapper(WrappedChart) {\n    return compose(...hocs)(\n      class ChartWrapper extends Component {\n        constructor() {\n          super();\n          this.chartRef = React.createRef();\n          this.buttonRef = React.createRef();\n        }\n\n        render() {\n          const {\n            title,\n            description,\n            statistics,\n            statisticSources,\n            height,\n            perCapita = false,\n            stacked = false,\n            setPerCapita,\n            setStacked,\n            data,\n          } = this.props;\n          const statisticList = values(statistics);\n          const statistic = statisticList[0];\n          const finalHeight = options.height || height || defaultHeight;\n          const filename = title\n            ? title.replace(/ /g, '_')\n            : statistic.name.replace(/ /g, '_');\n\n          const descriptionStatistic = statisticList.find(\n            s => s.code === description,\n          );\n          const finalDescription =\n            statisticList.length < 2\n              ? description || statistic.description\n              : (descriptionStatistic && descriptionStatistic.description) ||\n                description;\n\n          return (\n            <div className=\"ChartWrapper\" ref={this.chartRef}>\n              <div className=\"ChartWrapper__header\">\n                <div className=\"ChartWrapper__header__left\">\n                  <span className=\"ChartWrapper__title\">\n                    {title || statistic.name}\n                  </span>\n                  <span className=\"ChartWrapper__title__unit\">\n                    {` (${displayUnit(statistic.unit, perCapita)})`}\n                  </span>\n                </div>\n                <div\n                  className=\"ChartWrapper__header__right\"\n                  data-html2canvas-ignore\n                >\n                  <ShareChartComponent\n                    filename={filename}\n                    chartRef={this.chartRef}\n                    statistics={{ year: { code: 'YEAR' }, ...statistics }}\n                    data={data}\n                  />\n                  <StatisticDetails\n                    statisticSources={statisticSources}\n                    description={finalDescription}\n                  />\n                  {hasSettings && (\n                    <div>\n                      <Popover\n                        title=\"Settings\"\n                        arrowPointAtCenter\n                        content={\n                          // eslint-disable-next-line react/jsx-wrap-multilines\n                          <ChartSettings\n                            perCapitaSwitch={perCapitaSwitch}\n                            stackedSwitch={stackedSwitch}\n                            stacked={stacked}\n                            perCapita={perCapita}\n                            setPerCapita={setPerCapita}\n                            setStacked={setStacked}\n                          />\n                        }\n                        placement=\"bottomRight\"\n                      >\n                        <Button size=\"small\">\n                          <Icon type=\"setting\" theme=\"filled\" />\n                        </Button>\n                      </Popover>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <WrappedChart\n                {...this.props}\n                height={finalHeight}\n                perCapita={perCapita}\n                stacked={stacked}\n              />\n              <div className=\"ChartWrapper__footer\" />\n            </div>\n          );\n        }\n      },\n    );\n  };\n}\n\nexport default buildChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label, displayFilter, totalFilter, units } = props;\n    const filteredPayload = payload.filter(displayFilter);\n\n    if (filteredPayload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload\n      .filter(totalFilter)\n      .reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = filteredPayload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {filteredPayload.map((p, i) => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey || name} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit || units[i]}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  withTotal: PropTypes.bool,\n  displayFilter: PropTypes.func,\n  totalFilter: PropTypes.func,\n  units: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  withTotal: false,\n  displayFilter: i => i,\n  totalFilter: i => i,\n  units: {},\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { values } from 'ramda';\n\nimport { getNiceTickValues } from 'recharts-scale';\nimport { tickFormatter, displayUnit } from '../../../utils';\nimport { StatisticType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nfunction EnergyMixChart(props) {\n  const { data, stacked, perCapita, fuelConsumed, statistics } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n  const defaultLineAreaProps = {\n    type: 'monotone',\n    dot: false,\n    activeDot: false,\n    unit,\n  };\n  const lineAreaProps = stacked\n    ? { stackId: '1', ...defaultLineAreaProps }\n    : { strokeWidth: 2, ...defaultLineAreaProps };\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  const max = Math.max(\n    ...(stacked\n      ? data.map(d =>\n          Object.keys(fuelConsumed).reduce((sum, k) => sum + d[k], 0),\n        )\n      : data.map(d => Math.max(...Object.keys(fuelConsumed).map(k => d[k])))),\n    ...(perCapita ? data.map(d => d.world) : []),\n  );\n\n  const chartMax = max * 1.05;\n  const ticks = getNiceTickValues([0, chartMax], 5, true);\n\n  if (ticks[3] > chartMax) {\n    ticks.pop();\n  }\n  const domain = [0, ticks[ticks.length - 1]];\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart data={data}>\n          {fuelConsumed.coal && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"coal\"\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n            />\n          )}\n          {fuelConsumed.oil && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"oil\"\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n            />\n          )}\n          {fuelConsumed.gas && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"gas\"\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n            />\n          )}\n          {fuelConsumed.nuclear && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"nuclear\"\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n            />\n          )}\n          {fuelConsumed.hydro && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"hydro\"\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n            />\n          )}\n          {fuelConsumed.biofuelsWaste && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"biofuelsWaste\"\n              name=\"Biofuels & Waste\"\n              stroke=\"saddlebrown\"\n              fill=\"saddlebrown\"\n            />\n          )}\n          {fuelConsumed.solarWindTideGeoth && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"solarWindTideGeoth\"\n              name=\"Geothermy, Wind, Solar & Tide\"\n              stroke=\"green\"\n              fill=\"green\"\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis tickFormatter={tickFormatter} ticks={ticks} domain={domain} />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={p => p.name !== 'World'}\n              />\n            )}\n          />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  fuelConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default EnergyMixChart;\n","import { connect } from 'react-redux';\n\nimport buildChart from '../../../HOC/buildChart';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport { fuelConsumedCountrySelector } from '../../../store/countries';\n\nconst EnergyMixChartBuilded = buildChart({\n  perCapitaSwitch: true,\n  stackedSwitch: true,\n})(EnergyMixChart);\n\nconst EnergyMixChartContainer = connect((state, { countryCode }) => ({\n  fuelConsumed: fuelConsumedCountrySelector(countryCode, state),\n}))(EnergyMixChartBuilded);\n\nexport default EnergyMixChartContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nfunction SummaryTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <div>\n        <EnergyMixChartContainer\n          title=\"Primary energy consumption\"\n          description=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n          countryCode={countryCode}\n          mapOfCountryStatistics={primaryMap}\n          worldReference={primaryReference}\n          defaultPerCapita\n          defaultStacked\n        />\n      </div>\n      <div id=\"test\" style={{ marginTop: '20px' }}>\n        <EnergyMixChartContainer\n          title=\"Electricity generation by fuels\"\n          description=\"ELECTRICITY_GENERATION_TWH\"\n          countryCode={countryCode}\n          mapOfCountryStatistics={electrictyMap}\n          worldReference={electricityReference}\n          defaultPerCapita\n          defaultStacked\n        />\n      </div>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data, height } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={dataWithImportAndExport}>\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                displayFilter={p => p.name !== 'base'}\n              />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\n\nfunction GDPByEnergyChart(props) {\n  const { data, color, statistics } = props;\n  // const statistic = statistics.value;\n  // const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"GDPByEnergyChart\">\n      <ResponsiveContainer height={300}>\n        <ScatterChart data={data} margin={{ bottom: 50 }}>\n          <Scatter\n            fill={color}\n            shape={props2 => (\n              <circle cx={props2.cx} cy={props2.cy} r={3} fill={color} />\n            )}\n            line\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"energy\"\n            name={statistics.energy.name}\n            type=\"number\"\n            domain={[\n              dataMin => Math.floor(0.95 * dataMin),\n              dataMax => Math.ceil(1.05 * dataMax),\n            ]}\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.energy.name} (${\n                statistics.energy.unit.main\n              })`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"gdp\"\n            name={statistics.gdp.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.year\n                }\n                units={{\n                  '0': statistics.energy.unit.main,\n                  '1': statistics.gdp.unit.main,\n                }}\n              />\n            )}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nGDPByEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      gdp: PropTypes.number,\n      energy: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    gdp: StatisticType,\n    energy: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  color: PropTypes.string,\n};\n\nGDPByEnergyChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default GDPByEnergyChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  Legend,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const {\n    data,\n    statistics,\n    color,\n    perCapita,\n    height,\n    worldReference,\n    country,\n  } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n  const withComparison = worldReference && (perCapita || statistic.isIntensive);\n\n  return (\n    <div className=\"BasicChart\">\n      <ResponsiveContainer height={height}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={country.commonName}\n            unit={` ${unit}`}\n          />\n          {withComparison && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              stroke=\"red\"\n              strokeWidth={3}\n              dot={false}\n              name=\"World\"\n              unit={` ${unit}`}\n            />\n          )}\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={props2 => <CustomTooltip {...props2} />} />\n          {withComparison && <Legend iconType=\"circle\" />}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n  worldReference: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n    .isRequired,\n  country: CountryType.isRequired,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default BasicChart;\n","import buildChart from '../../../HOC/buildChart';\nimport BasicChart from '../components/BasicChart';\n\nexport default buildChart()(BasicChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport buildChart from '../../../HOC/buildChart';\nimport ProdConsoChart from './ProdConsoChart';\nimport GDPByEnergyChart from './GDPByEnergyChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst ProdConsoChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: (state, props) => ({\n    prod: props.prodStatisticCode,\n    conso: props.consoStatisticCode,\n  }),\n})(ProdConsoChart);\n\nconst GDPByEnergyChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    gdp: 'GDP_2010_USD',\n    energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n  },\n})(GDPByEnergyChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode, fuelProducedOrConsumed } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <h3>Imports/Exports</h3>\n        {fuelProducedOrConsumed.coal && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n              fuel=\"Coal\"\n              title=\"Coal Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.oil && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n              fuel=\"Oil\"\n              title=\"Oil Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.gas && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n              consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n              fuel=\"Gas\"\n              title=\"Gas Trade\"\n            />\n          </Col>\n        )}\n      </Row>\n      <Row>\n        <h3>Energy/GDP coupling</h3>\n        <Col md={16} sm={24}>\n          <GDPByEnergyChartContainer\n            countryCode={countryCode}\n            title=\"GDP according to primary energy\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  fuelProducedOrConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nfunction ClimateTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"FOSSIL_CO2_EMISSIONS_MT\"\n            perCapita\n            countryCode={countryCode}\n            worldReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            perCapita\n            countryCode={countryCode}\n            worldReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_INTENSITY_OF_ENERGY\"\n            countryCode={countryCode}\n            worldReference\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\n\n// import { countrySelector } from '../../store/countries';\nimport { countryWithAreasSelector } from '../../store/otherSelectors';\nimport { CountryType } from '../../utils/types';\n\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport SummaryTab from './components/SummaryTab';\nimport IndependencyTab from './components/IndependencyTab';\nimport ClimateTab from './components/ClimateTab';\n\nimport BasicChartContainer from './containers/BasicChartContainer';\nimport { isMobileOrTablet } from '../../utils';\nimport { fuelProducedOrConsumedCountrySelector } from '../../store/countries';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst tabContent = {\n  summary: countryCode => <SummaryTab countryCode={countryCode} />,\n  independency: countryCode => (\n    <IndependencyTabContainer countryCode={countryCode} />\n  ),\n  climate: countryCode => <ClimateTab countryCode={countryCode} />,\n};\n\nclass CountryView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { country } = this.props;\n    const { currentTab } = this.state;\n\n    if (!country || country.disabled) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const countryCode = country.alpha2Code;\n    const flag = isMobileOrTablet() ? country.flagIcon : '';\n    return (\n      <div className=\"CountryView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n              <div>{`Capital: ${country.capital}`}</div>\n              <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n              <div>\n                {`Member of: `}\n                {country.areas.map((area, i) => (\n                  <Link key={area.code} to={`/area/${area.code}`}>\n                    {`${i > 0 ? ', ' : ''}${area.name}`}\n                  </Link>\n                ))}\n              </div>\n              <Row style={{ marginTop: '20px' }} gutter={20}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"POPULATION\"\n                    countryCode={countryCode}\n                    color=\"#2c82c9\"\n                  />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"GDP_2010_USD\"\n                    countryCode={countryCode}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <img\n              style={{\n                width: '100%',\n                marginBottom: '20px',\n                maxHeight: '180px',\n              }}\n              src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n              alt={`Flag of ${country.commonName}`}\n            />\n            <GeoJSONMap geojson={country.geojson} center={country.latlng} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](countryCode)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nCountryView.propTypes = {\n  country: CountryType,\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countryWithAreasSelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\nimport GeoJSONMap from '../../components/GeoJSONMap';\n\nimport { areaWithCountriesSelector } from '../../store/otherSelectors';\nimport { AreaType } from '../../utils/types';\n\nimport SummaryTab from '../CountryView/components/SummaryTab';\nimport IndependencyTab from '../CountryView/components/IndependencyTab';\nimport ClimateTab from '../CountryView/components/ClimateTab';\nimport BasicChartContainer from '../CountryView/containers/BasicChartContainer';\n\nimport { fuelProducedOrConsumedCountrySelector } from '../../store/countries';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst tabContent = {\n  summary: areaCode => <SummaryTab countryCode={areaCode} />,\n  independency: areaCode => <IndependencyTabContainer countryCode={areaCode} />,\n  climate: areaCode => <ClimateTab countryCode={areaCode} />,\n};\n\nclass AreaView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { area } = this.props;\n    const { currentTab } = this.state;\n    const latlng = [\n      area.countries.reduce((s, c) => c.latlng[0] + s, 0) /\n        area.countries.length,\n      area.countries.reduce((s, c) => c.latlng[1] + s, 0) /\n        area.countries.length,\n    ];\n\n    if (!area) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div className=\"AreaView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${area.name}`}</h2>}>\n              {area.code !== 'WORLD' && (\n                <div>\n                  {`Members : `}\n                  {area.countries.map((country, i) => (\n                    <Link\n                      key={country.alpha2Code}\n                      to={`/country/${country.alpha2Code}`}\n                    >\n                      {`${i > 0 ? ', ' : ''}${country.commonName}`}\n                    </Link>\n                  ))}\n                </div>\n              )}\n              <Row style={{ marginTop: '20px' }} gutter={10}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"POPULATION\"\n                    countryCode={area.code}\n                    color=\"#2c82c9\"\n                  />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"GDP_2010_USD\"\n                    countryCode={area.code}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <GeoJSONMap geojson={area.geojson} center={latlng} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](area.code)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nAreaView.propTypes = {\n  area: AreaType.isRequired,\n};\n\nexport default connect((state, props) => ({\n  area: areaWithCountriesSelector(props.match.params.areaCode, state),\n}))(AreaView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType, AreaType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, areas, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.SubMenu title=\"Areas\">\n        {sortBy(a => a.name, areas).map(area => (\n          <Menu.Item key={area.code}>\n            <Link to={`/area/${area.code}`}>{area.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu.SubMenu>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  areas: PropTypes.arrayOf(AreaType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\nimport AreaView from '../views/AreaView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\nimport {\n  loadAllAreas,\n  areasLoadedSelector,\n  areasSelector,\n} from '../store/areas';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\nconst AreasLoader = buildLoader(loadAllAreas);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    areas: areasSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isLoaded } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      <AreasLoader />\n      <Spin size=\"large\" spinning={!isLoaded}>\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            {!isLoaded && <div className=\"AppLayout__splash\" />}\n            {isLoaded && (\n              <Switch>\n                <Route path=\"/home\" exact component={HomeView} />\n                <Route\n                  path=\"/country/:countryCode\"\n                  exact\n                  component={CountryView}\n                />\n                <Route path=\"/area/:areaCode\" exact component={AreaView} />\n                <Route path=\"/about\" exact component={AboutView} />\n                <Route\n                  component={() => <Redirect to={{ pathname: '/home' }} />}\n                />\n              </Switch>\n            )}\n          </Layout.Content>\n          <Layout.Footer>{' '}</Layout.Footer>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded:\n      countriesLoadedSelector(state) &&\n      statisticsLoadedSelector(state) &&\n      areasLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}