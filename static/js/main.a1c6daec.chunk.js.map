{"version":3,"sources":["api/country.js","store/countries.js","api/helpers.js","api/statistics/eiaApi.js","api/statistics/ieaApi.js","api/statistics/worldBankApi.js","api/statistics/converters.js","api/statistics/statistics.js","api/statistics/index.js","store/statistics.js","store/index.js","utils/types.js","utils/index.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","views/CountryView/components/PrimaryEnergyChart.jsx","views/CountryView/containers/PrimaryEnergyChartContainer.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/containers/ProdConsoCharContainer.jsx","views/CountryView/components/CountryMap.jsx","views/CountryView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","loaders/index.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["noData","countryMapValues","country","a","worldTopo","objects","countries","geometries","find","c","id","ccn3","Number","alpha2Code","cca2","commonName","name","common","alpha3Code","cca3","numericCode","region","subregion","isIndependent","independent","area","capital","latlng","disabled","includes","geojson","feature","getAllCountries","Promise","resolve","countriesData","filter","map","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","receiveCountriesAction","_ref","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","countrySelector","countryCode","countriesReducer","arguments","length","undefined","action","Object","objectSpread","retryFetch","url","options","retryCount","fetch","then","res","json","catch","error","reject","setTimeout","console","log","concat","require","EIA_API_KEY","EIA_API","parseValue","value","isNaN","_callee","statistic","seriesId","regenerator_default","wrap","_context","prev","next","seriesOfCountry","sent","startsWith","abrupt","series","d","year","unitConverter","stop","this","IEA_API","cache","WORLD_BANK_API","worldBankCode","_statistic$unitConver","i","object","statisticCode","code","date","convert_TWh_to_Mtoe","twh","generationToConsumption","statistics","description","startingYear","endingYear","unit","baseUnit","unitFactor","Math","pow","sources","api","toFixed","ieaId","getStatisticOfCountry","_x","_x2","_fetchStatisticFromEIA","apply","fetchStatisticFromEIA","datasets","years","keys","reduce","map1","countriesOfYear","countryAlpha3Code","item","push","countryValues","fetchStatisticFromIEA","_fetchStatisticFromWorldBank","fetchStatisticFromWorldBank","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","_ref2","receiveStatisticOfCountriesAction","_ref3","initialCountryStatistic","countryStatisticReducer","countryStatistic","omit","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","_ref4","countryStatisticLoadedSelector","_ref5","countryStatisticsLoadedSelector","_ref7","statisticCodes","every","compiledCountryStatisticsSelector","_ref8","_ref11","mapOfStatisticCodes","mapOfStatisticValues","_ref6","countryStatisticValuesSelector","arrayOfStatisticValues","startingYears","statisticValues","min","toConsumableArray","v","endingYears","max","mapOfNamedStatisticValues","mapObjIndexed","compileName","_ref9","defineProperty","allValues","allValuesByYear","groupBy","sort","valuesOfYear","mergeAll","compiledStatisticForCountriesAndYear","_ref12","perCapita","pop","_ref13","yearValue","loadCountryStatistic","_ref14","dispatch","getState","loadCountryStatisticAction","statisticValue","loadCountryStatistics","_ref15","all","loadStatisticOfCountries","loadStatisticOfCountriesAction","getStatisticOfAllCountries","statisticsReducer","acc","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","PropTypes","shape","string","isRequired","number","arrayOf","bool","coordsToLatLng","coords","_coords","slicedToArray","longitude","latitude","L","latLng","dependentCountries","MAP_HEIGHT","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","WorldMap","props","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","indexBy","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","fillColor","fillOpacity","Tooltip","sticky","toLocaleString","stroke","background","backgroundColor","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","formatedData","s","es_select","width","placeholder","optionFilterProp","showSearch","onChange","sortBy","Option","title","slider","defaultValue","onAfterChange","debounce","included","marks","label","margin","left","right","es_radio","Group","marginBottom","buttonStyle","size","e","target","Button","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","href","defaultSortOrder","align","onRow","record","onClick","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","CustomTooltip","active","payload","total","sum","p","dataKey","lineHeight","defaultProps","PrimaryEnergyChart","stacked","setStacked","dataWithTotal","coal","oil","gas","hydro","nuclear","renewables","finalData","w","population","hasCoal","some","hasOil","hasGas","hasNuclear","hasHydro","hasRenewables","LineArea","Area","Line","marginRight","ResponsiveContainer","ComposedChart","top","bottom","dot","activeDot","fill","stackId","CartesianGrid","opacity","XAxis","interval","YAxis","angle","position","component_Tooltip","content","Legend","iconType","ConnectedPrimaryEnergyChart","PrimaryEnergyChartContainer","_this$props","loadStatistics","prevProps","_this$props2","_this$props3","isLoaded","spin","spinning","ProdConsoChart","fuel","prodStatistic","consoStatistic","warn","dataWithImportAndExport","l","diff","prod","conso","export","import","base","strokeOpacity","strokeWidth","offset","props2","ProdConsoChart_CustomTooltip","assign","ConnectedProdConsoChart","prodStatisticCode","consoStatisticCode","ProdConsoChartContainer","CustomGeoJSON","createGeoJSON","remove","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","CountryMap","TileLayer","attribution","CountryMap_GeoJSON","CountryView","Redirect","to","xs","sm","containers_PrimaryEnergyChartContainer","src","toLowerCase","alt","components_CountryMap","ProdConsoCharContainer","match","params","GitHubLink","rel","icon","theme","HeaderMenu","goTo","menu","mode","selectable","Item","Link","onSelect","components_GitHubLink","withLoader","config","loadFunctions","_config$isLoadedSelec","isLoadedSelector","_config$mapStateToPro","mapStateToProps","loadAll","loadFunction","WrappedComponent","ConnectedWrappedComponent","load","_Component","LoaderComponent","inherits","createClass","objectWithoutProperties","otherProps","CountriesLoader","prop","StatisticsLoader","ConnectedHeaderMenu","withRouter","isReady","layout","Header","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1c6daec.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport countriesData from 'world-countries/countries';\nimport worldTopo from 'world-atlas/world/110m.json';\n\nconst noData = ['AD', 'LI', 'MH', 'FM', 'MC', 'PW', 'SM', 'TV', 'VA'];\n\nfunction countryMapValues(country) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.ccn3,\n  );\n  return {\n    id: Number(country.ccn3),\n    alpha2Code: country.cca2,\n    commonName: country.name.common,\n    alpha3Code: country.cca3,\n    numericCode: country.ccn3,\n    region: country.region,\n    subregion: country.subregion,\n    isIndependent: country.independent,\n    area: country.area,\n    capital: country.capital[0], // TODO\n    latlng: country.latlng,\n    disabled: noData.includes(country.cca2),\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nexport function getDependentCountries() {\n  return countriesData.filter(c => !c.independent).map(countryMapValues);\n}\n\nfunction getAllCountries() {\n  return Promise.resolve(\n    countriesData.filter(c => c.independent).map(countryMapValues),\n  );\n}\n\n// getAllCountries().then(data => console.log(data.filter(c => !c.geojson)));\n\nexport default getAllCountries;\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllCountries from '../api/country';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport default countriesReducer;\n","require('isomorphic-fetch');\n\n// eslint-disable-next-line import/prefer-default-export\nexport function retryFetch(url, options, retryCount = 0) {\n  return fetch(url, options)\n    .then(res => res.json())\n    .catch(error => {\n      if (retryCount > 3) {\n        throw error;\n      }\n\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          console.log(`Retry ${url}`);\n          retryFetch(url, options, retryCount + 1)\n            .then(resolve)\n            .catch(reject);\n        }, 3000);\n      });\n    });\n}\n","import { retryFetch } from '../helpers';\n\nconst EIA_API_KEY = '20cf4469dcd5b4da5fc7cb448d9d934e';\nexport const EIA_API = 'EIA_API';\n\nfunction parseValue(value) {\n  if (value === '(s)') {\n    return 0;\n  }\n  // eslint-disable-next-line no-restricted-globals\n  if (isNaN(value)) {\n    return null;\n  }\n  return value;\n}\n\nexport async function fetchStatisticFromEIA(statistic, country) {\n  const seriesId = statistic.seriesOfCountry(country);\n  const data = await retryFetch(\n    `http://api.eia.gov/series/?api_key=${EIA_API_KEY}&series_id=${seriesId}`,\n  );\n\n  if (\n    data.data &&\n    data.data.error &&\n    data.data.error.startsWith('invalid series_id')\n  ) {\n    return [];\n  }\n\n  return data.series[0].data.map(d => {\n    const value = parseValue(d[1]);\n    return {\n      year: Number(d[0]),\n      value: value !== null ? statistic.unitConverter(value) : null,\n    };\n  });\n}\n","import { retryFetch } from '../helpers';\n\nexport const IEA_API = 'IEA_API';\nconst cache = {};\n\nexport function fetchStatisticFromIEA(statistic, country) {\n  const { ieaId } = statistic;\n\n  if (!cache[ieaId]) {\n    cache[ieaId] = retryFetch(\n      `http://energyatlas.iea.org/DataServlet?edition=WORLD&lang=en&datasets=${ieaId}&cmd=getdatavalues`,\n    )\n      .then(data => data.datasets[ieaId].values)\n      .then(years =>\n        Object.keys(years).reduce((map1, year) => {\n          const countriesOfYear = years[year];\n\n          return Object.keys(countriesOfYear).reduce(\n            (map, countryAlpha3Code) => {\n              const { value } = countriesOfYear[countryAlpha3Code];\n              const item = { year: Number(year), value };\n\n              if (map[countryAlpha3Code]) {\n                map[countryAlpha3Code].push(item);\n              } else {\n                // eslint-disable-next-line no-param-reassign\n                map[countryAlpha3Code] = [item];\n              }\n              return map;\n            },\n            map1,\n          );\n        }, {}),\n      );\n  }\n\n  return cache[ieaId].then(\n    countryValues => countryValues[country.alpha3Code] || [],\n  );\n}\n","import { retryFetch } from '../helpers';\n\nexport const WORLD_BANK_API = 'WORLD_BANK_API';\n\nexport async function fetchStatisticFromWorldBank(statistic, country) {\n  const { worldBankCode, unitConverter = i => i } = statistic;\n\n  const data = await retryFetch(\n    `http://api.worldbank.org/v2/countries/${\n      country.alpha2Code\n    }/indicators/${worldBankCode}?format=json&per_page=100`,\n  );\n\n  if (!data[1]) {\n    return [];\n  }\n\n  return data[1].map(object => ({\n    statisticCode: statistic.code,\n    countryCode: country.alpha2Code,\n    year: Number(object.date),\n    value: unitConverter(object.value),\n  }));\n}\n","// eslint-disable-next-line camelcase\nexport function convert_TWh_to_Mtoe(twh) {\n  return twh / 11.63;\n}\n\n// eslint-disable-next-line camelcase\nexport function generationToConsumption(value) {\n  return value / 0.38;\n}\n","import { EIA_API } from './eiaApi';\nimport { IEA_API } from './ieaApi';\nimport { WORLD_BANK_API } from './worldBankApi';\n\n// eslint-disable-next-line camelcase\nimport { convert_TWh_to_Mtoe, generationToConsumption } from './converters';\n\nconst statistics = [\n  {\n    code: 'COAL_PRODUCTION_MTOE',\n    name: 'Coal production',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2016, // TODO\n    unit: 'Mtoe',\n    baseUnit: 'toe',\n    unitFactor: 10 ** 6,\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.7-1-${country.alpha3Code}-MTOE.A`,\n    unitConverter: value => Number(value.toFixed(2)),\n  },\n  {\n    code: 'COAL_CONSUMPTION_MTOE',\n    name: 'Coal consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2016, // TODO\n    unit: 'Mtoe',\n    baseUnit: 'toe',\n    unitFactor: 10 ** 6,\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.7-2-${country.alpha3Code}-MTOE.A`,\n    unitConverter: value => Number(value.toFixed(2)),\n  },\n  {\n    code: 'GAS_PRODUCTION_MTOE',\n    name: 'Gas production',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2017,\n    unit: 'Mtoe',\n    baseUnit: 'toe',\n    unitFactor: 10 ** 6,\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.26-1-${country.alpha3Code}-MTOE.A`,\n    unitConverter: value => Number(value.toFixed(2)),\n  },\n  {\n    code: 'GAS_CONSUMPTION_MTOE',\n    name: 'Gas consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2017,\n    unit: 'Mtoe',\n    baseUnit: 'toe',\n    unitFactor: 10 ** 6,\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.26-2-${country.alpha3Code}-MTOE.A`,\n    unitConverter: value => Number(value.toFixed(2)),\n  },\n  {\n    code: 'OIL_PRODUCTION_MTOE',\n    name: 'Oil production',\n    description: '',\n    startingYear: 1973,\n    endingYear: 2014,\n    unit: 'Mtoe',\n    baseUnit: 'toe',\n    unitFactor: 10 ** 6,\n    sources: 'IEA',\n    api: IEA_API,\n    ieaId: '-21319742',\n  },\n  {\n    code: 'OIL_CONSUMPTION_MTOE',\n    name: 'Oil consumption',\n    description: '',\n    startingYear: 1973,\n    endingYear: 2014,\n    unit: 'Mtoe',\n    baseUnit: 'toe',\n    unitFactor: 10 ** 6,\n    sources: 'IEA',\n    api: IEA_API,\n    ieaId: '642753284',\n  },\n  {\n    code: 'HYDRO_CONSUMPTION_MTOE',\n    name: 'Hydroelectricity consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2016,\n    unit: 'Mtoe',\n    baseUnit: 'toe',\n    unitFactor: 10 ** 6,\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.33-12-${country.alpha3Code}-BKWH.A`,\n    unitConverter: value =>\n      Number(generationToConsumption(convert_TWh_to_Mtoe(value)).toFixed(2)),\n  },\n  {\n    code: 'NUCLEAR_CONSUMPTION_MTOE',\n    name: 'Nuclear consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2016,\n    unit: 'Mtoe',\n    baseUnit: 'toe',\n    unitFactor: 10 ** 6,\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.27-12-${country.alpha3Code}-BKWH.A`,\n    unitConverter: value =>\n      Number(generationToConsumption(convert_TWh_to_Mtoe(value)).toFixed(2)),\n  },\n  {\n    code: 'NON_HYDRO_RENEWABLES_CONSUMPTION_MTOE',\n    name: 'Non-Hydroelectric renewables consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2016,\n    unit: 'Mtoe',\n    baseUnit: 'toe',\n    unitFactor: 10 ** 6,\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.34-12-${country.alpha3Code}-BKWH.A`,\n    unitConverter: value =>\n      Number(generationToConsumption(convert_TWh_to_Mtoe(value)).toFixed(2)),\n  },\n  {\n    code: 'WASTE_BIOMASS_CONSUMPTION_MTOE',\n    name: 'Waste and biomass consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2016,\n    unit: 'Mtoe',\n    baseUnit: 'toe',\n    unitFactor: 10 ** 6,\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.38-12-${country.alpha3Code}-BKWH.A`,\n    unitConverter: value =>\n      Number(generationToConsumption(convert_TWh_to_Mtoe(value)).toFixed(2)),\n  },\n  {\n    code: 'PRIMARY_ENERGY_MTOE',\n    name: 'Primary energy consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2013,\n    unit: 'Mtoe',\n    baseUnit: 'toe',\n    unitFactor: 10 ** 6,\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.44-2-${country.alpha3Code}-MTOE.A`,\n    unitConverter: value => Number(value.toFixed(2)),\n  },\n  {\n    code: 'POPULATION',\n    name: 'Population',\n    description: '',\n    startingYear: 1960,\n    endingYear: 2017,\n    unit: 'capita',\n    baseUnit: 'capita',\n    sources: 'World Bank',\n    api: WORLD_BANK_API,\n    worldBankCode: 'SP.POP.TOTL',\n  },\n  {\n    code: 'GDP_2010_USD',\n    name: 'Gross Domestic Product',\n    description: '',\n    startingYear: 1960,\n    endingYear: 2017,\n    unit: 'million 2010 USD',\n    baseUnit: '2010 $',\n    unitFactor: 10 ** 6,\n    sources: 'World Bank',\n    api: WORLD_BANK_API,\n    worldBankCode: 'NY.GDP.MKTP.KD',\n    unitConverter: value => Number((value / 10 ** 6).toFixed(2)),\n  },\n  {\n    code: 'CO2_EMISSIONS_GT',\n    name: 'CO2 Emissions',\n    description: '',\n    startingYear: 1960,\n    endingYear: 2014,\n    unit: 'Mtonnes',\n    baseUnit: 'tonnes',\n    unitFactor: 10 ** 6,\n    sources: 'World Bank',\n    api: WORLD_BANK_API,\n    worldBankCode: 'EN.ATM.CO2E.KT',\n    unitConverter: value => Number((value / 10 ** 3).toFixed(2)),\n  },\n];\n\nexport default statistics;\n","import { retryFetch } from '../helpers';\n\nimport { EIA_API, fetchStatisticFromEIA } from './eiaApi';\nimport { IEA_API, fetchStatisticFromIEA } from './ieaApi';\nimport { WORLD_BANK_API, fetchStatisticFromWorldBank } from './worldBankApi';\nimport statistics from './statistics';\n\nexport function getAllStatistics() {\n  return Promise.resolve(statistics);\n}\n\n// TODO statisticCode ?\nexport function getStatisticOfCountry(statistic, country) {\n  switch (statistic.api) {\n    case EIA_API:\n      return fetchStatisticFromEIA(statistic, country);\n    case IEA_API:\n      return fetchStatisticFromIEA(statistic, country);\n    case WORLD_BANK_API:\n      return fetchStatisticFromWorldBank(statistic, country);\n    default:\n      return Promise.resolve([]);\n  }\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return retryFetch(`data/${statisticCode}.json`);\n}\n","import {\n  values,\n  indexBy,\n  prop,\n  mapObjIndexed,\n  mergeAll,\n  groupBy,\n  map,\n  omit,\n} from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfCountry,\n  getStatisticOfAllCountries,\n} from '../api/statistics';\nimport { countrySelector, countriesSelector } from './countries';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(\n  { statisticCodes, countryCode },\n  state,\n) {\n  return statisticCodes.every(statisticCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }),\n  );\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfStatisticCodes, countryCode },\n  state,\n) {\n  const mapOfStatisticValues = map(\n    statisticCode =>\n      countryStatisticValuesSelector({ statisticCode, countryCode }, state),\n    mapOfStatisticCodes,\n  );\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => {\n      const valuesOfYear = allValuesByYear[year];\n\n      return mergeAll(valuesOfYear);\n    })\n    .filter(value => startingYear <= value.year && value.year <= endingYear);\n\n  return compiledStatistics;\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countries = countriesSelector(state);\n  const statistic = statisticSelector(statisticCode, state);\n  const mapOfStatisticCodes = {\n    value: statisticCode,\n    ...(perCapita ? { pop: 'POPULATION' } : {}),\n  };\n\n  return countries.map(({ alpha2Code: countryCode }) => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfStatisticCodes, countryCode },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n    // TODO\n    const value = yearValue && yearValue.value !== null && (yearValue.pop || !perCapita) // eslint-disable-line\n        ? perCapita\n          ? (yearValue.value * statistic.unitFactor) / yearValue.pop\n          : yearValue.value\n        : null;\n\n    return {\n      countryCode,\n      value,\n    };\n  });\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n    const country = countrySelector(countryCode, state);\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statistic, country)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics({ statisticCodes, countryCode }) {\n  return function dispatchloadCountryStatistics(dispatch, getState) {\n    return Promise.all(\n      statisticCodes.map(statisticCode =>\n        loadCountryStatistic({ statisticCode, countryCode })(\n          dispatch,\n          getState,\n        ),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const countries = countriesSelector(getState());\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        getState(),\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n\nexport default statisticsReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.string.isRequired,\n  baseUnit: PropTypes.string.isRequired,\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n","import L from 'leaflet';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\n// function bindEvent(countries, onCountryClick) {\n//   return function onEachFeature(feature, layer) {\n//     const country = countries.find(c => c.numericCode === feature.id);\n//     layer.on({\n//       click: () => onCountryClick(country),\n//     });\n//   };\n// }\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { getDependentCountries } from '../../../api/country';\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { coordsToLatLng } from '../../../utils';\n\nconst dependentCountries = getDependentCountries();\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value: 'NA' };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value: 0 };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const { countries, data, currentStatistic, currentYear, perCapita } = props;\n  const maxValue = Math.max(...data.map(d => d.value));\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${value.toLocaleString()}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              stroke: false,\n              fillColor: NA_COLOR,\n              color: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div className=\"WorldMap__legend__gradient\">\n          <div>\n            {`${currentStatistic.name} (${\n              perCapita\n                ? `${currentStatistic.baseUnit}/capita`\n                : currentStatistic.unit\n            })`}\n          </div>\n          <div\n            className=\"WorldMap__legend__gradientColor\"\n            style={{\n              background: colorGradient,\n            }}\n          />\n          <div className=\"WorldMap__legend__gradientRange\">\n            <div>0</div>\n            <div>{maxValue.toLocaleString()}</div>\n          </div>\n        </div>\n        <div>\n          <div>{' '}</div>\n          <div\n            className=\"WorldMap__legend__NA__square\"\n            style={{ backgroundColor: NA_COLOR }}\n          />\n          <div>NA</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy } from 'ramda';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country: countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch\n        onChange={value => setStatistic(value)}\n      >\n        {sortBy(s => s.name, statistics).map(statistic => (\n          <Select.Option key={statistic.code} title={statistic.name}>\n            {`${statistic.name}`}\n          </Select.Option>\n        ))}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <Radio.Group\n        style={{ marginBottom: '10px' }}\n        buttonStyle=\"solid\"\n        size=\"small\"\n        value={perCapita}\n        onChange={e => setPerCapita(e.target.value)}\n      >\n        <Radio.Button value={false}>Absolute</Radio.Button>\n        <Radio.Button value disabled={currentStatistic.code === 'POPULATION'}>\n          Per capita\n        </Radio.Button>\n      </Radio.Group>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n          render: text => <a href=\"javascript:;\">{text}</a>, // eslint-disable-line\n          },\n          {\n            title: perCapita\n              ? `${currentStatistic.baseUnit}/capita`\n              : currentStatistic.unit,\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: value => value.toLocaleString(),\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport { countriesSelector } from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n} from '../../store/statistics';\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { map, omit } from 'ramda';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { Radio } from 'antd';\n\nfunction CustomTooltip(props) {\n  const { active, payload } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label } = props;\n    const { unit } = payload[0];\n    const total = payload.reduce((sum, { value }) => sum + value, 0);\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${p.value.toLocaleString()} ${p.unit}`}\n              </div>\n            ))}\n          <div key=\"total\" style={{ lineHeight: '22px', color: 'red' }}>\n            {`Total : ${Number(total.toFixed(2)).toLocaleString()} ${unit}`}\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n};\n\nfunction PrimaryEnergyChart(props) {\n  const { data, stacked, setStacked, perCapita, setPerCapita } = props;\n  const unit = perCapita ? ' toe/capita' : ' Mtoe';\n\n  const dataWithTotal = data.map(v => ({\n    ...v,\n    total: Number(\n      (v.coal + v.oil + v.gas + v.hydro + v.nuclear + v.renewables).toFixed(2),\n    ),\n  }));\n  const finalData = perCapita\n    ? dataWithTotal.map(v => ({\n        ...v,\n        ...map(\n          w => Number(((w * 10 ** 6) / v.population).toFixed(2)),\n          omit(['year', 'population'], v),\n        ),\n      }))\n    : dataWithTotal;\n\n  const hasCoal = data.some(v => v.coal >= 0.01);\n  const hasOil = data.some(v => v.oil >= 0.01);\n  const hasGas = data.some(v => v.gas >= 0.01);\n  const hasNuclear = data.some(v => v.nuclear >= 0.01);\n  const hasHydro = data.some(v => v.hydro >= 0.01);\n  const hasRenewables = data.some(v => v.renewables >= 0.01);\n\n  const LineArea = stacked ? Area : Line;\n\n  return (\n    <div className=\"PrimaryEnergyChart\">\n      <h3 className=\"PrimaryEnergyChart__title\">Primary Energy Consumption</h3>\n      <div>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={stacked}\n          onChange={e => setStacked(e.target.value)}\n          style={{ marginRight: '10px' }}\n        >\n          <Radio.Button value>Stacked</Radio.Button>\n          <Radio.Button value={false}>Split</Radio.Button>\n        </Radio.Group>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button value>Per capita</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ResponsiveContainer height={300} width=\"100%\">\n        <ComposedChart\n          data={finalData}\n          margin={{ top: 10, right: 0, bottom: 10, left: 0 }}\n        >\n          {hasCoal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasOil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasGas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasNuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasHydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasRenewables && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"renewables\"\n              dot={false}\n              activeDot={false}\n              name=\"Other renewables\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            label={{\n              value: unit,\n              angle: -90,\n              position: 'insideLeft',\n            }}\n          />\n          <Tooltip content={CustomTooltip} />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nPrimaryEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      renewables: PropTypes.number,\n      total: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default PrimaryEnergyChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport PrimaryEnergyChart from '../components/PrimaryEnergyChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst mapOfStatisticCodes = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_CONSUMPTION_MTOE',\n  nuclear: 'NUCLEAR_CONSUMPTION_MTOE',\n  renewables: 'NON_HYDRO_RENEWABLES_CONSUMPTION_MTOE',\n  population: 'POPULATION',\n};\nconst statisticCodes = values(mapOfStatisticCodes);\n\nconst ConnectedPrimaryEnergyChart = connect((state, { countryCode }) => ({\n  data: compiledCountryStatisticsSelector(\n    {\n      mapOfStatisticCodes,\n      countryCode,\n    },\n    state,\n  ),\n}))(PrimaryEnergyChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stacked: true,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { countryCode, loadStatistics } = this.props;\n\n    loadStatistics({ statisticCodes, countryCode });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistics } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  setStacked(stacked) {\n    this.setState({ stacked });\n  }\n\n  setPerCapita(perCapita) {\n    this.setState({ perCapita });\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n    const { stacked, perCapita } = this.state;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedPrimaryEnergyChart\n          countryCode={countryCode}\n          setStacked={value => this.setStacked(value)}\n          setPerCapita={value => this.setPerCapita(value)}\n          stacked={stacked}\n          perCapita={perCapita}\n        />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded: countryStatisticsLoadedSelector(\n      {\n        statisticCodes,\n        countryCode: props.countryCode,\n      },\n      state,\n    ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(PrimaryEnergyChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\n\nfunction CustomTooltip(props) {\n  const { active } = props;\n\n  if (active) {\n    const { payload, label, filter } = props;\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.filter(filter).map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${p.value.toLocaleString()} ${p.unit}`}\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n  filter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  filter: i => i,\n};\n\nfunction ProdConsoChart(props) {\n  const {\n    fuel,\n    prodStatistic,\n    consoStatistic,\n    // reservesStatistic,\n    data,\n  } = props;\n\n  if (consoStatistic.unit !== prodStatistic.unit) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const { unit } = consoStatistic;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <h3>{fuel}</h3>\n      <ResponsiveContainer height={250} width=\"100%\">\n        <ComposedChart\n          data={dataWithImportAndExport}\n          margin={{ top: 30, right: 20, bottom: 5, left: 20 }}\n        >\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={1}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={1}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#880000\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          {/* {reservesStatisticCode && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reserves\"\n              dot={false}\n              unit={reservesStatistic.unit}\n              stroke=\"blue\"\n              strokeWidth={3}\n              strokeOpacity={0.7}\n              name={reservesStatistic.name}\n              yAxisId=\"1\"\n            />\n          )} */}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis\n            label={{ value: unit, position: 'insideTopLeft', offset: -20 }}\n          />\n          {/* {reservesStatisticCode && (\n            <YAxis\n              orientation=\"right\"\n              label={{\n                value: reservesStatistic.unit,\n                position: 'insideTopRight',\n                offset: -20,\n              }}\n              yAxisId=\"1\"\n            />\n          )} */}\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip {...props2} filter={p => p.name !== 'base'} />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nconst Statistic = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.string.isRequired,\n});\n\nProdConsoChart.propTypes = {\n  prodStatistic: Statistic.isRequired,\n  consoStatistic: Statistic.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Spin } from 'antd';\n\nimport ProdConsoChart from '../components/ProdConsoChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst ConnectedProdConsoChart = connect((state, props) => ({\n  prodStatistic: statisticSelector(props.prodStatisticCode, state),\n  consoStatistic: statisticSelector(props.consoStatisticCode, state),\n  data: compiledCountryStatisticsSelector(\n    {\n      mapOfStatisticCodes: {\n        prod: props.prodStatisticCode,\n        conso: props.consoStatisticCode,\n      },\n      countryCode: props.countryCode,\n    },\n    state,\n  ),\n}))(ProdConsoChart);\n\nclass ProdConsoChartContainer extends Component {\n  componentDidMount() {\n    const {\n      consoStatisticCode,\n      prodStatisticCode,\n      countryCode,\n      loadStatistics,\n    } = this.props;\n    const statisticCodes = [consoStatisticCode, prodStatisticCode];\n    loadStatistics({ statisticCodes, countryCode });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      countryCode,\n      loadStatistics,\n      consoStatisticCode,\n      prodStatisticCode,\n    } = this.props;\n    const statisticCodes = [consoStatisticCode, prodStatisticCode];\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  render() {\n    const {\n      isLoaded,\n      fuel,\n      consoStatisticCode,\n      prodStatisticCode,\n      countryCode,\n    } = this.props;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedProdConsoChart\n          fuel={fuel}\n          consoStatisticCode={consoStatisticCode}\n          prodStatisticCode={prodStatisticCode}\n          countryCode={countryCode}\n        />\n      </Spin>\n    );\n  }\n}\n\nProdConsoChartContainer.propTypes = {\n  prodStatisticCode: PropTypes.string.isRequired,\n  consoStatisticCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  fuel: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded: countryStatisticsLoadedSelector(\n      {\n        statisticCodes: [props.prodStatisticCode, props.consoStatisticCode],\n        countryCode: props.countryCode,\n      },\n      state,\n    ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(ProdConsoChartContainer);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../../../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction CountryMap(props) {\n  const { country } = props;\n\n  return (\n    <div className=\"CountryMap\">\n      <Map\n        center={country.latlng}\n        zoom={2}\n        style={{ height: '300px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {country.geojson && <GeoJSON data={country.geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nCountryMap.propTypes = {\n  country: PropTypes.shape({\n    latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n    area: PropTypes.number.isRequired,\n    geojson: PropTypes.object.isRequired,\n  }).isRequired,\n};\n\nexport default CountryMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Redirect } from 'react-router-dom';\n\nimport { Row, Col } from 'antd';\n\nimport { countrySelector } from '../../store/countries';\n\nimport PrimaryEnergyChartContainer from './containers/PrimaryEnergyChartContainer';\nimport ProdConsoChartContainer from './containers/ProdConsoCharContainer';\nimport CountryMap from './components/CountryMap';\n\nfunction CountryView(props) {\n  const { country } = props;\n\n  if (!country || country.disabled) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const countryCode = country.alpha2Code;\n  return (\n    <div className=\"CountryView\">\n      <Row gutter={16} style={{ marginBottom: '20px' }}>\n        <Col xs={24} sm={24} md={18}>\n          <h2>{country.commonName}</h2>\n          <div>{`Capital: ${country.capital}`}</div>\n          <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n          <div>\n            <PrimaryEnergyChartContainer countryCode={country.alpha2Code} />\n          </div>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <img\n            style={{ height: '100px' }}\n            src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n            alt={`Flag of ${country.commonName}`}\n          />\n          <CountryMap country={country} />\n        </Col>\n      </Row>\n      <Row>\n        <h3>Imports/Exports</h3>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n            fuel=\"Coal\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n            fuel=\"Oil\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n            consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n            fuel=\"Gas\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nCountryView.propTypes = {\n  country: PropTypes.shape({\n    alpha2Code: PropTypes.string.isRequired,\n    commonName: PropTypes.string.isRequired,\n  }),\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countrySelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType } from '../utils/types';\n\nfunction HeaderMenu(props) {\n  const { countries, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { loadAllCountries } from '../store/countries';\nimport {\n  loadAllStatistics,\n  loadStatisticOfCountries,\n} from '../store/statistics';\n\nexport function withLoader(config) {\n  const {\n    loadFunctions,\n    isLoadedSelector = () => false,\n    mapStateToProps = () => {},\n  } = config;\n\n  const loadAll = props => (dispatch, getState) =>\n    loadFunctions.map(loadFunction => loadFunction(props)(dispatch, getState));\n\n  return function wrapLoaderHOC(WrappedComponent) {\n    const ConnectedWrappedComponent = WrappedComponent\n      ? connect(mapStateToProps)(WrappedComponent)\n      : () => null;\n\n    return connect(\n      (state, props) => ({\n        isLoaded: isLoadedSelector(props, state),\n      }),\n      { load: loadAll },\n    )(\n      class LoaderComponent extends Component {\n        static propTypes = {\n          load: PropTypes.func.isRequired,\n          isLoaded: PropTypes.bool.isRequired,\n        };\n\n        componentDidMount() {\n          const { load, isLoaded, ...args } = this.props;\n          load(args);\n        }\n\n        render() {\n          const { isLoaded, load, ...otherProps } = this.props;\n\n          if (!isLoaded) {\n            return null;\n          }\n          return <ConnectedWrappedComponent {...otherProps} />;\n        }\n      },\n    );\n  };\n}\n\nexport const CountriesLoader = withLoader({\n  loadFunctions: [loadAllCountries],\n})();\n\nexport const StatisticsLoader = withLoader({\n  loadFunctions: [loadAllStatistics],\n})();\n\nexport const StatisticAllCountriesLoader = withLoader({\n  loadFunctions: [\n    ({ statisticCode }) => loadStatisticOfCountries(statisticCode),\n  ],\n})();\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport { CountriesLoader, StatisticsLoader } from '../loaders';\n\nimport { countriesLoadedSelector, countriesSelector } from '../store/countries';\nimport { statisticsLoadedSelector } from '../store/statistics';\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isReady } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      {!isReady && <Spin size=\"large\" />}\n      {isReady && (\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            <Switch>\n              <Route path=\"/home\" exact component={HomeView} />\n              <Route\n                path=\"/country/:countryCode\"\n                exact\n                component={CountryView}\n              />\n              <Route\n                component={() => <Redirect to={{ pathname: '/home' }} />}\n              />\n            </Switch>\n          </Layout.Content>\n          <Layout.Footer>Sources: IEA, EIA, World Data Bank</Layout.Footer>\n        </Layout>\n      )}\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isReady: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isReady: countriesLoadedSelector(state) && statisticsLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}