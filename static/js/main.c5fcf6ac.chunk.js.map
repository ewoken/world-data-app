{"version":3,"sources":["api/countries.js","store/countries.js","utils/index.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","api/areas.js","store/areas.js","store/index.js","components/ScrollToTop.jsx","utils/types.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/ControlledSlider.jsx","components/StatisticDetails.jsx","utils/copyToClipboard.js","components/ShareChartComponent.jsx","views/HomeView/components/StatisticExplorer.jsx","views/CountryView/components/CustomTooltip.jsx","views/HomeView/components/HDIByEnergyChart.jsx","HOC/components/ChartSettings.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","HOC/buildChart.jsx","views/HomeView/containers/HDIByEnergyChartContainer.jsx","views/HomeView/index.jsx","store/otherSelectors.js","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.jsx","components/GeoJSONMap.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/GDPByEnergyChart.jsx","views/CountryView/components/RentsChart.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SettingsComponent.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/components/ReservesAndPeaksTab.jsx","views/CountryView/components/TabsComponent.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","views/AreaView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","components/AnalyticsComponent.jsx","App.jsx","serviceWorker.js","index.js"],"names":["countryMapValues","country","worldTopo","a","objects","countries","geometries","find","c","id","numericCode","geojson","feature","bounds","L","geoJSON","getBounds","Object","objectSpread","_callee","_ref","_ref2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","map","p","then","res","json","sent","slicedToArray","abrupt","stop","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","defaultIndicators","coal","oil","gas","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","countriesInBounds","boundsFilter","intersects","dependentCountriesSelector","countrySelector","countryCode","areas","fuelConsumedCountrySelector","hasConsumed","fuelProducedCountrySelector","hasProduced","fuelProducedOrConsumedCountrySelector","mapObjIndexed","v","k","countriesReducer","arguments","length","undefined","action","coordsToLatLng","coords","_coords","longitude","latitude","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","value","Number","isNaN","toPrecision","toLocaleString","tickFormatter","displayUnit","unit","perCapita","concat","base","main","parseMapOfStatistics","mapOfCountryStatistics","defaultCountry","statistics","statisticCode","addPopCountryStatistics","countryCodes","uniq","d","populations","mergeAll","defineProperty","clickHandlers","onClick","onDoubleClick","clicks","_len2","args","Array","_key2","setTimeout","apply","maxAndIndex","array","reduce","i","max","maxIndex","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","statistic","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref4","yearInterval","compiledCountryStatisticsSelector","_ref3","year","sources","objectWithoutProperties","isFinite","computeDerivedValueFromCompiled","interval","startingYear","endingYear","statisticOfAllCountriesLoadedSelector","alpha2Code","fn","hashFunction","JSON","stringify","cacheSize","cache","_len","_key","hash","hashes","keys","memoize","_ref5","_ref9","baseMap","inputYearInterval","parsedMapOfCountryStatistics","mapOfStatistic","_ref6","nullValues","startingYears","endingYears","Math","toConsumableArray","min","computeYearInterval","mapOfStatisticValues","mapOfNamedStatisticValues","statisticValues","compileName","_ref7","allValues","allValuesByYear","groupBy","range","sort","compiledValue","_ref10","cc","popCompileName","population","factor","populationFactor","computeValue","isIntensive","compiledStatisticForCountriesAndYear","_ref11","input","_ref11$perCapita","_ref11$withWorld","withWorld","push","yearValue","statisticSourcesSelector","statisticCodes","statisticSources","code","PEAK_THRESHOLD","MAY_PEAK_THRESHOLD","YEAR_AROUND_PEAK","statisticPeakYearSelector","dataLength","_maxAndIndex","maxData","lastValue","firstValue","hasPeakValue","sure","before","fetchJSON","url","options","PERCENTAGE_UNIT","MTOE_UNIT","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","derivedStatistics","name","description","consumption","production","sourceAttribution","category","energy","gdp","co2","scale","geothSolarWindTide","_ref8","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","countryStatistics","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","initialCountryStatistic","countryStatisticReducer","omit","statisticsReducer","acc","WORLD","indexedCountries","indexBy","cca2","countriesData","SU","ccn3","computeGeojson","area","countryAlpha3Codes","includes","merge","commonName","AREAS_LOAD_ACTION","AREAS_RECEIVE_ACTION","receiveAreasAction","areasLoadedSelector","areasSelector","areasReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","actionSanitizer","stateSanitizer","store","createStore","ScrollToTop","scrollTo","prevProps","equals","this","props","Component","CountryType","PropTypes","shape","string","isRequired","alpha3Code","capital","number","latlng","arrayOf","object","MAP_HEIGHT","bool","sourceUrl","sourceDescriptionUrl","pathname","search","NA_COLOR","BORDER_COLOR","LEGEND_COLORS_COUNT","LEGEND_WIDTH","interpolator","d3Colors","WorldMap","selectedCountries","dependentCountries","currentStatistic","currentYear","minZoom","onMapChange","selectedCountryByCode","selectedData","maxValue","colorValueMap","scaleString","minValue","valueMap","scaleLinear","scaleLog","domain","color","computeColorMap","react_default","createElement","className","Map","zoom","zoomSnap","zoomDelta","center","style","height","zIndex","dragging","onZoomend","onMoveend","countryData","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","width","background","backgroundColor","defaultProps","ControlledSlider","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","defaultValue","setState","nextProps","onChange","_this2","slider","assign","setValue","StatisticDetails","descriptionLines","split","popover","title","arrowPointAtCenter","overlayStyle","maxWidth","content","stat","href","target","rel","placement","es_button","size","icon","marginRight","copyTextToClipboard","text","element","clipboard","writeText","body","textArea","document","appendChild","focus","select","successful","execCommand","removeChild","resolve","reject","Error","err","fallbackCopyTextToClipboard","ShareChartComponent","chartRef","query","location","noHash","dropdown","overlay","menu","domElement","offsetHeight","padding","offsetWidth","classFiltered","classList","add","domToImage","toBlob","bgcolor","transform","blob","remove","chartToPngBlob","current","saveAs","message","error","compileNames","headers","dataLines","dataItem","csv","l","join","Blob","origin","link","copyToClipboard","success","Item","theme","withRouter","WITH_SCALE_SETTINGS","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","mapRef","setScale","countryByCode","formatedData","s","statisticByCategory","es_select","placeholder","optionFilterProp","showSearch","stats","OptGroup","label","sortBy","Option","components_ControlledSlider","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","e","Button","disabled","components_ShareChartComponent","replace","qs","components_StatisticDetails","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","defaultSortOrder","align","onRow","record","CustomTooltip","active","separator","payload","withTotal","labelColor","displayFilter","totalFilter","units","filteredPayload","_payload$","_payload$$formatter","formatter","total","sum","totalUnit","fontWeight","_p$formatter","dataKey","RESOLUTION","COLORS","Africa","Europe","Americas","Asia","Oceania","legend","toPairs","DISPLAYED_COUNTRIES","HDIByEnergyChart","finalData","hdi","r","log","region","dataArray","equation","regression","logarithmic","data2","es6","bottom","line","stroke","props2","cx","cy","fill","position","opacity","top","wrapperStyle","visibility","components_CustomTooltip","0","1","verticalAlign","ChartSettings","perCapitaSwitch","stackedSwitch","stacked","setStacked","es_switch","checked","Loader","_this$props","load","prevOtherProps","_this$props2","otherProps","buildLoader","loadFunction","connect","StatisticsLoader","defaultSelector","mapStateToProps","mapOfCountryStatisticsInput","withReference","_props$referenceCount","referenceCountryCode","reference","mapOfCountryStatisticsToLoad","countryStatisticsToLoad","countryStatitics","countryStatisticsLoadedSelector","referenceCountry","withCountryStatistics","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","spin","spinning","defaultHeight","buildChartWrapper","WrappedChart","_Component","ChartWrapper","React","createRef","buttonRef","inherits","createClass","hasSettings","statisticList","toLowerCase","descriptionStatistic","finalDescription","boxShadow","data-html2canvas-ignore","components_ChartSettings","buildChart","_options$perCapitaSwi","_options$stackedSwitc","_options$height","hocs","withStateHandlers","_ref$defaultPerCapita","defaultPerCapita","_ref$defaultStacked","defaultStacked","compose","STATISTICS_MAP","STATISTICS_CODES","HDIByEnergyChartLoader","loadStatistic","components_HDIByEnergyChart","HDIByEnergyChartContainer","f","ConnectedWorldMap","ConnectedStatisticExplorer","HomeView","setFilterBounds","getZoom","parameters","_this$props3","goTo","newPerCapita","newParameters","_this$props4","_this$state","components_ScrollToTop","row","gutter","md","col","setParameters","marginTop","containers_HDIByEnergyChartContainer","queryObject","parse","path","history","countryWithAreasSelector","areasOfCountrySelector","areaWithCountriesSelector","areaCode","areaSelector","countriesAndAreasSelector","BasicChart","extra","withComparison","strokeWidth","dot","iconType","CustomGeoJSON","createGeoJSON","leaflet","addTo","flyToBounds","withLeaflet","GeoJSONMap","boxZoom","doubleClickZoom","scrollWheelZoom","zoomControl","TileLayer","attribution","GeoJSONMap_GeoJSON","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","console","warn","dataWithImportAndExport","diff","toFixed","export","import","stackId","activeDot","strokeOpacity","GDPByEnergyChart","dataMin","floor","dataMax","ceil","DEFAULT_AREA_PROPS","AREA_PROPS","FUELS","RentsChart","displayedFuel","some","RentsChartContainer","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","GDPByEnergyChartContainer","IndependencyTab","fuelProducedOrConsumed","hasRents","sm","BasicChartContainer","REFERENCE_DATAKEY","defaultLineAreaProps","isAnimationActive","lineAreaPropsMap","legendPayload","inactive","alpha","cssa","getLegendPayload","fuelConsumed","displayedStats","EnergyMixChart","toggleStat","setDisplayedStats","coalUnit","LineArea","Area","Line","lineAreaProps","fuelProps","displayedFuels","chartMax","ticks","getNiceTickValues","pop","getTicksAndDomain","EnergyMixChartWithState","bind","assertThisInitialized","initDone","init","newProps","toggledStat","components_EnergyMixChart","EnergyMixChartBuilded","EnergyMixChartContainer","SettingsComponent","setReferenceCountry","onSelect","primaryMap","primaryReference","electrictyMap","electricityReference","ConnectedSettingsComponent","SummaryTab","containers_EnergyMixChartContainer","ClimateTab","ClimateTab_ConnectedSettingsComponent","PeakReference","peak","strokeDasharray","isFront","PeakText","textAlign","ReservesAndPeaksTab","fuelProduced","peaks","tabList","tab","tabContents","summary","independency","climate","reserves","TabsComponent","currentTab","onTabChange","TabComponent","tabs","card","activeTabKey","TabsComponentWithState","withState","CountryView","Redirect","to","flag","flagIcon","xs","Link","lg","maxHeight","src","alt","components_GeoJSONMap","match","params","AboutView","AreaView","AreaView_TabsComponentWithState","GitHubLink","HeaderMenu","mode","selectable","lineHeight","SubMenu","components_GitHubLink","CountriesLoader","prop","AreasLoader","_getAreas","getAllAreas","ConnectedHeaderMenu","scrollToAnchor","getElementById","scrollIntoView","behavior","block","inline","AppLayout","onhashchange","AppLayout_StatisticsLoader","layout","Header","Content","Switch","Route","exact","component","Footer","tracker","ga","initialize","siteSpeedSampleRate","AnalyticsComponent","trackPage","set","pageview","children","withProps","App","es","HashRouter","components_AnalyticsComponent","components_AppLayout","Boolean","hostname","ReactDOM","src_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c5fcf6ac.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport L from 'leaflet';\n\nfunction countryMapValues(country, worldTopo) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  const geojson = a && feature(worldTopo, a);\n  const bounds = a && L.geoJSON(geojson).getBounds();\n  return {\n    ...country,\n    geojson,\n    bounds,\n  };\n}\n\nasync function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [fetch('/data/countries.json'), fetch('/data/worldTopo.json')].map(p =>\n      p.then(res => res.json()),\n    ),\n  );\n  return countries.map(country => countryMapValues(country, worldTopo));\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop, mapObjIndexed } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nconst defaultIndicators = {\n  // for areas\n  coal: true,\n  oil: true,\n  gas: true,\n  hydro: true,\n  nuclear: true,\n  biofuelsWaste: true,\n  solarWindTideGeoth: true,\n};\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function countriesInBounds(boundsFilter, state) {\n  const countries = countriesSelector(state);\n\n  return boundsFilter\n    ? countries.filter(\n        country => country.bounds && boundsFilter.intersects(country.bounds),\n      )\n    : countries;\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode] || state.areas.data[countryCode];\n}\n\nexport function fuelConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasConsumed : defaultIndicators;\n}\n\nexport function fuelProducedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasProduced : defaultIndicators;\n}\n\nexport function fuelProducedOrConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country\n    ? mapObjIndexed((v, k) => v || country.hasConsumed[k], country.hasProduced)\n    : defaultIndicators;\n}\n\nexport default countriesReducer;\n","import L from 'leaflet';\nimport { map, uniq, values, mergeAll } from 'ramda';\nimport domToImage from 'dom-to-image';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n\nexport function parseMapOfStatistics(mapOfCountryStatistics, defaultCountry) {\n  return map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n}\n\nexport function addPopCountryStatistics(mapOfCountryStatistics, perCapita) {\n  if (!perCapita) {\n    return mapOfCountryStatistics;\n  }\n\n  const countryCodes = uniq(\n    values(mapOfCountryStatistics).map(d => d.countryCode),\n  );\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...populations,\n    ...mapOfCountryStatistics,\n  };\n}\n\nexport function chartToPngBlob(domElement, scale) {\n  const padding = 10;\n  const height = domElement.offsetHeight + padding * 2;\n  const width = domElement.offsetWidth + padding * 2;\n  const classFiltered = [\n    'ChartWrapper__header__right',\n    'leaflet-control-container',\n  ];\n  domElement.classList.add('transformingToPng');\n  return domToImage\n    .toBlob(domElement, {\n      filter: element => !classFiltered.includes(element.className),\n      bgcolor: 'white',\n      style: {\n        padding: `${padding}px`,\n        transform: `scale(${scale}) translate(${width / 2 / scale}px, ${height /\n          2 /\n          scale}px)`,\n      },\n      height: height * scale,\n      width: width * scale,\n    })\n    .then(blob => {\n      domElement.classList.remove('transformingToPng');\n      return blob;\n    });\n}\n\nexport function memoize(\n  fn,\n  hashFunction = args => JSON.stringify(args),\n  cacheSize = 30,\n) {\n  const cache = {};\n  return function memoizedFun(...args) {\n    const hash = hashFunction(args);\n    if (cache[hash]) {\n      return cache[hash];\n    }\n    const res = fn(...args);\n\n    cache[hash] = res;\n\n    const hashes = Object.keys(cache);\n    if (hashes.length > cacheSize) {\n      delete cache[hashes[0]];\n    }\n\n    return res;\n  };\n}\n\nexport function clickHandlers({ onClick, onDoubleClick }) {\n  let clicks = 0;\n  return function clickHandler(...args) {\n    clicks += 1;\n    if (clicks < 2) {\n      setTimeout(() => {\n        if (clicks < 2) {\n          onClick(...args);\n        } else {\n          onDoubleClick(...args);\n        }\n        clicks = 0;\n      }, 300);\n    }\n  };\n}\n\nexport function maxAndIndex(array) {\n  return array.reduce(\n    (res, value, i) => {\n      if (value > res.max) {\n        return { max: value, maxIndex: i };\n      }\n      return res;\n    },\n    {\n      max: 0,\n      maxIndex: 0,\n    },\n  );\n}\n","import { values, mapObjIndexed, mergeAll, groupBy, map, range } from 'ramda';\nimport { countriesSelector } from '../countries';\nimport {\n  parseMapOfStatistics,\n  addPopCountryStatistics,\n  memoize,\n  maxAndIndex,\n} from '../../utils';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, value: null }\n      : { year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode, yearInterval },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n        yearInterval,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  const interval = yearInterval || [\n    statistic.startingYear,\n    statistic.endingYear,\n  ];\n  return countryStatistic\n    ? countryStatistic.values.filter(\n        d => interval[0] <= d.year && d.year <= interval[1],\n      )\n    : [];\n}\n\nexport function countryStatisticsLoadedSelector(countryStatitics, state) {\n  return countryStatitics.every(countryStatistic =>\n    countryStatisticLoadedSelector(countryStatistic, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatistic, yearInterval = [0, 3000]) {\n  const statistics = values(mapOfStatistic);\n  const startingYears = statistics.map(statistic => statistic.startingYear);\n  const endingYears = statistics.map(statistic => statistic.endingYear);\n  const startingYear = Math.max(...startingYears, yearInterval[0]);\n  const endingYear = Math.min(...endingYears, yearInterval[1]);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (perCapita && !population)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction compiledCountryStatisticsSelectorFn(\n  {\n    mapOfCountryStatistics: baseMap,\n    countryCode,\n    perCapita,\n    yearInterval: inputYearInterval,\n  },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    baseMap,\n    countryCode,\n  );\n  const mapOfCountryStatistics = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    mapOfCountryStatistics,\n  );\n  const nullValues = map(() => null, mapOfStatistic);\n  const yearInterval = computeYearInterval(mapOfStatistic, inputYearInterval);\n  const mapOfStatisticValues = map(\n    countryStatistic =>\n      countryStatisticValuesSelector(\n        { ...countryStatistic, yearInterval },\n        state,\n      ),\n    mapOfCountryStatistics,\n  );\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n\n  const compiledStatistics = range(yearInterval[0], yearInterval[1] + 1)\n    .sort()\n    .map(year => ({\n      year,\n      ...nullValues,\n      ...mergeAll(allValuesByYear[year]),\n    }))\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed(({ countryCode: cc }, compileName) => {\n        const value = compiledValue[compileName];\n        const popCompileName = `pop/${cc}`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita && !mapOfStatistic[compileName].isIntensive,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, parsedMapOfCountryStatistics),\n    }));\n\n  return compiledStatistics;\n}\nexport const compiledCountryStatisticsSelector = memoize(\n  compiledCountryStatisticsSelectorFn,\n  args => JSON.stringify(args[0]),\n);\n\nexport function compiledStatisticForCountriesAndYear(\n  {\n    mapOfCountryStatistics: input,\n    statisticCode,\n    year,\n    perCapita = false,\n    withWorld = true,\n  },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = input || {\n    value: statisticCode,\n  };\n  const yearInterval = [year, year];\n\n  if (withWorld) {\n    countryCodes.push('WORLD');\n  }\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics,\n        countryCode,\n        perCapita,\n        yearInterval,\n      },\n      state,\n    );\n    const yearValue = countryStatisticValues[0];\n\n    return {\n      countryCode,\n      ...yearValue,\n    };\n  });\n  return countryValues;\n}\n\nexport function statisticSourcesSelector(statisticCodes, state) {\n  return statisticCodes.reduce((statisticSources, statisticCode) => {\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sources = values(statistic.source).map(code =>\n        statisticSelector(code, state),\n      );\n      return statisticSources.concat(sources);\n    }\n\n    return statisticSources.concat([statistic]);\n  }, []);\n}\n\nconst PEAK_THRESHOLD = 0.8;\nconst MAY_PEAK_THRESHOLD = 0.9;\nconst YEAR_AROUND_PEAK = 5;\nexport function statisticPeakYearSelector(countryStatistic, state) {\n  const data = countryStatisticValuesSelector(countryStatistic, state);\n  const dataLength = data.length;\n\n  if (data.length < 1) {\n    return null;\n  }\n\n  const { max, maxIndex } = maxAndIndex(data.map(v => v.value));\n  const maxData = data[maxIndex];\n  const lastValue = data[dataLength - 1].value;\n  const firstValue = data[0].value;\n  const mayPeakValue = MAY_PEAK_THRESHOLD * max;\n  const hasPeakValue = PEAK_THRESHOLD * max;\n\n  if (lastValue > mayPeakValue) {\n    // no simple peak\n    return null;\n  }\n\n  if (lastValue < hasPeakValue) {\n    // has a peak\n    if (maxIndex < 1) {\n      // peak at first value\n      return { ...maxData, sure: true, before: true };\n    }\n    if (firstValue > hasPeakValue) {\n      // may have peaked before\n      return { ...maxData, sure: false, before: true };\n    }\n    if (maxAndIndex < dataLength - YEAR_AROUND_PEAK) {\n      return { ...maxData, sure: false, before: false }; // may be a brief decrease\n    }\n    return { ...maxData, sure: true, before: false };\n  }\n\n  if (firstValue < hasPeakValue) {\n    return { ...maxData, sure: false, before: false };\n  }\n\n  return null;\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","const PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description:\n      'This indicator made up by dividing primary energy consumption by primary energy production, gives an indication on the level of self-sufficiency (or dependency) of a country.',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description:\n      'Measures the mass of CO2 by unit of energy that is emitted by the country.',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'FOSSIL_CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    scale: 'linear',\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: 'Includes hydroelectricity, solar, wind and tide productions.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description:\n      'Includes renewables and nuclear productions. Excludes biofuels at the moment.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'FOSSIL_RENTS_IN_GDP',\n    name: 'Fossil rents',\n    description: 'Share of all fossil rents (coal, oil & gas) in GDP',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      coal: 'COAL_RENTS_IN_GDP',\n      oil: 'OIL_RENTS_IN_GDP',\n      gas: 'GAS_RENTS_IN_GDP',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    isIntensive: true,\n    sourceAttribution: 'World Bank',\n    category: 'Others',\n    compute({ coal, gas, oil }) {\n      return coal * gas * oil;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      const countryStatistics = sourceCodes.map(sourceCode => ({\n        statisticCode: sourceCode,\n        countryCode,\n      }));\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics(countryStatistics),\n      );\n      return;\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics(countryStatistics) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      countryStatistics.map(countryStatistic =>\n        dispatch(loadCountryStatistic(countryStatistic)),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import worldTopo from 'world-atlas/world/110m.json'; // TODO\nimport countriesData from 'world-countries/countries'; // TODO\nimport { merge } from 'topojson-client';\nimport { indexBy } from 'ramda';\n\nconst indexedCountries = {\n  ...indexBy(c => c.cca2, countriesData),\n  SU: { ccn3: 810 },\n};\n\nfunction computeGeojson(area) {\n  const countryAlpha3Codes = area.countryCodes.map(\n    countryCode => indexedCountries[countryCode].ccn3,\n  );\n  const geometries = worldTopo.objects.countries.geometries.filter(c =>\n    countryAlpha3Codes.includes(c.id),\n  );\n  return merge(worldTopo, geometries);\n}\n\nexport default async function getAreas() {\n  const res = await fetch('/data/areas.json');\n  const data = await res.json();\n\n  return data.map(area => ({\n    ...area,\n    alpha2Code: area.code,\n    commonName: area.name,\n    geojson: area.countryCodes ? computeGeojson(area) : null,\n  }));\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllAreas from '../api/areas';\n\nexport const AREAS_LOAD_ACTION = 'AREAS_LOAD_ACTION';\nexport const AREAS_RECEIVE_ACTION = 'AREAS_RECEIVE_ACTION';\n\nfunction loadAreasAction() {\n  return { type: AREAS_LOAD_ACTION };\n}\n\nfunction receiveAreasAction({ data, errors }) {\n  return { type: AREAS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllAreas() {\n  return function dispatchLoadAllAreas(dispatch) {\n    dispatch(loadAreasAction());\n    return getAllAreas()\n      .then(data =>\n        dispatch(\n          receiveAreasAction({\n            data: indexBy(prop('code'), data),\n          }),\n        ),\n      )\n      .catch(\n        errors =>\n          console.log(errors) && dispatch(receiveAreasAction({ errors })),\n      );\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction areasReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case AREAS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case AREAS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function areasLoadedSelector(state) {\n  return state.areas.loaded;\n}\n\nexport function areasSelector(state) {\n  return values(state.areas.data);\n}\n\nexport function areaSelector(areaCode, state) {\n  return state.areas.data[areaCode];\n}\n\nexport function areasOfCountrySelector(countryCode, state) {\n  return values(state.areas.data).filter(\n    area => area.countryCodes && area.countryCodes.includes(countryCode),\n  );\n}\n\nexport default areasReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\nimport { map } from 'ramda';\n\nimport countriesReducer from './countries';\nimport statisticsReducer, {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n} from './statistics';\nimport areasReducer from './areas';\n\nfunction actionSanitizer(action) {\n  if (\n    (action.type === COUNTRY_STATISTIC_RECEIVE_ACTION ||\n      action.type === STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION) &&\n    action.data\n  ) {\n    return { ...action, data: 'DATA' };\n  }\n  return action;\n}\n\nfunction stateSanitizer(state) {\n  return {\n    ...state,\n    countries: map(\n      country => ({ ...country, geojson: country.geojson && 'GEOJSON' }),\n      state.countries.data,\n    ),\n    areas: map(\n      area => ({ ...area, geojson: area.geojson && 'GEOJSON' }),\n      state.areas.data,\n    ),\n    statistics: map(\n      statistic => ({\n        ...statistic,\n        values: map(\n          country => ({\n            ...country,\n            values: country.values && `[${country.values.length}]`,\n          }),\n          statistic.values,\n        ),\n      }),\n      state.statistics.data,\n    ),\n  };\n}\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n  areas: areasReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  actionSanitizer,\n  stateSanitizer,\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import { Component } from 'react';\nimport { equals } from 'ramda';\n\nclass ScrollToTop extends Component {\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!equals(this.props, prevProps)) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default ScrollToTop;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n  category: PropTypes.string.isRequired,\n  sourceAttribution: PropTypes.string,\n  sourceUrl: PropTypes.string,\n  sourceDescriptionUrl: PropTypes.string,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n\nexport const AreaType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  countries: PropTypes.arrayOf(CountryType),\n});\n\nexport const LocationType = PropTypes.shape({\n  hash: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n});\n\nexport const FuelIndicatorsType = PropTypes.shape({\n  coal: PropTypes.bool,\n  oil: PropTypes.bool,\n  gas: PropTypes.bool,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map, range } from 'ramda';\nimport { scaleLog, scaleLinear } from 'd3-scale';\nimport * as d3Colors from 'd3-scale-chromatic';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst NA_COLOR = '#888';\nconst BORDER_COLOR = 'black';\nconst LEGEND_COLORS_COUNT = 4;\nconst LEGEND_WIDTH = 300; // px\nconst COLORS_SCHEME = 'YlGnBu';\n\nconst interpolator = d3Colors[`interpolate${COLORS_SCHEME}`];\n\nfunction computeColorMap(data, scaleString) {\n  const maxValue = Math.max(...data.filter(d => d.value).map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n  const scaleType = scaleString === 'linear' ? scaleLinear() : scaleLog();\n  const scale = scaleType.domain([minValue, maxValue]);\n\n  const colorMap = map(value => {\n    if (value === null) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: interpolator(0), value };\n    }\n    return {\n      color: interpolator(scale(value)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    selectedCountries,\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    scale,\n    minZoom,\n    onMapChange,\n  } = props;\n  const selectedCountryByCode = indexBy(c => c.alpha2Code, selectedCountries);\n  const selectedData = data.filter(\n    d => d.countryCode !== 'WORLD' && selectedCountryByCode[d.countryCode],\n  );\n  const maxValue = Math.max(...selectedData.map(d => d.value));\n  const colorValueMap = computeColorMap(\n    selectedData,\n    currentStatistic.scale || scale,\n  );\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        minZoom={minZoom}\n        zoom={minZoom}\n        zoomSnap={0.1}\n        zoomDelta={0.5}\n        center={[20, 30]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        dragging={!isMobileOrTablet()}\n        onZoomend={onMapChange}\n        onMoveend={onMapChange}\n      >\n        {countries.map(country => {\n          const countryData = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: BORDER_COLOR,\n                  weight: 0.5,\n                  fillColor: countryData ? countryData.color : NA_COLOR,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(\n                  countryData && countryData.value,\n                )}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          <div>\n            {`${currentStatistic.name} (${displayUnit(\n              currentStatistic.unit,\n              perCapita,\n            )})`}\n          </div>\n          <div className=\"WorldMap__legend__colors\">\n            <div>\n              <div className=\"WorldMap__legend__gradient\">\n                {range(0, LEGEND_COLORS_COUNT).map(i => (\n                  <div\n                    key={i}\n                    className=\"WorldMap__legend__gradient__item\"\n                    style={{\n                      width: LEGEND_WIDTH / LEGEND_COLORS_COUNT,\n                      background: `linear-gradient(to right, ${interpolator(\n                        i / LEGEND_COLORS_COUNT,\n                      )}, ${interpolator((i + 1) / LEGEND_COLORS_COUNT)}`,\n                    }}\n                  />\n                ))}\n              </div>\n              <div className=\"WorldMap__legend__gradientRange\">\n                <div>0</div>\n                <div>{formatNumber(maxValue)}</div>\n              </div>\n            </div>\n            <div>\n              <div\n                className=\"WorldMap__legend__NA__square\"\n                style={{ backgroundColor: NA_COLOR }}\n              />\n              <div>NA</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"WorldMap__sources toPng\">\n        From http://worldenergydata.tk - Sources: IEA, World Bank\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  selectedCountries: PropTypes.arrayOf(CountryType).isRequired,\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  scale: PropTypes.string,\n  minZoom: PropTypes.number,\n  onMapChange: PropTypes.func.isRequired,\n};\n\nWorldMap.defaultProps = {\n  scale: null,\n  minZoom: 1.8,\n};\n\nexport default WorldMap;\n","import React, { Component } from 'react';\nimport { Slider } from 'antd';\n\nclass ControlledSlider extends Component {\n  constructor() {\n    super();\n    this.state = { value: undefined };\n  }\n\n  componentDidMount() {\n    const { defaultValue } = this.props;\n    this.setState({\n      value: defaultValue,\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { defaultValue } = this.props;\n    if (defaultValue !== nextProps.defaultValue) {\n      this.setState({ value: nextProps.defaultValue });\n    }\n  }\n\n  setValue(value) {\n    const { onChange } = this.props;\n    this.setState({ value });\n    onChange(value);\n  }\n\n  render() {\n    const { value } = this.state;\n    return (\n      <Slider {...this.props} value={value} onChange={v => this.setValue(v)} />\n    );\n  }\n}\n\nexport default ControlledSlider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Popover, Button } from 'antd';\n\nimport { StatisticType } from '../utils/types';\n\nfunction StatisticDetails(props) {\n  const { statisticSources, description } = props;\n  const descriptionLines = description && description.split('\\n');\n\n  return (\n    <div className=\"StatisticDetails\">\n      <Popover\n        title=\"Details\"\n        arrowPointAtCenter\n        overlayStyle={{ maxWidth: '300px' }}\n        content={\n          // eslint-disable-next-line react/jsx-wrap-multilines\n          <div>\n            {description && (\n              <div>\n                <strong>Description : </strong>\n                {`${descriptionLines[0]}`}\n              </div>\n            )}\n            <div>\n              <strong>\n                {`Source${statisticSources.length > 1 ? 's' : ''}`}\n              </strong>\n              <ul className=\"StatisticDetails__sources\">\n                {statisticSources.map(stat => (\n                  <li key={stat.code}>\n                    <a\n                      href={stat.sourceUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {`${stat.name} (${stat.sourceAttribution})`}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        }\n        placement=\"bottomRight\"\n      >\n        <Button\n          size=\"small\"\n          icon=\"info-circle\"\n          style={{ marginRight: '5px' }}\n        />\n      </Popover>\n    </div>\n  );\n}\n\nStatisticDetails.propTypes = {\n  description: PropTypes.string,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n};\n\nStatisticDetails.defaultProps = {\n  description: null,\n};\n\nexport default StatisticDetails;\n","function fallbackCopyTextToClipboard(text, element = window.body) {\n  const textArea = document.createElement('textarea');\n  textArea.value = text;\n  element.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    const successful = document.execCommand('copy');\n    element.removeChild(textArea);\n    return successful\n      ? Promise.resolve()\n      : Promise.reject(new Error('fallbackCopyTextToClipboard error'));\n  } catch (err) {\n    element.removeChild(textArea);\n    throw Promise.reject(err);\n  }\n}\nfunction copyTextToClipboard(text, element) {\n  return navigator.clipboard\n    ? navigator.clipboard.writeText(text)\n    : fallbackCopyTextToClipboard(text, element);\n}\n\nexport default copyTextToClipboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { saveAs } from 'file-saver';\nimport { withRouter } from 'react-router-dom';\n\nimport { Button, Dropdown, Menu, Icon, message } from 'antd';\nimport { chartToPngBlob } from '../utils';\nimport copyToClipboard from '../utils/copyToClipboard';\nimport { LocationType } from '../utils/types';\n\nfunction ShareChartComponent(props) {\n  const { id, chartRef, query, location, noHash } = props;\n  return (\n    <div className=\"ShareChartComponent\">\n      <Dropdown\n        overlay={\n          // eslint-disable-next-line\n          <Menu\n            onClick={({ key }) => {\n              if (key === 'png') {\n                chartToPngBlob(chartRef.current, 2)\n                  .then(blob => saveAs(blob, `${id}.png`))\n                  .catch(() => message.error('An error occured !'));\n              } else if (key === 'csv') {\n                const { data, statistics } = props;\n                const compileNames = Object.keys(statistics);\n                const headers = compileNames.map(\n                  compileName => statistics[compileName].code,\n                );\n                const dataLines = data.map(dataItem =>\n                  compileNames.map(compileName => dataItem[compileName]),\n                );\n                const lines = [headers, ...dataLines];\n                const csv = lines.map(l => l.join(',')).join('\\n');\n                const blob = new Blob([csv], {\n                  type: 'text/plain;charset=utf-8',\n                });\n                saveAs(blob, `${id}.csv`);\n              } else if (key === 'link') {\n                const { origin } = window.location;\n                const { pathname } = location;\n\n                const link = `${origin}#${pathname}${query}${\n                  noHash ? '' : `#${id}`\n                }`;\n                copyToClipboard(link, chartRef.current)\n                  .then(() => message.success('Copied !'))\n                  .catch(() => message.error('An error occured !'));\n              }\n            }}\n          >\n            <Menu.Item key=\"link\">\n              <Icon type=\"copy\" theme=\"filled\" />\n              Copy link\n            </Menu.Item>\n            <Menu.Item key=\"png\">\n              <Icon type=\"picture\" theme=\"filled\" />\n              .png\n            </Menu.Item>\n            <Menu.Item key=\"csv\">\n              <Icon type=\"file-text\" theme=\"filled\" />\n              .csv\n            </Menu.Item>\n          </Menu>\n        }\n      >\n        <Button size=\"small\" icon=\"share-alt\" style={{ marginRight: '5px' }} />\n      </Dropdown>\n    </div>\n  );\n}\n\nShareChartComponent.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  chartRef: PropTypes.any.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  statistics: PropTypes.object.isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  id: PropTypes.string.isRequired,\n  query: PropTypes.string,\n  location: LocationType.isRequired,\n  noHash: PropTypes.bool,\n};\n\nShareChartComponent.defaultProps = {\n  query: '',\n  noHash: false,\n};\n\nexport default withRouter(ShareChartComponent);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Radio, Popover, Button, Icon } from 'antd';\nimport debounce from 'lodash.debounce';\nimport qs from 'qs';\n\nimport { sortBy, groupBy, indexBy } from 'ramda';\n\nimport Slider from './ControlledSlider';\nimport StatisticDetails from '../../../components/StatisticDetails';\nimport ShareChartComponent from '../../../components/ShareChartComponent';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nconst WITH_SCALE_SETTINGS = false;\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    statisticSources,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n    mapRef,\n    scale,\n    setScale,\n  } = props;\n\n  const countryByCode = indexBy(c => c.alpha2Code, countries);\n  const formatedData = data\n    .filter(s => s.value !== null && countryByCode[s.countryCode])\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countryByCode[s.countryCode].commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  if (currentStatistic.isIntensive && perCapita) {\n    setPerCapita(false);\n  }\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <div className=\"StatisticExplorer__options\">\n        <Radio.Group\n          style={{ marginBottom: '10px' }}\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button\n            value\n            disabled={\n              currentStatistic.code === 'POPULATION' ||\n              currentStatistic.isIntensive\n            }\n          >\n            Per capita\n          </Radio.Button>\n        </Radio.Group>\n        <div className=\"StatisticExplorer__options__right\">\n          <ShareChartComponent\n            id={currentStatistic.name.replace(/ /g, '_')}\n            chartRef={mapRef}\n            statistics={{\n              countryCode: { code: 'COUNTRY_CODE' },\n              value: currentStatistic,\n            }}\n            data={data}\n            query={`?${qs.stringify({\n              statisticCode: currentStatistic.code,\n              perCapita,\n              currentYear,\n            })}`}\n            noHash\n          />\n          <StatisticDetails\n            statisticSources={statisticSources}\n            description={currentStatistic.description}\n          />\n          {WITH_SCALE_SETTINGS && (\n            <Popover\n              title=\"Settings\"\n              arrowPointAtCenter\n              content={\n                // eslint-disable-next-line react/jsx-wrap-multilines\n                <div>\n                  {'Scale '}\n                  <Radio.Group\n                    buttonStyle=\"solid\"\n                    size=\"small\"\n                    value={scale}\n                    onChange={e => setScale(e.target.value)}\n                  >\n                    <Radio.Button value=\"log\">Log</Radio.Button>\n                    <Radio.Button value=\"linear\">Linear</Radio.Button>\n                  </Radio.Group>\n                </div>\n              }\n              placement=\"bottomRight\"\n            >\n              <Button size=\"small\">\n                <Icon type=\"setting\" theme=\"filled\" />\n              </Button>\n            </Popover>\n          )}\n        </div>\n      </div>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  mapRef: PropTypes.object.isRequired,\n  scale: PropTypes.string,\n  setScale: PropTypes.func.isRequired,\n};\n\nStatisticExplorer.defaultProps = {\n  scale: null,\n};\n\nexport default StatisticExplorer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label, labelColor, displayFilter, totalFilter, units } = props;\n    const filteredPayload = payload.filter(displayFilter);\n\n    if (filteredPayload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload\n      .filter(totalFilter)\n      .reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = filteredPayload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div style={{ color: labelColor, fontWeight: 'bold' }}>{label}</div>\n        <div>\n          {filteredPayload.map((p, i) => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey || name} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit || units[i]}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  labelColor: PropTypes.string,\n  withTotal: PropTypes.bool,\n  displayFilter: PropTypes.func,\n  totalFilter: PropTypes.func,\n  units: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  labelColor: 'black',\n  withTotal: false,\n  displayFilter: i => i,\n  totalFilter: i => i,\n  units: {},\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  LabelList,\n  Legend,\n} from 'recharts';\nimport { toPairs, range } from 'ramda';\nimport regression from 'regression';\n\nimport CustomTooltip from '../../CountryView/components/CustomTooltip';\n\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nconst RESOLUTION = 100;\nconst COLORS = {\n  Africa: 'black',\n  Europe: 'blue',\n  Americas: 'red',\n  Asia: 'green',\n  Oceania: 'orange',\n};\nconst legend = toPairs(COLORS).map(array => ({\n  value: array[0],\n  color: array[1],\n}));\n\nconst DISPLAYED_COUNTRIES = [\n  'CN',\n  'US',\n  'FR',\n  'DE',\n  'GB',\n  'BR',\n  'CA',\n  'IN',\n  'RU',\n  'ZA',\n];\n\nfunction HDIByEnergyChart(props) {\n  const { data, statistics, height, countries } = props;\n\n  const finalData = data\n    .filter(d => d.energy && d.hdi)\n    .map(d => {\n      const country = countries.find(c => c.alpha2Code === d.countryCode);\n      return {\n        ...d,\n        r: Math.max(Math.log(d[`pop/${d.countryCode}`]) + 1, 2),\n        commonName: country.commonName,\n        color: COLORS[country.region],\n        label: DISPLAYED_COUNTRIES.includes(d.countryCode) ? d.countryCode : '',\n      };\n    })\n    .sort((a, b) => (a.r < b.r ? 1 : -1));\n  const dataArray = finalData.map(d => [d.energy, d.hdi]);\n  const { equation } = regression.logarithmic(dataArray);\n  const min = Math.min(...finalData.map(d => d.energy));\n  const max = Math.max(...finalData.map(d => d.energy));\n  const data2 = range(0, RESOLUTION + 1)\n    .map(i => {\n      const energy = min + (i / RESOLUTION) * (max - min);\n      return {\n        energy,\n        hdi: equation[1] * Math.log(energy) + equation[0],\n      };\n    })\n    .filter(d => d.hdi < 1);\n\n  return (\n    <div className=\"HDIByEnergyChart\">\n      <ResponsiveContainer height={height}>\n        <ScatterChart data={finalData} margin={{ bottom: 50 }}>\n          <Scatter data={data2} line={{ stroke: 'grey' }} shape={() => null} />\n          <Scatter\n            shape={props2 => (\n              <circle\n                cx={props2.cx}\n                cy={props2.cy}\n                r={props2.r}\n                fill={props2.color}\n              />\n            )}\n          >\n            <LabelList dataKey=\"label\" position=\"top\" />\n          </Scatter>\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"energy\"\n            name={statistics.energy.name}\n            type=\"number\"\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.energy.name} (${displayUnit(\n                statistics.energy.unit,\n                true,\n              )})`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"hdi\"\n            name={statistics.hdi.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n            domain={[0.2, 1]}\n          />\n          <Tooltip\n            active\n            wrapperStyle={{\n              visibility: 'visible',\n            }}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  `${\n                    countries.find(\n                      c =>\n                        c.alpha2Code === props2.payload[0].payload.countryCode,\n                    ).commonName\n                  } (${props2.payload[0].payload.countryCode})`\n                }\n                labelColor={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.color\n                }\n                units={{\n                  '0': `${displayUnit(statistics.energy.unit, true)}`,\n                  '1': statistics.hdi.unit.main,\n                }}\n              />\n            )}\n          />\n          <Legend verticalAlign=\"top\" payload={legend} />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nHDIByEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      hdi: PropTypes.number,\n      energy: PropTypes.number,\n    }),\n  ).isRequired,\n  countries: PropTypes.arrayOf(CountryType.isRequired).isRequired,\n  statistics: PropTypes.shape({\n    hdi: StatisticType,\n    energy: StatisticType,\n  }).isRequired,\n  color: PropTypes.string,\n  height: PropTypes.number.isRequired,\n};\n\nHDIByEnergyChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default HDIByEnergyChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Switch } from 'antd';\n\nfunction ChartSettings(props) {\n  const {\n    perCapitaSwitch,\n    stackedSwitch,\n    perCapita,\n    stacked,\n    setPerCapita,\n    setStacked,\n  } = props;\n\n  return (\n    <div className=\"ChartSettings\">\n      {perCapitaSwitch && (\n        <div>\n          {'Per capita '}\n          <Switch size=\"small\" checked={perCapita} onChange={setPerCapita} />\n        </div>\n      )}\n      {stackedSwitch && (\n        <div>\n          {'Stacked '}\n          <Switch size=\"small\" checked={stacked} onChange={setStacked} />\n        </div>\n      )}\n    </div>\n  );\n}\nChartSettings.propTypes = {\n  perCapitaSwitch: PropTypes.bool.isRequired,\n  stackedSwitch: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  setStacked: PropTypes.func.isRequired,\n};\n\nexport default ChartSettings;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values, uniq } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n  statisticSourcesSelector,\n} from '../store/statistics';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../utils';\nimport { countrySelector } from '../store/countries';\n\nconst StatisticsLoader = buildLoader(({ countryStatistics }) =>\n  loadCountryStatistics(countryStatistics),\n);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction mapStateToProps(state, props) {\n  const {\n    perCapita,\n    statisticCode,\n    mapOfCountryStatistics: mapOfCountryStatisticsInput,\n    countryCode,\n    withReference,\n    referenceCountryCode = 'WORLD',\n  } = props;\n  const isIntensive =\n    statisticCode && statisticSelector(statisticCode, state).isIntensive;\n  const mapOfCountryStatistics =\n    (perCapita || isIntensive) && withReference\n      ? {\n          ...mapOfCountryStatisticsInput,\n          reference: {\n            countryCode: referenceCountryCode,\n            statisticCode:\n              typeof withReference === 'boolean'\n                ? statisticCode\n                : withReference,\n          },\n        }\n      : mapOfCountryStatisticsInput;\n\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n  );\n  const mapOfCountryStatisticsToLoad = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const countryStatisticsToLoad = values(mapOfCountryStatisticsToLoad);\n  const statisticCodes = uniq(\n    countryStatisticsToLoad.map(c => c.statisticCode),\n  );\n  const isLoaded = countryStatisticsLoadedSelector(\n    countryStatisticsToLoad,\n    state,\n  );\n  const data = isLoaded\n    ? compiledCountryStatisticsSelector(\n        {\n          mapOfCountryStatistics,\n          countryCode: props.countryCode,\n          perCapita: props.perCapita,\n        },\n        state,\n      )\n    : [];\n\n  return {\n    data,\n    statistics: map(\n      ({ statisticCode: code }) => statisticSelector(code, state),\n      parsedMapOfCountryStatistics,\n    ),\n    statisticSources: statisticSourcesSelector(statisticCodes, state),\n    isLoaded,\n    countryStatisticsToLoad,\n    country: countrySelector(countryCode, state),\n    referenceCountry: countrySelector(referenceCountryCode, state),\n  };\n}\n\nfunction withCountryStatistics(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) =>\n      mapStateToProps(state, {\n        mapOfCountryStatistics: mapOfCountryStatisticsSelector(state, props),\n        ...props,\n      }),\n    )(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader countryStatistics={props.countryStatisticsToLoad} />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistics;\n","import React, { Component } from 'react';\nimport { values } from 'ramda';\nimport { withStateHandlers, compose, defaultProps } from 'recompose';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\n\nimport { Icon, Popover, Button } from 'antd';\n\nimport { displayUnit } from '../utils';\nimport StatisticDetails from '../components/StatisticDetails';\n\nimport ChartSettings from './components/ChartSettings';\nimport ShareChartComponent from '../components/ShareChartComponent';\nimport withCountryStatistics from './withCountryStatistics';\n\nconst defaultHeight = 200;\n\nexport function buildChartWrapper(WrappedChart) {\n  return class ChartWrapper extends Component {\n    constructor() {\n      super();\n      this.chartRef = React.createRef();\n      this.buttonRef = React.createRef();\n    }\n\n    render() {\n      const {\n        title,\n        description,\n        statistics,\n        statisticSources,\n        perCapita,\n        stacked,\n        setPerCapita,\n        setStacked,\n        data,\n        withReference,\n        referenceCountryCode,\n        location,\n        perCapitaSwitch,\n        stackedSwitch,\n        hasSettings,\n      } = this.props;\n      const statisticList = values(statistics);\n      const statistic = statisticList[0];\n      const id = (title\n        ? title.replace(/ /g, '_')\n        : statistic.name.replace(/ /g, '_')\n      ).toLowerCase();\n\n      const descriptionStatistic = statisticList.find(\n        s => s.code === description,\n      );\n      const finalDescription =\n        statisticList.length < 2\n          ? description || statistic.description\n          : (descriptionStatistic && descriptionStatistic.description) ||\n            description;\n      const hash = location.hash.substr(1);\n      const style =\n        hash === id\n          ? {\n              boxShadow: '0px 0px 10px 1px rgba(0,0,0,0.5)',\n            }\n          : {};\n\n      return (\n        <div id={id} className=\"ChartWrapper\" ref={this.chartRef} style={style}>\n          <div className=\"ChartWrapper__header\">\n            <div className=\"ChartWrapper__header__left\">\n              <span className=\"ChartWrapper__title\">\n                {title || statistic.name}\n              </span>\n              <span className=\"ChartWrapper__title__unit\">\n                {statistic.unit.main === ''\n                  ? ''\n                  : ` (${displayUnit(statistic.unit, perCapita)})`}\n              </span>\n            </div>\n            <div\n              className=\"ChartWrapper__header__right\"\n              data-html2canvas-ignore\n            >\n              <ShareChartComponent\n                id={id}\n                chartRef={this.chartRef}\n                statistics={{ year: { code: 'YEAR' }, ...statistics }}\n                data={data}\n                {...(withReference\n                  ? {\n                      query: `?${qs.stringify({\n                        referenceCountry: referenceCountryCode,\n                      })}`,\n                    }\n                  : {})}\n              />\n              <StatisticDetails\n                statisticSources={statisticSources}\n                description={finalDescription}\n              />\n              {hasSettings && (\n                <div>\n                  <Popover\n                    title=\"Settings\"\n                    arrowPointAtCenter\n                    content={\n                      // eslint-disable-next-line react/jsx-wrap-multilines\n                      <ChartSettings\n                        perCapitaSwitch={perCapitaSwitch}\n                        stackedSwitch={stackedSwitch}\n                        stacked={stacked}\n                        perCapita={perCapita}\n                        setPerCapita={setPerCapita}\n                        setStacked={setStacked}\n                      />\n                    }\n                    placement=\"bottomRight\"\n                  >\n                    <Button size=\"small\">\n                      <Icon type=\"setting\" theme=\"filled\" />\n                    </Button>\n                  </Popover>\n                </div>\n              )}\n            </div>\n          </div>\n          <WrappedChart {...this.props} />\n          <div className=\"ChartWrapper__footer toPng\">\n            From http://worldenergydata.tk - Sources: IEA, World Bank\n          </div>\n        </div>\n      );\n    }\n  };\n}\n\nfunction buildChart(options = {}) {\n  const {\n    mapOfCountryStatisticsSelector,\n    perCapitaSwitch = false,\n    stackedSwitch = false,\n    height = defaultHeight,\n  } = options;\n  const hasSettings = perCapitaSwitch || stackedSwitch;\n  const hocs = [\n    withRouter,\n    defaultProps({\n      perCapitaSwitch,\n      stackedSwitch,\n      hasSettings,\n      height,\n      perCapita: false,\n      stacked: false,\n    }),\n  ];\n\n  if (hasSettings) {\n    hocs.push(\n      withStateHandlers(\n        ({ defaultPerCapita = false, defaultStacked = false }) => ({\n          perCapita: defaultPerCapita,\n          stacked: defaultStacked,\n        }),\n        {\n          setPerCapita: () => perCapita => ({ perCapita }),\n          setStacked: () => stacked => ({ stacked }),\n        },\n      ),\n    );\n  }\n\n  hocs.push(withCountryStatistics(mapOfCountryStatisticsSelector));\n  hocs.push(buildChartWrapper);\n\n  return compose(...hocs);\n}\n\nexport default buildChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport { values, map } from 'ramda';\n\nimport { withRouter } from 'react-router-dom';\n\nimport { Spin } from 'antd';\nimport HDIByEnergyChart from '../components/HDIByEnergyChart';\n\nimport { buildChartWrapper } from '../../../HOC/buildChart';\nimport { countriesSelector } from '../../../store/countries';\nimport {\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../../store/statistics';\n\nconst STATISTICS_MAP = {\n  hdi: 'HUMAN_DEVELOPMENT_INDEX',\n  energy: 'FINAL_ENERGY_CONSUMPTION_MTOE',\n};\nconst STATISTICS_CODES = values(STATISTICS_MAP).concat(['POPULATION']);\n\nclass HDIByEnergyChartLoader extends Component {\n  componentDidMount() {\n    const { loadStatistic } = this.props;\n    STATISTICS_CODES.map(loadStatistic);\n  }\n\n  render() {\n    const { isLoaded } = this.props;\n    return (\n      <Spin spinning={!isLoaded}>\n        <HDIByEnergyChart {...this.props} />\n      </Spin>\n    );\n  }\n}\n\nHDIByEnergyChartLoader.propTypes = {\n  loadStatistic: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nconst hocs = [\n  withRouter,\n  connect(\n    state => ({\n      countries: countriesSelector(state),\n      statisticSources: statisticSourcesSelector(STATISTICS_CODES, state),\n      isLoaded: STATISTICS_CODES.every(statisticCode =>\n        statisticOfAllCountriesLoadedSelector(statisticCode, state),\n      ),\n      statistics: map(\n        statisticCode => statisticSelector(statisticCode, state),\n        STATISTICS_MAP,\n      ),\n      data: compiledStatisticForCountriesAndYear(\n        {\n          mapOfCountryStatistics: STATISTICS_MAP,\n          year: 2016,\n          perCapita: true,\n          withWorld: false,\n        },\n        state,\n      ),\n    }),\n    {\n      loadStatistic: loadStatisticOfCountries,\n    },\n  ),\n  buildChartWrapper,\n];\n\nconst HDIByEnergyChartContainer = compose(...hocs)(HDIByEnergyChartLoader);\n\nexport default HDIByEnergyChartContainer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport qs from 'qs';\n\nimport { Row, Col } from 'antd';\nimport ScrollToTop from '../../components/ScrollToTop';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\nimport HDIByEnergyChartContainer from './containers/HDIByEnergyChartContainer';\n\nimport {\n  countriesSelector,\n  countriesInBounds,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../store/statistics';\n\nfunction f(statisticCode, perCapita) {\n  // TODO\n  return perCapita ? [statisticCode, 'POPULATION'] : [statisticCode];\n}\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    selectedCountries: countriesInBounds(boundsFilter, state),\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    countries: countriesInBounds(boundsFilter, state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    statisticSources: statisticSourcesSelector(\n      f(statisticCode, perCapita),\n      state,\n    ),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nconst MIN_ZOOM = 2;\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      scale: null,\n      boundsFilter: null,\n    };\n    this.mapRef = React.createRef();\n    this.onMapChange = e =>\n      this.setFilterBounds(e.target.getBounds(), e.target.getZoom());\n  }\n\n  componentDidMount() {\n    const { loadStatistic, statisticCode, perCapita } = this.props;\n\n    loadStatistic(statisticCode);\n\n    if (perCapita) {\n      loadStatistic('POPULATION');\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { loadStatistic, statisticCode, perCapita } = this.props;\n    if (statisticCode !== prevProps.statisticCode) {\n      loadStatistic(statisticCode);\n    }\n    if (perCapita !== prevProps.perCapita && perCapita) {\n      loadStatistic('POPULATION');\n    }\n  }\n\n  setParameters(parameters) {\n    const { statisticCode, perCapita, currentYear, goTo } = this.props;\n    const newPerCapita =\n      parameters.perCapita === undefined ? perCapita : parameters.perCapita;\n\n    const newParameters = {\n      statisticCode,\n      currentYear,\n      ...parameters,\n      perCapita: newPerCapita && parameters.statisticCode !== 'POPULATION',\n    };\n    goTo(`?${qs.stringify(newParameters)}`);\n  }\n\n  setFilterBounds(bounds, zoom) {\n    this.setState({ boundsFilter: zoom === MIN_ZOOM ? null : bounds });\n  }\n\n  setScale(scale) {\n    this.setState({ scale });\n  }\n\n  render() {\n    const {\n      goTo,\n      currentYear,\n      statisticCode,\n      perCapita,\n      location,\n    } = this.props;\n    const { scale, boundsFilter } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <ScrollToTop />\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <div ref={this.mapRef}>\n              <ConnectedWorldMap\n                statisticCode={statisticCode}\n                currentYear={currentYear}\n                perCapita={perCapita}\n                scale={scale}\n                minZoom={MIN_ZOOM}\n                onMapChange={this.onMapChange}\n                boundsFilter={boundsFilter}\n              />\n            </div>\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => goTo(`country/${record.countryCode}`)}\n              setYear={year => this.setParameters({ currentYear: year })}\n              setStatistic={value =>\n                this.setParameters({ statisticCode: value })\n              }\n              setPerCapita={value => this.setParameters({ perCapita: value })}\n              mapRef={this.mapRef}\n              scale={scale}\n              setScale={value => this.setScale(value)}\n              boundsFilter={boundsFilter}\n            />\n          </Col>\n          {location.search.includes('beta') && (\n            <Col md={24} style={{ marginTop: 20, backgroundColor: 'white' }}>\n              <HDIByEnergyChartContainer\n                title=\"Human development index according to energy in 2016\"\n                description=\"size of circle depends on population\"\n                height={600}\n              />\n            </Col>\n          )}\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  loadStatistic: PropTypes.func.isRequired,\n  statisticCode: PropTypes.string,\n  perCapita: PropTypes.bool.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  goTo: PropTypes.func.isRequired,\n  location: PropTypes.shape({ search: PropTypes.string.isRequired }).isRequired,\n};\n\nHomeView.defaultProps = {\n  statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n};\n\nexport default connect(\n  (state, props) => {\n    const { search } = props.location;\n    const queryObject = search ? qs.parse(search.substr(1)) : {};\n    return {\n      goTo(path) {\n        props.history.push(path);\n      },\n      currentYear: Number(queryObject.currentYear) || 2010,\n      perCapita: queryObject.perCapita === 'true',\n      statisticCode: queryObject.statisticCode,\n    };\n  },\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import { countrySelector, countriesSelector } from './countries';\nimport { areaSelector, areasOfCountrySelector, areasSelector } from './areas';\n\nexport function countryWithAreasSelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  const areas = areasOfCountrySelector(countryCode, state);\n\n  return {\n    ...country,\n    areas,\n  };\n}\n\nexport function areaWithCountriesSelector(areaCode, state) {\n  const area = areaSelector(areaCode, state);\n  const countries = area.countryCodes\n    ? area.countryCodes\n        .map(countryCode => countrySelector(countryCode, state))\n        .filter(c => !!c)\n    : countriesSelector(state);\n  return {\n    ...area,\n    countries,\n  };\n}\n\nexport function countriesAndAreasSelector(state) {\n  return [\n    ...countriesSelector(state).filter(c => !c.disabled),\n    ...areasSelector(state),\n  ];\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  Legend,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const {\n    data,\n    statistics,\n    color,\n    perCapita,\n    height,\n    country,\n    referenceCountry,\n    withReference,\n    extra,\n  } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n  const withComparison = withReference && (perCapita || statistic.isIntensive);\n\n  return (\n    <div className=\"BasicChart\">\n      <ResponsiveContainer height={height}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={country.commonName}\n            unit={` ${unit}`}\n          />\n          {withComparison && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reference\"\n              stroke=\"red\"\n              strokeWidth={3}\n              dot={false}\n              name={referenceCountry.commonName}\n              unit={` ${unit}`}\n            />\n          )}\n          {extra && extra(props)}\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={props2 => <CustomTooltip {...props2} />} />\n          {withComparison && <Legend iconType=\"circle\" />}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n  withReference: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  country: CountryType.isRequired,\n  referenceCountry: CountryType.isRequired,\n  extra: PropTypes.func,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n  withReference: false,\n  extra: null,\n};\n\nexport default BasicChart;\n","import buildChart from '../../../HOC/buildChart';\nimport BasicChart from '../components/BasicChart';\n\nexport default buildChart()(BasicChart);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction GeoJSONMap(props) {\n  const { geojson, center } = props;\n\n  return (\n    <div className=\"GeoJSONMap\">\n      <Map\n        center={center}\n        zoom={2}\n        zoomDelta={0}\n        zoomSnap={0}\n        boxZoom={false}\n        doubleClickZoom={false}\n        scrollWheelZoom={false}\n        zoomControl={false}\n        dragging={false}\n        style={{ height: '300px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {geojson && <GeoJSON data={geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nGeoJSONMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  geojson: PropTypes.object.isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default GeoJSONMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data, height } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={dataWithImportAndExport}>\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                displayFilter={p => p.name !== 'base'}\n              />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\n\nfunction GDPByEnergyChart(props) {\n  const { data, color, statistics } = props;\n  // const statistic = statistics.value;\n  // const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"GDPByEnergyChart\">\n      <ResponsiveContainer height={300}>\n        <ScatterChart data={data} margin={{ bottom: 50 }}>\n          <Scatter\n            fill={color}\n            shape={props2 => (\n              <circle cx={props2.cx} cy={props2.cy} r={3} fill={color} />\n            )}\n            line\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"energy\"\n            name={statistics.energy.name}\n            type=\"number\"\n            domain={[\n              dataMin => Math.floor(0.95 * dataMin),\n              dataMax => Math.ceil(1.05 * dataMax),\n            ]}\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.energy.name} (${\n                statistics.energy.unit.main\n              })`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"gdp\"\n            name={statistics.gdp.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.year\n                }\n                units={{\n                  '0': statistics.energy.unit.main,\n                  '1': statistics.gdp.unit.main,\n                }}\n              />\n            )}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nGDPByEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      gdp: PropTypes.number,\n      energy: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    gdp: StatisticType,\n    energy: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  color: PropTypes.string,\n};\n\nGDPByEnergyChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default GDPByEnergyChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nconst DEFAULT_AREA_PROPS = {\n  type: 'monotone',\n  dot: false,\n  unit: '%',\n  activeDot: false,\n  strokeOpacity: 0,\n  fillOpacity: 0.8,\n  stackId: '1',\n};\n\nconst AREA_PROPS = {\n  coal: {\n    name: 'Coal',\n    dataKey: 'coal',\n    stroke: 'black',\n    fill: 'black',\n  },\n  oil: {\n    name: 'Oil',\n    dataKey: 'oil',\n    stroke: 'grey',\n    fill: 'grey',\n  },\n  gas: {\n    name: 'Gas',\n    dataKey: 'gas',\n    stroke: 'orange',\n    fill: 'orange',\n  },\n};\nconst FUELS = Object.keys(AREA_PROPS);\n\nfunction RentsChart(props) {\n  const { data, height } = props;\n  const displayedFuel = FUELS.filter(fuel => data.some(d => d[fuel] > 0.1));\n\n  return (\n    <div className=\"RentsChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={data}>\n          {displayedFuel.map(fuel => (\n            <Area {...DEFAULT_AREA_PROPS} {...AREA_PROPS[fuel]} />\n          ))}\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis />\n          <Tooltip\n            content={props2 => <CustomTooltip {...props2} withTotal />}\n            displayFilter={({ dataKey }) => displayedFuel.includes(dataKey)}\n          />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nRentsChart.propTypes = {\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n    }),\n  ).isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default RentsChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport { FuelIndicatorsType } from '../../../utils/types';\n\nimport buildChart from '../../../HOC/buildChart';\nimport ProdConsoChart from './ProdConsoChart';\nimport GDPByEnergyChart from './GDPByEnergyChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\nimport RentsChart from './RentsChart';\n\nconst RentsChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    coal: 'COAL_RENTS_IN_GDP',\n    oil: 'OIL_RENTS_IN_GDP',\n    gas: 'GAS_RENTS_IN_GDP',\n  },\n})(RentsChart);\n\nconst ProdConsoChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: (state, props) => ({\n    prod: props.prodStatisticCode,\n    conso: props.consoStatisticCode,\n  }),\n})(ProdConsoChart);\n\nconst GDPByEnergyChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    gdp: 'GDP_2010_USD',\n    energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n  },\n})(GDPByEnergyChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode, fuelProducedOrConsumed, hasRents } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n        {hasRents && (\n          <Col md={8} sm={24}>\n            <RentsChartContainer\n              countryCode={countryCode}\n              title=\"Share of fossil rents in GDP\"\n              description=\"Sum of coal, oil and gas rents in GDP\"\n            />\n          </Col>\n        )}\n      </Row>\n      <Row gutter={20}>\n        <h3>Imports/Exports</h3>\n        {fuelProducedOrConsumed.coal && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n              fuel=\"Coal\"\n              title=\"Coal Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.oil && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n              fuel=\"Oil\"\n              title=\"Oil Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.gas && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n              consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n              fuel=\"Gas\"\n              title=\"Gas Trade\"\n            />\n          </Col>\n        )}\n      </Row>\n      <Row>\n        <h3>Energy/GDP coupling</h3>\n        <Col md={16} sm={24}>\n          <GDPByEnergyChartContainer\n            countryCode={countryCode}\n            title=\"GDP according to primary energy\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  fuelProducedOrConsumed: FuelIndicatorsType.isRequired,\n  hasRents: PropTypes.bool.isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { values, mapObjIndexed } from 'ramda';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport color from 'onecolor';\n\nimport { getNiceTickValues } from 'recharts-scale';\nimport { tickFormatter, displayUnit, clickHandlers } from '../../../utils';\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nconst FILL_OPACITY = 0.7;\nconst REFERENCE_DATAKEY = 'reference'; // TODO in selectors\nconst defaultLineAreaProps = {\n  type: 'monotone',\n  dot: false,\n  activeDot: false,\n  fillOpacity: FILL_OPACITY,\n  isAnimationActive: false,\n};\n\nconst lineAreaPropsMap = {\n  coal: { name: 'Coal', color: 'black' },\n  oil: { name: 'Oil', color: 'grey' },\n  gas: { name: 'Gas', color: 'orange' },\n  nuclear: { name: 'Nuclear', color: 'purple' },\n  hydro: { name: 'Hydroelectricity', color: 'blue' },\n  biofuelsWaste: { name: 'Biofuels & Waste', color: 'saddlebrown' },\n  solarWindTideGeoth: { name: 'Geothermy, Wind, Solar & Tide', color: 'green' },\n};\n\nconst legendPayload = values(\n  mapObjIndexed((p, key) => ({ ...p, dataKey: key }), lineAreaPropsMap),\n).map(props => ({\n  dataKey: props.dataKey,\n  value: props.name,\n  type: 'circle',\n  inactive: false,\n  color: color(props.color)\n    .alpha(FILL_OPACITY)\n    .cssa(),\n}));\n\nfunction getLegendPayload({\n  fuelConsumed,\n  displayedStats,\n  perCapita,\n  referenceCountry,\n}) {\n  return legendPayload\n    .filter(payload => fuelConsumed[payload.dataKey])\n    .map(payload => ({\n      ...payload,\n      inactive: !displayedStats.includes(payload.dataKey),\n    }))\n    .concat(\n      perCapita\n        ? [\n            {\n              dataKey: REFERENCE_DATAKEY,\n              value: referenceCountry.commonName,\n              color: 'red',\n              type: 'circle',\n              inactive: !displayedStats.includes(REFERENCE_DATAKEY),\n            },\n          ]\n        : [],\n    );\n}\n\nfunction getTicksAndDomain({ data, perCapita, displayedStats, stacked }) {\n  const displayedFuels = displayedStats.filter(s => s !== REFERENCE_DATAKEY);\n  const withReference = perCapita && displayedStats.includes(REFERENCE_DATAKEY);\n  const max = Math.max(\n    ...(stacked\n      ? data.map(d => displayedFuels.reduce((sum, k) => sum + d[k], 0))\n      : data.map(d => Math.max(...displayedFuels.map(k => d[k])))),\n    ...(withReference ? data.map(d => d.reference) : []),\n  );\n\n  const chartMax = max * 1.05;\n  const ticks = getNiceTickValues([0, chartMax], 5, true);\n\n  if (ticks[3] > chartMax) {\n    ticks.pop();\n  }\n  const domain = [0, ticks[ticks.length - 1]];\n  return { domain, ticks };\n}\n\nfunction EnergyMixChart(props) {\n  const {\n    data,\n    stacked,\n    perCapita,\n    fuelConsumed,\n    statistics,\n    referenceCountry,\n    displayedStats,\n    toggleStat,\n    setDisplayedStats,\n  } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n  const lineAreaProps = stacked\n    ? { stackId: '1', unit, ...defaultLineAreaProps }\n    : { strokeWidth: 2, unit, ...defaultLineAreaProps };\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart data={data}>\n          {displayedStats\n            .filter(s => s !== REFERENCE_DATAKEY)\n            .map(fuel => {\n              const fuelProps = lineAreaPropsMap[fuel];\n              return (\n                <LineArea\n                  key={fuel}\n                  {...lineAreaProps}\n                  dataKey={fuel}\n                  name={fuelProps.name}\n                  stroke={fuelProps.color}\n                  fill={fuelProps.color}\n                />\n              );\n            })}\n          {perCapita && displayedStats.includes(REFERENCE_DATAKEY) && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reference\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n              name={referenceCountry.commonName}\n              stroke=\"red\"\n              unit={unit}\n              isAnimationActive={false}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            tickFormatter={tickFormatter}\n            {...getTicksAndDomain({\n              data,\n              perCapita,\n              displayedStats,\n              stacked,\n            })}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={p => p.dataKey !== REFERENCE_DATAKEY}\n              />\n            )}\n          />\n          <Legend\n            iconType=\"circle\"\n            onClick={clickHandlers({\n              onClick: ({ dataKey }) => toggleStat(dataKey),\n              onDoubleClick: ({ dataKey }) => setDisplayedStats([dataKey]),\n            })}\n            payload={getLegendPayload({\n              fuelConsumed,\n              displayedStats,\n              perCapita,\n              referenceCountry,\n            })}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  fuelConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  referenceCountry: CountryType.isRequired,\n  toggleStat: PropTypes.func.isRequired,\n  setDisplayedStats: PropTypes.func.isRequired,\n  displayedStats: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default EnergyMixChart;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { sortBy } from 'ramda';\n\nimport buildChart from '../../../HOC/buildChart';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport { fuelConsumedCountrySelector } from '../../../store/countries';\n\nclass EnergyMixChartWithState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      displayedStats: [],\n    };\n    this.toggleStat = this.toggleStat.bind(this);\n    this.setDisplayedStats = this.setDisplayedStats.bind(this);\n    this.initDone = false;\n  }\n\n  componentDidMount() {\n    this.init(this.props);\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { countryCode, data } = this.props;\n    if (\n      newProps.countryCode !== countryCode ||\n      (data.length !== newProps.data.length && !this.initDone)\n    ) {\n      this.init(newProps);\n    }\n  }\n\n  setDisplayedStats(displayedStats) {\n    this.setState({\n      displayedStats,\n    });\n  }\n\n  init({ data, fuelConsumed }) {\n    this.initDone = true;\n    this.setState({\n      displayedStats: sortBy(\n        fuel => -Math.max(...data.map(d => d[fuel])),\n        Object.keys(fuelConsumed).filter(fuel => fuelConsumed[fuel]),\n      ).concat(['reference']),\n    });\n  }\n\n  toggleStat(toggledStat) {\n    const { displayedStats } = this.state;\n    this.setState({\n      displayedStats: displayedStats.includes(toggledStat)\n        ? displayedStats.filter(d => d !== toggledStat)\n        : [...displayedStats, toggledStat],\n    });\n  }\n\n  render() {\n    return (\n      <EnergyMixChart\n        {...this.props}\n        {...this.state}\n        toggleStat={this.toggleStat}\n        setDisplayedStats={this.setDisplayedStats}\n      />\n    );\n  }\n}\n\nconst EnergyMixChartBuilded = buildChart({\n  perCapitaSwitch: true,\n  stackedSwitch: true,\n})(EnergyMixChartWithState);\n\nconst EnergyMixChartContainer = connect((state, { countryCode }) => ({\n  fuelConsumed: fuelConsumedCountrySelector(countryCode, state),\n}))(EnergyMixChartBuilded);\n\nexport default EnergyMixChartContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { sortBy } from 'ramda';\n\nimport { Select } from 'antd';\n\nimport { CountryType } from '../../../utils/types';\n\nfunction SettingsComponent(props) {\n  const { countries, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"SettingComponent\">\n      {'Compare to : '}\n      <Select\n        value={referenceCountryCode}\n        placeholder=\"Select a country or a zone\"\n        optionFilterProp=\"title\"\n        showSearch\n        style={{ width: '250px' }}\n        onSelect={countryCode => setReferenceCountry(countryCode)}\n      >\n        {sortBy(c => c.commonName, countries).map(country => (\n          <Select.Option\n            key={country.alpha2Code}\n            disabled={country.disabled}\n            title={`${country.commonName} (${country.alpha3Code})`}\n          >\n            {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n          </Select.Option>\n        ))}\n      </Select>\n    </div>\n  );\n}\n\nSettingsComponent.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default SettingsComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\nimport SettingsComponent from './SettingsComponent';\nimport { countriesAndAreasSelector } from '../../../store/otherSelectors';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nconst ConnectedSettingsComponent = connect(state => ({\n  countries: countriesAndAreasSelector(state),\n}))(SettingsComponent);\n\nfunction SummaryTab(props) {\n  const { countryCode, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <Row>\n        <Col md={24} sm={24}>\n          <ConnectedSettingsComponent\n            setReferenceCountry={setReferenceCountry}\n            referenceCountryCode={referenceCountryCode}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={24} sm={24}>\n          <EnergyMixChartContainer\n            title=\"Primary energy consumption\"\n            description=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            countryCode={countryCode}\n            mapOfCountryStatistics={primaryMap}\n            withReference={primaryReference}\n            referenceCountryCode={referenceCountryCode}\n            defaultPerCapita\n            defaultStacked\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={24} sm={24}>\n          <EnergyMixChartContainer\n            title=\"Electricity generation by fuels\"\n            description=\"ELECTRICITY_GENERATION_TWH\"\n            countryCode={countryCode}\n            mapOfCountryStatistics={electrictyMap}\n            withReference={electricityReference}\n            referenceCountryCode={referenceCountryCode}\n            defaultPerCapita\n            defaultStacked\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\nimport SettingsComponent from './SettingsComponent';\n\nimport { countriesAndAreasSelector } from '../../../store/otherSelectors';\n\nconst ConnectedSettingsComponent = connect(state => ({\n  countries: countriesAndAreasSelector(state),\n}))(SettingsComponent);\n\nfunction ClimateTab(props) {\n  const { countryCode, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row>\n        <Col md={24} sm={24}>\n          <ConnectedSettingsComponent\n            setReferenceCountry={setReferenceCountry}\n            referenceCountryCode={referenceCountryCode}\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"FOSSIL_CO2_EMISSIONS_MT\"\n            perCapita\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            perCapita\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_INTENSITY_OF_ENERGY\"\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\nimport { ReferenceLine } from 'recharts';\n\nimport { FuelIndicatorsType } from '../../../utils/types';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nfunction PeakReference(props) {\n  const { peak } = props;\n\n  return (\n    peak && (\n      <ReferenceLine\n        y={peak.value}\n        stroke=\"red\"\n        strokeDasharray=\"3 3\"\n        isFront\n      />\n    )\n  );\n}\n\nfunction PeakText(props) {\n  const { fuel, peak } = props;\n  return (\n    peak && (\n      <div style={{ textAlign: 'right' }}>\n        {`Peak ${fuel} ${peak.before && peak.sure ? 'before' : 'in'} ${\n          peak.year\n          // eslint-disable-next-line no-nested-ternary\n        }${peak.sure ? '' : peak.before ? ' (may be before)' : ' ?'}`}\n      </div>\n    )\n  );\n}\n\nfunction ReservesAndPeaksTab(props) {\n  const { countryCode, referenceCountryCode, fuelProduced, peaks } = props;\n  return (\n    <div className=\"ReservesAndPeaksTab\">\n      <Row gutter={20}>\n        <h2>Productions</h2>\n        {fuelProduced.coal && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"COAL_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n              peak={peaks.coal}\n              extra={PeakReference}\n            />\n            <PeakText fuel=\"coal\" peak={peaks.coal} />\n          </Col>\n        )}\n        {fuelProduced.oil && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"OIL_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n              peak={peaks.oil}\n              extra={PeakReference}\n            />\n            <PeakText fuel=\"oil\" peak={peaks.oil} />\n          </Col>\n        )}\n        {fuelProduced.gas && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"GAS_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n              peak={peaks.gas}\n              extra={PeakReference}\n            />\n            <PeakText fuel=\"gas\" peak={peaks.gas} />\n          </Col>\n        )}\n      </Row>\n      <Row gutter={20}>\n        <h2>Reserves</h2>\n        {fuelProduced.coal && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"COAL_RESERVES_GT\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n        {fuelProduced.oil && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"OIL_RESERVES_BB\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n        {fuelProduced.gas && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"GAS_RESERVES_BCM\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n      </Row>\n    </div>\n  );\n}\n\nconst PeakData = {\n  year: PropTypes.number,\n  value: PropTypes.number,\n  sure: PropTypes.bool,\n  before: PropTypes.bool,\n};\n\nReservesAndPeaksTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n  fuelProduced: FuelIndicatorsType.isRequired,\n  peaks: PropTypes.shape({\n    coal: PeakData,\n    oil: PeakData,\n    gas: PeakData,\n  }).isRequired,\n};\n\nexport default ReservesAndPeaksTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Card } from 'antd';\n\nimport {\n  fuelProducedOrConsumedCountrySelector,\n  fuelProducedCountrySelector,\n} from '../../../store/countries';\nimport { statisticPeakYearSelector } from '../../../store/statistics';\n\nimport { FuelIndicatorsType } from '../../../utils/types';\n\nimport IndependencyTab from './IndependencyTab';\nimport SummaryTab from './SummaryTab';\nimport ClimateTab from './ClimateTab';\nimport ReservesAndPeaksTab from './ReservesAndPeaksTab';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n  { key: 'reserves', tab: 'Reserves and peaks' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst ReservesAndPeaksTabContainer = connect((state, { countryCode }) => ({\n  fuelProduced: fuelProducedCountrySelector(countryCode, state),\n  peaks: {\n    coal: statisticPeakYearSelector(\n      {\n        countryCode,\n        statisticCode: 'COAL_PRODUCTION_MTOE',\n      },\n      state,\n    ),\n    oil: statisticPeakYearSelector(\n      {\n        countryCode,\n        statisticCode: 'OIL_PRODUCTION_MTOE',\n      },\n      state,\n    ),\n    gas: statisticPeakYearSelector(\n      {\n        countryCode,\n        statisticCode: 'GAS_PRODUCTION_MTOE',\n      },\n      state,\n    ),\n  },\n}))(ReservesAndPeaksTab);\n\nconst tabContents = {\n  summary: SummaryTab,\n  independency: IndependencyTabContainer,\n  climate: ClimateTab,\n  reserves: ReservesAndPeaksTabContainer,\n};\n\nfunction TabsComponent(props) {\n  const {\n    currentTab,\n    countryCode,\n    onTabChange,\n    setReferenceCountry,\n    referenceCountryCode,\n    fuelProduced,\n    hasRents,\n  } = props;\n  const TabComponent = tabContents[currentTab];\n  const hasProducedFossils =\n    fuelProduced.coal || fuelProduced.oil || fuelProduced.gas;\n  const tabs = hasProducedFossils\n    ? tabList\n    : tabList.filter(d => d.key !== 'reserves');\n\n  return (\n    <Card\n      key={currentTab}\n      tabList={tabs}\n      activeTabKey={currentTab}\n      onTabChange={onTabChange}\n    >\n      <TabComponent\n        countryCode={countryCode}\n        setReferenceCountry={setReferenceCountry}\n        referenceCountryCode={referenceCountryCode}\n        hasRents={hasRents}\n      />\n    </Card>\n  );\n}\n\nTabsComponent.propTypes = {\n  currentTab: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  onTabChange: PropTypes.func.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n  fuelProduced: FuelIndicatorsType.isRequired,\n  hasRents: PropTypes.bool.isRequired,\n};\n\nexport default TabsComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { withState } from 'recompose';\nimport qs from 'qs';\n\nimport { Row, Col, Card } from 'antd';\n\nimport { fuelProducedCountrySelector } from '../../store/countries';\nimport { countryWithAreasSelector } from '../../store/otherSelectors';\n\nimport { CountryType, FuelIndicatorsType } from '../../utils/types';\nimport { isMobileOrTablet } from '../../utils';\n\nimport BasicChartContainer from './containers/BasicChartContainer';\n\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport ScrollToTop from '../../components/ScrollToTop';\nimport TabsComponent from './components/TabsComponent';\n\nconst TabsComponentWithState = withState(\n  'referenceCountryCode',\n  'setReferenceCountry',\n  props => props.referenceCountry,\n)(TabsComponent);\n\nfunction CountryView(props) {\n  const { country, goTo, currentTab, referenceCountry, fuelProduced } = props;\n\n  if (!country || country.disabled) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const countryCode = country.alpha2Code;\n  const flag = isMobileOrTablet() ? country.flagIcon : '';\n  return (\n    <div className=\"CountryView\">\n      <ScrollToTop countryCode={countryCode} />\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n            <div>{`Capital: ${country.capital}`}</div>\n            <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n            <div>\n              {`Member of: `}\n              {country.areas.map((area, i) => (\n                <Link key={area.code} to={`/area/${area.code}`}>\n                  {`${i > 0 ? ', ' : ''}${area.name}`}\n                </Link>\n              ))}\n            </div>\n            <Row style={{ marginTop: '20px' }} gutter={20}>\n              <Col xs={24} sm={24} md={24} lg={8}>\n                <BasicChartContainer\n                  statisticCode=\"POPULATION\"\n                  countryCode={countryCode}\n                  color=\"#2c82c9\"\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={8}>\n                <BasicChartContainer\n                  statisticCode=\"GDP_2010_USD\"\n                  countryCode={countryCode}\n                  color=\"#f22613\"\n                  perCapita\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={8}>\n                <BasicChartContainer\n                  statisticCode=\"HUMAN_DEVELOPMENT_INDEX\"\n                  countryCode={countryCode}\n                  color=\"green\"\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <img\n            key={countryCode}\n            style={{\n              width: '100%',\n              marginBottom: '20px',\n              maxHeight: '180px',\n            }}\n            src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n            alt={`Flag of ${country.commonName}`}\n          />\n          <GeoJSONMap geojson={country.geojson} center={country.latlng} />\n        </Col>\n      </Row>\n      <Row>\n        <TabsComponentWithState\n          countryCode={countryCode}\n          currentTab={currentTab}\n          onTabChange={tab => goTo(`/country/${countryCode}/${tab}`)}\n          referenceCountry={referenceCountry}\n          fuelProduced={fuelProduced}\n          hasRents={country.hasRents}\n        />\n      </Row>\n    </div>\n  );\n}\n\nCountryView.propTypes = {\n  currentTab: PropTypes.string,\n  country: CountryType,\n  goTo: PropTypes.func.isRequired,\n  referenceCountry: PropTypes.string,\n  fuelProduced: FuelIndicatorsType.isRequired,\n};\nCountryView.defaultProps = {\n  currentTab: 'independency',\n  country: null,\n  referenceCountry: 'WORLD',\n};\n\nexport default connect((state, props) => ({\n  currentTab: props.match.params.tab,\n  goTo: url => props.history.push(url),\n  country: countryWithAreasSelector(props.match.params.countryCode, state),\n  referenceCountry: qs.parse(props.location.search.substr(1)).referenceCountry,\n  fuelProduced: fuelProducedCountrySelector(\n    props.match.params.countryCode,\n    state,\n  ),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { withState } from 'recompose';\nimport qs from 'qs';\n\nimport { Row, Col, Card } from 'antd';\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport ScrollToTop from '../../components/ScrollToTop';\n\nimport { fuelProducedCountrySelector } from '../../store/countries';\nimport { areaWithCountriesSelector } from '../../store/otherSelectors';\nimport { AreaType, FuelIndicatorsType } from '../../utils/types';\n\nimport BasicChartContainer from '../CountryView/containers/BasicChartContainer';\nimport TabsComponent from '../CountryView/components/TabsComponent';\n\nconst TabsComponentWithState = withState(\n  'referenceCountryCode',\n  'setReferenceCountry',\n  props => props.referenceCountry,\n)(TabsComponent);\n\nfunction AreaView(props) {\n  const { area, currentTab, goTo, referenceCountry, fuelProduced } = props;\n  const latlng = [\n    area.countries.reduce((s, c) => c.latlng[0] + s, 0) / area.countries.length,\n    area.countries.reduce((s, c) => c.latlng[1] + s, 0) / area.countries.length,\n  ];\n\n  if (!area) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"AreaView\">\n      <ScrollToTop areaCode={area.code} />\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <Card title={<h2>{`${area.name}`}</h2>}>\n            {area.code !== 'WORLD' && (\n              <div>\n                {`Members : `}\n                {area.countries.map((country, i) => (\n                  <Link\n                    key={country.alpha2Code}\n                    to={`/country/${country.alpha2Code}`}\n                  >\n                    {`${i > 0 ? ', ' : ''}${country.commonName}`}\n                  </Link>\n                ))}\n              </div>\n            )}\n            <Row style={{ marginTop: '20px' }} gutter={10}>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"POPULATION\"\n                  countryCode={area.code}\n                  color=\"#2c82c9\"\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"GDP_2010_USD\"\n                  countryCode={area.code}\n                  color=\"#f22613\"\n                  perCapita\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <GeoJSONMap geojson={area.geojson} center={latlng} />\n        </Col>\n      </Row>\n      <Row>\n        <TabsComponentWithState\n          countryCode={area.code}\n          currentTab={currentTab}\n          onTabChange={tab => goTo(`/area/${area.code}/${tab}`)}\n          referenceCountry={referenceCountry}\n          fuelProduced={fuelProduced}\n        />\n      </Row>\n    </div>\n  );\n}\n\nAreaView.propTypes = {\n  area: AreaType.isRequired,\n  currentTab: PropTypes.string,\n  goTo: PropTypes.func.isRequired,\n  referenceCountry: PropTypes.string,\n  fuelProduced: FuelIndicatorsType.isRequired,\n};\n\nAreaView.defaultProps = {\n  currentTab: 'summary',\n  referenceCountry: 'WORLD',\n};\n\nexport default connect((state, props) => ({\n  currentTab: props.match.params.tab,\n  goTo: url => props.history.push(url),\n  area: areaWithCountriesSelector(props.match.params.areaCode, state),\n  referenceCountry: qs.parse(props.location.search.substr(1)).referenceCountry,\n  fuelProduced: fuelProducedCountrySelector(props.match.params.areaCode, state),\n}))(AreaView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType, AreaType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, areas, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Select a country\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.SubMenu title=\"Areas\">\n        {sortBy(a => a.name, areas).map(area => (\n          <Menu.Item key={area.code}>\n            <Link to={`/area/${area.code}`}>{area.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu.SubMenu>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  areas: PropTypes.arrayOf(AreaType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  Route, // as BaseRoute,\n  Switch,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\nimport AreaView from '../views/AreaView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\nimport {\n  loadAllAreas,\n  areasLoadedSelector,\n  areasSelector,\n} from '../store/areas';\nimport { LocationType } from '../utils/types';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\nconst AreasLoader = buildLoader(loadAllAreas);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    areas: areasSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction scrollToAnchor(location) {\n  const { hash } = location;\n\n  if (hash !== '') {\n    const id = hash.substr(1);\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'nearest',\n      });\n    }\n  }\n}\n\nclass AppLayout extends Component {\n  componentDidMount() {\n    const { location } = this.props;\n    window.onhashchange = () => scrollToAnchor(location);\n  }\n\n  componentDidUpdate() {\n    const { location } = this.props;\n    scrollToAnchor(location);\n  }\n\n  render() {\n    const { isLoaded } = this.props;\n    return (\n      <div className=\"AppLayout\">\n        <CountriesLoader />\n        <StatisticsLoader />\n        <AreasLoader />\n        <Spin size=\"large\" spinning={!isLoaded}>\n          <Layout>\n            <Layout.Header\n              style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n            >\n              <ConnectedHeaderMenu />\n            </Layout.Header>\n            <Layout.Content>\n              {!isLoaded && <div className=\"AppLayout__splash\" />}\n              {isLoaded && (\n                <Switch>\n                  <Route path=\"/home\" exact component={HomeView} />\n                  <Route\n                    path=\"/country/:countryCode/:tab?\"\n                    exact\n                    component={CountryView}\n                  />\n                  <Route\n                    path=\"/area/:areaCode/:tab?\"\n                    exact\n                    component={AreaView}\n                  />\n                  <Route path=\"/about\" exact component={AboutView} />\n                  <Route\n                    component={() => <Redirect to={{ pathname: '/home' }} />}\n                  />\n                </Switch>\n              )}\n            </Layout.Content>\n            <Layout.Footer>Sources: IEA, World Bank, HDRO</Layout.Footer>\n          </Layout>\n        </Spin>\n      </div>\n    );\n  }\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n  location: LocationType.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded:\n      countriesLoadedSelector(state) &&\n      statisticsLoadedSelector(state) &&\n      areasLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { withRouter } from 'react-router-dom';\nimport { compose, withProps } from 'recompose';\n\nimport ga from 'react-ga';\n\nconst f = title => (...args) => console.log(title, ...args);\nconst mockGa = {\n  set: () => {},\n  pageview: f('tracker.pageview'),\n};\n\nconst isDev = process.env.NODE_ENV !== 'production';\nconst tracker = isDev ? mockGa : ga;\n\nif (!isDev) ga.initialize('UA-133488135-1', { siteSpeedSampleRate: 100 });\n\nclass AnalyticsComponent extends Component {\n  componentDidMount() {\n    this.trackPage();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { location } = this.props;\n\n    if (location !== prevProps.location) {\n      this.trackPage();\n    }\n  }\n\n  trackPage() {\n    const { location } = this.props;\n    tracker.set({ location });\n    tracker.pageview(location);\n  }\n\n  render() {\n    const { children } = this.props;\n    return <div>{children}</div>;\n  }\n}\n\nAnalyticsComponent.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  children: PropTypes.any.isRequired,\n  location: PropTypes.string.isRequired,\n};\n\nexport default compose(\n  withRouter,\n  withProps(props => ({\n    location: `${props.location.pathname}${props.location.search}`,\n  })),\n)(AnalyticsComponent);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\nimport AnalyticsComponent from './components/AnalyticsComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AnalyticsComponent>\n            <AppLayout />\n          </AnalyticsComponent>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}