{"version":3,"sources":["api/country.js","store/countries.js","api/helpers.js","store/statistics.js","api/statistics.js","store/index.js","utils/types.js","utils/index.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","views/CountryView/components/PrimaryEnergyChart.jsx","views/CountryView/containers/PrimaryEnergyChartContainer.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/containers/ProdConsoCharContainer.jsx","views/CountryView/components/CountryMap.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","loaders/index.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["noData","countryMapValues","country","a","worldTopo","objects","countries","geometries","find","c","id","ccn3","Number","alpha2Code","cca2","commonName","name","common","alpha3Code","cca3","numericCode","region","subregion","isIndependent","independent","area","capital","latlng","disabled","includes","geojson","feature","getAllCountries","Promise","resolve","countriesData","filter","map","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","receiveCountriesAction","_ref","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","countrySelector","countryCode","countriesReducer","arguments","length","undefined","action","Object","objectSpread","fetchJSON","url","options","fetch","then","res","json","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","_ref2","statisticCode","receiveStatisticOfCountriesAction","_ref3","initialCountryStatistic","countryStatisticReducer","countryStatistic","d","omit","statisticsLoadedSelector","statistics","allStatisticsSelector","statisticSelector","countryStatisticSelector","_ref4","countryStatisticLoadedSelector","_ref5","countryStatisticsLoadedSelector","_ref7","statisticCodes","every","compiledCountryStatisticsSelector","_ref8","_ref11","mapOfStatisticCodes","mapOfStatisticValues","_ref6","countryStatisticValuesSelector","arrayOfStatisticValues","startingYears","statisticValues","Math","min","apply","toConsumableArray","v","year","endingYears","max","startingYear","endingYear","mapOfNamedStatisticValues","mapObjIndexed","compileName","_ref9","value","defineProperty","allValues","concat","allValuesByYear","groupBy","keys","sort","valuesOfYear","mergeAll","compiledStatisticForCountriesAndYear","_ref12","perCapita","statistic","pop","_ref13","yearValue","unit","factor","loadCountryStatistic","_ref14","dispatch","getState","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","loadCountryStatistics","_ref15","all","loadStatisticOfCountries","loadStatisticOfCountriesAction","getStatisticOfAllCountries","statisticsReducer","reduce","acc","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","PropTypes","shape","string","isRequired","number","arrayOf","object","main","base","bool","coordsToLatLng","coords","_coords","slicedToArray","longitude","latitude","L","latLng","wrap","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","dependentCountries","MAP_HEIGHT","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","indexBy","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","dragging","_colorValueMap$countr","GeoJSON","key","code","ref","leafletElement","setStyle","fillColor","fillOpacity","Tooltip","sticky","toLocaleString","stroke","background","backgroundColor","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","formatedData","s","es_select","width","placeholder","optionFilterProp","showSearch","onChange","sortBy","Option","title","slider","defaultValue","onAfterChange","debounce","included","marks","label","margin","left","right","es_radio","Group","marginBottom","buttonStyle","size","e","target","Button","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","href","defaultSortOrder","align","onRow","record","onClick","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","push","history","_this$state","row","gutter","md","col","Component","CustomTooltip","active","payload","total","sum","p","dataKey","lineHeight","toFixed","defaultProps","PrimaryEnergyChart","stacked","setStacked","dataWithTotal","coal","oil","gas","hydro","nuclear","renewables","finalData","w","pow","population","hasCoal","some","hasOil","hasGas","hasNuclear","hasHydro","hasRenewables","LineArea","Area","Line","marginRight","ResponsiveContainer","ComposedChart","top","bottom","dot","activeDot","fill","stackId","CartesianGrid","opacity","XAxis","interval","YAxis","angle","position","component_Tooltip","content","Legend","iconType","ConnectedPrimaryEnergyChart","PrimaryEnergyChartContainer","_this$props","loadStatistics","prevProps","_this$props2","_this$props3","isLoaded","spin","spinning","ProdConsoChart","fuel","prodStatistic","consoStatistic","console","warn","dataWithImportAndExport","l","diff","prod","conso","export","import","strokeOpacity","strokeWidth","offset","props2","ProdConsoChart_CustomTooltip","assign","ConnectedProdConsoChart","prodStatisticCode","consoStatisticCode","ProdConsoChartContainer","CustomGeoJSON","createGeoJSON","remove","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","CountryMap","TileLayer","attribution","CountryMap_GeoJSON","CountryView","Redirect","to","xs","sm","containers_PrimaryEnergyChartContainer","src","toLowerCase","alt","components_CountryMap","ProdConsoCharContainer","match","params","AboutView","card","rel","GitHubLink","icon","theme","HeaderMenu","goTo","menu","mode","selectable","Item","Link","onSelect","components_GitHubLink","withLoader","config","loadFunctions","_config$isLoadedSelec","isLoadedSelector","_config$mapStateToPro","mapStateToProps","loadAll","loadFunction","WrappedComponent","ConnectedWrappedComponent","load","_Component","LoaderComponent","inherits","createClass","objectWithoutProperties","otherProps","CountriesLoader","prop","StatisticsLoader","ConnectedHeaderMenu","withRouter","isReady","layout","Header","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61a78c17.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport countriesData from 'world-countries/countries';\nimport worldTopo from 'world-atlas/world/110m.json';\n\nconst noData = ['AD', 'LI', 'MH', 'FM', 'MC', 'PW', 'SM', 'TV', 'VA'];\n\nfunction countryMapValues(country) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.ccn3,\n  );\n  return {\n    id: Number(country.ccn3),\n    alpha2Code: country.cca2,\n    commonName: country.name.common,\n    alpha3Code: country.cca3,\n    numericCode: country.ccn3,\n    region: country.region,\n    subregion: country.subregion,\n    isIndependent: country.independent,\n    area: country.area,\n    capital: country.capital[0], // TODO\n    latlng: country.latlng,\n    disabled: noData.includes(country.cca2),\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nexport function getDependentCountries() {\n  return countriesData.filter(c => !c.independent).map(countryMapValues);\n}\n\nfunction getAllCountries() {\n  return Promise.resolve(\n    countriesData.filter(c => c.independent).map(countryMapValues),\n  );\n}\n\n// getAllCountries().then(data => console.log(data.filter(c => !c.geojson)));\n\nexport default getAllCountries;\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllCountries from '../api/country';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport default countriesReducer;\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","import {\n  values,\n  indexBy,\n  prop,\n  mapObjIndexed,\n  mergeAll,\n  groupBy,\n  map,\n  omit,\n} from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfCountry,\n  getStatisticOfAllCountries,\n} from '../api/statistics';\nimport { countriesSelector } from './countries';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(\n  { statisticCodes, countryCode },\n  state,\n) {\n  return statisticCodes.every(statisticCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }),\n  );\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfStatisticCodes, countryCode },\n  state,\n) {\n  const mapOfStatisticValues = map(\n    statisticCode =>\n      countryStatisticValuesSelector({ statisticCode, countryCode }, state),\n    mapOfStatisticCodes,\n  );\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => {\n      const valuesOfYear = allValuesByYear[year];\n\n      return mergeAll(valuesOfYear);\n    })\n    .filter(value => startingYear <= value.year && value.year <= endingYear);\n\n  return compiledStatistics;\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countries = countriesSelector(state);\n  const statistic = statisticSelector(statisticCode, state);\n  const mapOfStatisticCodes = {\n    value: statisticCode,\n    ...(perCapita ? { pop: 'POPULATION' } : {}),\n  };\n\n  return countries.map(({ alpha2Code: countryCode }) => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfStatisticCodes, countryCode },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n    // TODO\n    const value = yearValue && yearValue.value !== null && (yearValue.pop || !perCapita) // eslint-disable-line\n        ? perCapita\n          ? (yearValue.value * statistic.unit.factor) / yearValue.pop\n          : yearValue.value\n        : null;\n\n    return {\n      countryCode,\n      value,\n    };\n  });\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics({ statisticCodes, countryCode }) {\n  return function dispatchloadCountryStatistics(dispatch, getState) {\n    return Promise.all(\n      statisticCodes.map(statisticCode =>\n        loadCountryStatistic({ statisticCode, countryCode })(\n          dispatch,\n          getState,\n        ),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const countries = countriesSelector(getState());\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        getState(),\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n\nexport default statisticsReducer;\n","import { fetchJSON } from './helpers';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json');\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n","import L from 'leaflet';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\n// function bindEvent(countries, onCountryClick) {\n//   return function onEachFeature(feature, layer) {\n//     const country = countries.find(c => c.numericCode === feature.id);\n//     layer.on({\n//       click: () => onCountryClick(country),\n//     });\n//   };\n// }\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { getDependentCountries } from '../../../api/country';\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { coordsToLatLng, isMobileOrTablet } from '../../../utils';\n\nconst dependentCountries = getDependentCountries();\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value: 'NA' };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value: 0 };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const { countries, data, currentStatistic, currentYear, perCapita } = props;\n  const maxValue = Math.max(...data.map(d => d.value));\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${value.toLocaleString()}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              stroke: false,\n              fillColor: NA_COLOR,\n              color: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div className=\"WorldMap__legend__gradient\">\n          <div>\n            {`${currentStatistic.name} (${\n              perCapita\n                ? `${currentStatistic.unit.base}/capita`\n                : currentStatistic.unit.main\n            })`}\n          </div>\n          <div\n            className=\"WorldMap__legend__gradientColor\"\n            style={{\n              background: colorGradient,\n            }}\n          />\n          <div className=\"WorldMap__legend__gradientRange\">\n            <div>0</div>\n            <div>{maxValue.toLocaleString()}</div>\n          </div>\n        </div>\n        <div>\n          <div>{' '}</div>\n          <div\n            className=\"WorldMap__legend__NA__square\"\n            style={{ backgroundColor: NA_COLOR }}\n          />\n          <div>NA</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy } from 'ramda';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet } from '../../../utils';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country: countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet}\n        onChange={value => setStatistic(value)}\n      >\n        {sortBy(s => s.name, statistics).map(statistic => (\n          <Select.Option key={statistic.code} title={statistic.name}>\n            {`${statistic.name}`}\n          </Select.Option>\n        ))}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <Radio.Group\n        style={{ marginBottom: '10px' }}\n        buttonStyle=\"solid\"\n        size=\"small\"\n        value={perCapita}\n        onChange={e => setPerCapita(e.target.value)}\n      >\n        <Radio.Button value={false}>Absolute</Radio.Button>\n        <Radio.Button value disabled={currentStatistic.code === 'POPULATION'}>\n          Per capita\n        </Radio.Button>\n      </Radio.Group>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n          render: text => <a href=\"javascript:;\">{text}</a>, // eslint-disable-line\n          },\n          {\n            title: perCapita\n              ? `${currentStatistic.unit.base}/capita`\n              : currentStatistic.unit.main,\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: value => value.toLocaleString(),\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport { countriesSelector } from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n} from '../../store/statistics';\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { map, omit } from 'ramda';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { Radio } from 'antd';\n\nfunction CustomTooltip(props) {\n  const { active, payload } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label } = props;\n    const { unit } = payload[0];\n    const total = payload.reduce((sum, { value }) => sum + value, 0);\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${p.value.toLocaleString()} ${p.unit}`}\n              </div>\n            ))}\n          <div key=\"total\" style={{ lineHeight: '22px', color: 'red' }}>\n            {`Total : ${Number(total.toFixed(2)).toLocaleString()} ${unit}`}\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n};\n\nfunction PrimaryEnergyChart(props) {\n  const { data, stacked, setStacked, perCapita, setPerCapita } = props;\n  const unit = perCapita ? ' toe/capita' : ' Mtoe';\n\n  const dataWithTotal = data.map(v => ({\n    ...v,\n    total: Number(\n      (v.coal + v.oil + v.gas + v.hydro + v.nuclear + v.renewables).toFixed(2),\n    ),\n  }));\n  const finalData = perCapita\n    ? dataWithTotal.map(v => ({\n        ...v,\n        ...map(\n          w => Number(((w * 10 ** 6) / v.population).toFixed(2)),\n          omit(['year', 'population'], v),\n        ),\n      }))\n    : dataWithTotal;\n\n  const hasCoal = data.some(v => v.coal >= 0.01);\n  const hasOil = data.some(v => v.oil >= 0.01);\n  const hasGas = data.some(v => v.gas >= 0.01);\n  const hasNuclear = data.some(v => v.nuclear >= 0.01);\n  const hasHydro = data.some(v => v.hydro >= 0.01);\n  const hasRenewables = data.some(v => v.renewables >= 0.01);\n\n  const LineArea = stacked ? Area : Line;\n\n  return (\n    <div className=\"PrimaryEnergyChart\">\n      <h3 className=\"PrimaryEnergyChart__title\">Primary Energy Consumption</h3>\n      <div>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={stacked}\n          onChange={e => setStacked(e.target.value)}\n          style={{ marginRight: '10px' }}\n        >\n          <Radio.Button value>Stacked</Radio.Button>\n          <Radio.Button value={false}>Split</Radio.Button>\n        </Radio.Group>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button value>Per capita</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ResponsiveContainer height={300} width=\"100%\">\n        <ComposedChart\n          data={finalData}\n          margin={{ top: 10, right: 0, bottom: 10, left: 0 }}\n        >\n          {hasCoal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasOil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasGas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasNuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasHydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasRenewables && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"renewables\"\n              dot={false}\n              activeDot={false}\n              name=\"Other renewables\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            label={{\n              value: unit,\n              angle: -90,\n              position: 'insideLeft',\n            }}\n          />\n          <Tooltip content={CustomTooltip} />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nPrimaryEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      renewables: PropTypes.number,\n      total: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default PrimaryEnergyChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport PrimaryEnergyChart from '../components/PrimaryEnergyChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst mapOfStatisticCodes = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_CONSUMPTION_MTOE',\n  nuclear: 'NUCLEAR_CONSUMPTION_MTOE',\n  renewables: 'NON_HYDRO_RENEWABLES_CONSUMPTION_MTOE',\n  population: 'POPULATION',\n};\nconst statisticCodes = values(mapOfStatisticCodes);\n\nconst ConnectedPrimaryEnergyChart = connect((state, { countryCode }) => ({\n  data: compiledCountryStatisticsSelector(\n    {\n      mapOfStatisticCodes,\n      countryCode,\n    },\n    state,\n  ),\n}))(PrimaryEnergyChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stacked: true,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { countryCode, loadStatistics } = this.props;\n\n    loadStatistics({ statisticCodes, countryCode });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistics } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  setStacked(stacked) {\n    this.setState({ stacked });\n  }\n\n  setPerCapita(perCapita) {\n    this.setState({ perCapita });\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n    const { stacked, perCapita } = this.state;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedPrimaryEnergyChart\n          countryCode={countryCode}\n          setStacked={value => this.setStacked(value)}\n          setPerCapita={value => this.setPerCapita(value)}\n          stacked={stacked}\n          perCapita={perCapita}\n        />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded: countryStatisticsLoadedSelector(\n      {\n        statisticCodes,\n        countryCode: props.countryCode,\n      },\n      state,\n    ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(PrimaryEnergyChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\n\nfunction CustomTooltip(props) {\n  const { active } = props;\n\n  if (active) {\n    const { payload, label, filter } = props;\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.filter(filter).map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${p.value.toLocaleString()} ${p.unit}`}\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n  filter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  filter: i => i,\n};\n\nfunction ProdConsoChart(props) {\n  const {\n    fuel,\n    prodStatistic,\n    consoStatistic,\n    // reservesStatistic,\n    data,\n  } = props;\n\n  if (consoStatistic.unit !== prodStatistic.unit) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <h3>{fuel}</h3>\n      <ResponsiveContainer height={250} width=\"100%\">\n        <ComposedChart\n          data={dataWithImportAndExport}\n          margin={{ top: 30, right: 20, bottom: 5, left: 20 }}\n        >\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={1}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={1}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#880000\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          {/* {reservesStatisticCode && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reserves\"\n              dot={false}\n              unit={reservesStatistic.unit}\n              stroke=\"blue\"\n              strokeWidth={3}\n              strokeOpacity={0.7}\n              name={reservesStatistic.name}\n              yAxisId=\"1\"\n            />\n          )} */}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis\n            label={{ value: unit, position: 'insideTopLeft', offset: -20 }}\n          />\n          {/* {reservesStatisticCode && (\n            <YAxis\n              orientation=\"right\"\n              label={{\n                value: reservesStatistic.unit,\n                position: 'insideTopRight',\n                offset: -20,\n              }}\n              yAxisId=\"1\"\n            />\n          )} */}\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip {...props2} filter={p => p.name !== 'base'} />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nconst Statistic = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.string.isRequired,\n});\n\nProdConsoChart.propTypes = {\n  prodStatistic: Statistic.isRequired,\n  consoStatistic: Statistic.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Spin } from 'antd';\n\nimport ProdConsoChart from '../components/ProdConsoChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst ConnectedProdConsoChart = connect((state, props) => ({\n  prodStatistic: statisticSelector(props.prodStatisticCode, state),\n  consoStatistic: statisticSelector(props.consoStatisticCode, state),\n  data: compiledCountryStatisticsSelector(\n    {\n      mapOfStatisticCodes: {\n        prod: props.prodStatisticCode,\n        conso: props.consoStatisticCode,\n      },\n      countryCode: props.countryCode,\n    },\n    state,\n  ),\n}))(ProdConsoChart);\n\nclass ProdConsoChartContainer extends Component {\n  componentDidMount() {\n    const {\n      consoStatisticCode,\n      prodStatisticCode,\n      countryCode,\n      loadStatistics,\n    } = this.props;\n    const statisticCodes = [consoStatisticCode, prodStatisticCode];\n    loadStatistics({ statisticCodes, countryCode });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      countryCode,\n      loadStatistics,\n      consoStatisticCode,\n      prodStatisticCode,\n    } = this.props;\n    const statisticCodes = [consoStatisticCode, prodStatisticCode];\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  render() {\n    const {\n      isLoaded,\n      fuel,\n      consoStatisticCode,\n      prodStatisticCode,\n      countryCode,\n    } = this.props;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedProdConsoChart\n          fuel={fuel}\n          consoStatisticCode={consoStatisticCode}\n          prodStatisticCode={prodStatisticCode}\n          countryCode={countryCode}\n        />\n      </Spin>\n    );\n  }\n}\n\nProdConsoChartContainer.propTypes = {\n  prodStatisticCode: PropTypes.string.isRequired,\n  consoStatisticCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  fuel: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded: countryStatisticsLoadedSelector(\n      {\n        statisticCodes: [props.prodStatisticCode, props.consoStatisticCode],\n        countryCode: props.countryCode,\n      },\n      state,\n    ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(ProdConsoChartContainer);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../../../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction CountryMap(props) {\n  const { country } = props;\n\n  return (\n    <div className=\"CountryMap\">\n      <Map\n        center={country.latlng}\n        zoom={2}\n        style={{ height: '300px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {country.geojson && <GeoJSON data={country.geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nCountryMap.propTypes = {\n  country: PropTypes.shape({\n    latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n    area: PropTypes.number.isRequired,\n    geojson: PropTypes.object.isRequired,\n  }).isRequired,\n};\n\nexport default CountryMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Redirect } from 'react-router-dom';\n\nimport { Row, Col } from 'antd';\n\nimport { countrySelector } from '../../store/countries';\n\nimport PrimaryEnergyChartContainer from './containers/PrimaryEnergyChartContainer';\nimport ProdConsoChartContainer from './containers/ProdConsoCharContainer';\nimport CountryMap from './components/CountryMap';\n\nfunction CountryView(props) {\n  const { country } = props;\n\n  if (!country || country.disabled) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const countryCode = country.alpha2Code;\n  return (\n    <div className=\"CountryView\">\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <h2>{country.commonName}</h2>\n          <div>{`Capital: ${country.capital}`}</div>\n          <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n          <div>\n            <PrimaryEnergyChartContainer countryCode={country.alpha2Code} />\n          </div>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <img\n            style={{ height: '100px' }}\n            src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n            alt={`Flag of ${country.commonName}`}\n          />\n          <CountryMap country={country} />\n        </Col>\n      </Row>\n      <Row>\n        <h3>Imports/Exports</h3>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n            fuel=\"Coal\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n            fuel=\"Oil\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n            consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n            fuel=\"Gas\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nCountryView.propTypes = {\n  country: PropTypes.shape({\n    alpha2Code: PropTypes.string.isRequired,\n    commonName: PropTypes.string.isRequired,\n  }),\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countrySelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.Item key=\"home\">\n        <Link to=\"/about\">\n          About\n          {/* <strong>About</strong> */}\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { loadAllCountries } from '../store/countries';\nimport {\n  loadAllStatistics,\n  loadStatisticOfCountries,\n} from '../store/statistics';\n\nexport function withLoader(config) {\n  const {\n    loadFunctions,\n    isLoadedSelector = () => false,\n    mapStateToProps = () => {},\n  } = config;\n\n  const loadAll = props => (dispatch, getState) =>\n    loadFunctions.map(loadFunction => loadFunction(props)(dispatch, getState));\n\n  return function wrapLoaderHOC(WrappedComponent) {\n    const ConnectedWrappedComponent = WrappedComponent\n      ? connect(mapStateToProps)(WrappedComponent)\n      : () => null;\n\n    return connect(\n      (state, props) => ({\n        isLoaded: isLoadedSelector(props, state),\n      }),\n      { load: loadAll },\n    )(\n      class LoaderComponent extends Component {\n        static propTypes = {\n          load: PropTypes.func.isRequired,\n          isLoaded: PropTypes.bool.isRequired,\n        };\n\n        componentDidMount() {\n          const { load, isLoaded, ...args } = this.props;\n          load(args);\n        }\n\n        render() {\n          const { isLoaded, load, ...otherProps } = this.props;\n\n          if (!isLoaded) {\n            return null;\n          }\n          return <ConnectedWrappedComponent {...otherProps} />;\n        }\n      },\n    );\n  };\n}\n\nexport const CountriesLoader = withLoader({\n  loadFunctions: [loadAllCountries],\n})();\n\nexport const StatisticsLoader = withLoader({\n  loadFunctions: [loadAllStatistics],\n})();\n\nexport const StatisticAllCountriesLoader = withLoader({\n  loadFunctions: [\n    ({ statisticCode }) => loadStatisticOfCountries(statisticCode),\n  ],\n})();\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport { CountriesLoader, StatisticsLoader } from '../loaders';\n\nimport { countriesLoadedSelector, countriesSelector } from '../store/countries';\nimport { statisticsLoadedSelector } from '../store/statistics';\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isReady } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      {!isReady && <Spin size=\"large\" />}\n      {isReady && (\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            <Switch>\n              <Route path=\"/home\" exact component={HomeView} />\n              <Route\n                path=\"/country/:countryCode\"\n                exact\n                component={CountryView}\n              />\n              <Route path=\"/about\" exact component={AboutView} />\n              <Route\n                component={() => <Redirect to={{ pathname: '/home' }} />}\n              />\n            </Switch>\n          </Layout.Content>\n          <Layout.Footer>Sources: IEA, EIA, World Data Bank</Layout.Footer>\n        </Layout>\n      )}\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isReady: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isReady: countriesLoadedSelector(state) && statisticsLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}