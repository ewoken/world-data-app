{"version":3,"sources":["api/countries.js","store/countries.js","utils/index.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","api/areas.js","store/areas.js","store/index.js","utils/types.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","store/otherSelectors.js","components/GeoJSONMap.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","HOC/buildChart.jsx","views/CountryView/components/CustomTooltip.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","views/AreaView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["countryMapValues","country","worldTopo","a","objects","countries","geometries","find","c","id","numericCode","Object","objectSpread","geojson","feature","_callee","_ref","_ref2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","map","p","then","res","json","sent","slicedToArray","abrupt","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","dependentCountriesSelector","countrySelector","countryCode","countriesReducer","arguments","length","undefined","action","coordsToLatLng","coords","_coords","longitude","latitude","L","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","value","Number","isNaN","toPrecision","toLocaleString","tickFormatter","displayUnit","unit","perCapita","concat","base","main","parseMapOfStatistics","mapOfCountryStatistics","defaultCountry","parsed","statistics","statisticCode","countryCodes","uniq","d","populations","mergeAll","defineProperty","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","statistic","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref4","compiledCountryStatisticsSelector","_ref3","year","sources","objectWithoutProperties","isFinite","computeDerivedValueFromCompiled","countryStatisticsLoadedSelector","countryStatitics","statisticOfAllCountriesLoadedSelector","alpha2Code","_ref5","_ref9","parsedMapOfCountryStatistics","mapOfStatistic","_ref6","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","statisticValues","Math","min","apply","toConsumableArray","v","endingYears","max","computeYearInterval","_computeYearInterval2","startingYear","endingYear","mapOfNamedStatisticValues","mapObjIndexed","compileName","_ref7","allValues","allValuesByYear","groupBy","keys","sort","compiledValue","popCompileName","population","factor","populationFactor","computeValue","omit","energySourceCountryConsumedSelector","some","coal","gas","oil","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","compiledStatisticForCountriesAndYear","_ref10","push","yearValue","fetchJSON","url","options","MTOE_UNIT","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","derivedStatistics","code","name","description","consumption","production","sourceAttribution","category","isIntensive","energy","gdp","co2","geothSolarWindTide","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","countryStatistics","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","initialCountryStatistic","countryStatisticReducer","statisticsReducer","reduce","acc","WORLD","indexedCountries","indexBy","cca2","countriesData","computeGeojson","area","countryAlpha3Codes","ccn3","includes","merge","AREAS_LOAD_ACTION","AREAS_RECEIVE_ACTION","receiveAreasAction","areasLoadedSelector","areas","areasSelector","areasReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","CountryType","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","number","latlng","arrayOf","object","MAP_HEIGHT","bool","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","dependentCountries","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","dragging","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","background","backgroundColor","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","formatedData","s","statisticByCategory","es_select","width","placeholder","optionFilterProp","showSearch","onChange","stats","OptGroup","label","sortBy","Option","title","slider","defaultValue","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","size","e","target","Button","disabled","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","href","defaultSortOrder","align","onRow","record","onClick","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","countryWithAreasSelector","areasOfCountrySelector","areaWithCountriesSelector","areaCode","areaSelector","CustomGeoJSON","createGeoJSON","prevProps","remove","_this$props","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","GeoJSONMap","TileLayer","attribution","GeoJSONMap_GeoJSON","Loader","load","prevOtherProps","_this$props2","otherProps","equals","buildLoader","loadFunction","StatisticsLoader","defaultSelector","withCountryStatistic","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","baseMapOfCountryStatistics","worldReference","world","computeMapOfCountryStatistics","pickBy","k","startsWith","spin","spinning","defaultHeight","ChartSettings","perCapitaSwitch","stackedSwitch","stacked","setStacked","es_switch","checked","buildChart","_options$perCapitaSwi","_options$stackedSwitc","hocs","hasSettings","withStateHandlers","_ref$defaultPerCapita","defaultPerCapita","_ref$defaultStacked","defaultStacked","withCountryStatistics","WrappedChart","compose","finalHeight","popover","content","placement","icon","fontSize","marginRight","theme","assign","CustomTooltip","active","separator","payload","withTotal","displayFilter","totalFilter","filteredPayload","_payload$","_payload$$formatter","formatter","total","sum","totalUnit","_p$formatter","dataKey","defaultProps","EnergyMixChart","sourceConsumed","coalUnit","LineArea","Area","Line","console","warn","ResponsiveContainer","ComposedChart","dot","activeDot","stroke","fill","stackId","strokeWidth","CartesianGrid","opacity","XAxis","interval","YAxis","component_Tooltip","props2","components_CustomTooltip","Legend","iconType","EnergyMixChartBuilded","EnergyMixChartContainer","primaryMap","primaryReference","electrictyMap","electricityReference","SummaryTab","containers_EnergyMixChartContainer","marginTop","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","dataWithImportAndExport","l","diff","toFixed","export","import","strokeOpacity","BasicChart","LineChart","padding","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","IndependencyTab","sm","BasicChartContainer","ClimateTab","tabList","tab","tabContent","summary","components_SummaryTab","independency","components_IndependencyTab","climate","components_ClimateTab","CountryView","currentTab","tabKey","Redirect","to","flag","flagIcon","xs","card","Link","lg","maxHeight","src","toLowerCase","alt","components_GeoJSONMap","activeTabKey","onTabChange","setTab","match","params","AboutView","rel","AreaView","GitHubLink","HeaderMenu","goTo","menu","mode","selectable","lineHeight","Item","onSelect","SubMenu","components_GitHubLink","CountriesLoader","prop","AreasLoader","_getAreas","getAllAreas","ConnectedHeaderMenu","withRouter","AppLayout_StatisticsLoader","layout","Header","position","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2f3c534.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\n\nfunction countryMapValues(country, worldTopo) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  return {\n    ...country,\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nasync function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [fetch('/data/countries.json'), fetch('/data/worldTopo.json')].map(p =>\n      p.then(res => res.json()),\n    ),\n  );\n  return countries.map(country => countryMapValues(country, worldTopo));\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport default countriesReducer;\n","import L from 'leaflet';\nimport { map, uniq, values, mergeAll } from 'ramda';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n\nexport function parseMapOfStatistics(\n  mapOfCountryStatistics,\n  defaultCountry,\n  perCapita,\n) {\n  const parsed = map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n\n  if (!perCapita) {\n    return parsed;\n  }\n\n  const countryCodes = uniq(values(parsed).map(d => d.countryCode));\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...populations,\n    ...parsed,\n  };\n}\n","import { values, mapObjIndexed, mergeAll, groupBy, map, omit } from 'ramda';\nimport { countriesSelector } from '../countries';\nimport { parseMapOfStatistics } from '../../utils';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, value: null }\n      : { year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(countryStatitics, state) {\n  return countryStatitics.every(countryStatistic =>\n    countryStatisticLoadedSelector(countryStatistic, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (perCapita && !population)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfCountryStatistics, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    parsedMapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    parsedMapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .map(year => Number(year))\n    .filter(year => startingYear <= year && year <= endingYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          parsedMapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\n\nexport function energySourceCountryConsumedSelector(countryCode, state) {\n  const check = d => d.value > 0.01;\n  const statisticCodeMap = {\n    coal: 'COAL_CONSUMPTION_MTOE',\n    gas: 'GAS_CONSUMPTION_MTOE',\n    oil: 'OIL_CONSUMPTION_MTOE',\n    hydro: 'HYDRO_PRODUCTION_MTOE',\n    nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n    solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n  };\n  return map(\n    statisticCode =>\n      countryStatisticValuesSelector(\n        { statisticCode, countryCode },\n        state,\n      ).some(check),\n    statisticCodeMap,\n  );\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","const PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description: '',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description: '',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: '',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description: '',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      const countryStatistics = sourceCodes.map(sourceCode => ({\n        statisticCode: sourceCode,\n        countryCode,\n      }));\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics(countryStatistics),\n      );\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics(countryStatistics) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      countryStatistics.map(countryStatistic =>\n        dispatch(loadCountryStatistic(countryStatistic)),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import worldTopo from 'world-atlas/world/110m.json';\nimport countriesData from 'world-countries/countries';\nimport { merge } from 'topojson-client';\nimport { indexBy } from 'ramda';\n\nconst indexedCountries = indexBy(c => c.cca2, countriesData);\n\nfunction computeGeojson(area) {\n  const countryAlpha3Codes = area.countryCodes.map(\n    countryCode => indexedCountries[countryCode].ccn3,\n  );\n  const geometries = worldTopo.objects.countries.geometries.filter(c =>\n    countryAlpha3Codes.includes(c.id),\n  );\n  return merge(worldTopo, geometries);\n}\n\nexport default async function getAreas() {\n  const res = await fetch('/data/areas.json');\n  const data = await res.json();\n\n  return data.map(area => ({\n    ...area,\n    geojson: area.countryCodes ? computeGeojson(area) : null,\n  }));\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllAreas from '../api/areas';\n\nexport const AREAS_LOAD_ACTION = 'AREAS_LOAD_ACTION';\nexport const AREAS_RECEIVE_ACTION = 'AREAS_RECEIVE_ACTION';\n\nfunction loadAreasAction() {\n  return { type: AREAS_LOAD_ACTION };\n}\n\nfunction receiveAreasAction({ data, errors }) {\n  return { type: AREAS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllAreas() {\n  return function dispatchLoadAllAreas(dispatch) {\n    dispatch(loadAreasAction());\n    return getAllAreas()\n      .then(data =>\n        dispatch(\n          receiveAreasAction({\n            data: indexBy(prop('code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveAreasAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction areasReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case AREAS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case AREAS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function areasLoadedSelector(state) {\n  return state.areas.loaded;\n}\n\nexport function areasSelector(state) {\n  return values(state.areas.data);\n}\n\nexport function areaSelector(areaCode, state) {\n  return state.areas.data[areaCode];\n}\n\nexport function areasOfCountrySelector(countryCode, state) {\n  return values(state.areas.data).filter(\n    area => area.countryCodes && area.countryCodes.includes(countryCode),\n  );\n}\n\nexport default areasReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\nimport areasReducer from './areas';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n  areas: areasReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n\nexport const AreaType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  countries: PropTypes.arrayOf(CountryType),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n  } = props;\n  const maxValue = Math.max(\n    ...data.filter(d => d.countryCode !== 'WORLD').map(d => d.value),\n  );\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: 'white',\n                  weight: 0.5,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(value)}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          {`${currentStatistic.name} (${displayUnit(\n            currentStatistic.unit,\n            perCapita,\n          )})`}\n        </div>\n        <div className=\"WorldMap__legend__colors\">\n          <div>\n            <div\n              className=\"WorldMap__legend__gradient\"\n              style={{\n                background: colorGradient,\n              }}\n            />\n            <div className=\"WorldMap__legend__gradientRange\">\n              <div>0</div>\n              <div>{formatNumber(maxValue)}</div>\n            </div>\n          </div>\n          <div>\n            <div\n              className=\"WorldMap__legend__NA__square\"\n              style={{ backgroundColor: NA_COLOR }}\n            />\n            <div>NA</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy, groupBy } from 'ramda';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <Radio.Group\n        style={{ marginBottom: '10px' }}\n        buttonStyle=\"solid\"\n        size=\"small\"\n        value={perCapita}\n        onChange={e => setPerCapita(e.target.value)}\n      >\n        <Radio.Button value={false}>Absolute</Radio.Button>\n        <Radio.Button\n          value\n          disabled={\n            currentStatistic.code === 'POPULATION' ||\n            currentStatistic.isIntensive\n          }\n        >\n          Per capita\n        </Radio.Button>\n      </Radio.Group>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n} from '../../store/statistics';\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import { countrySelector, countriesSelector } from './countries';\nimport { areaSelector, areasOfCountrySelector } from './areas';\n\nexport function countryWithAreasSelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  const areas = areasOfCountrySelector(countryCode, state);\n\n  return {\n    ...country,\n    areas,\n  };\n}\n\nexport function areaWithCountriesSelector(areaCode, state) {\n  const area = areaSelector(areaCode, state);\n  const countries = area.countryCodes\n    ? area.countryCodes\n        .map(countryCode => countrySelector(countryCode, state))\n        .filter(c => !!c)\n    : countriesSelector(state);\n  return {\n    ...area,\n    countries,\n  };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction GeoJSONMap(props) {\n  const { geojson, center } = props;\n\n  return (\n    <div className=\"GeoJSONMap\">\n      <Map center={center} zoom={2} style={{ height: '300px', zIndex: 0 }}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {geojson && <GeoJSON data={geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nGeoJSONMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  geojson: PropTypes.object.isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default GeoJSONMap;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values, pickBy } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n} from '../store/statistics';\nimport { parseMapOfStatistics } from '../utils';\n\nconst StatisticsLoader = buildLoader(({ countryStatistics }) =>\n  loadCountryStatistics(countryStatistics),\n);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction computeMapOfCountryStatistics({\n  baseMapOfCountryStatistics,\n  countryCode,\n  perCapita,\n  worldReference,\n}) {\n  const mapOfCountryStatisticsWithReference =\n    perCapita && worldReference\n      ? {\n          ...baseMapOfCountryStatistics,\n          world: {\n            countryCode: 'WORLD',\n            statisticCode: worldReference,\n          },\n        }\n      : baseMapOfCountryStatistics;\n\n  return parseMapOfStatistics(\n    mapOfCountryStatisticsWithReference,\n    countryCode,\n    perCapita,\n  );\n}\n\nfunction withCountryStatistic(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) => {\n      const baseMapOfCountryStatistics =\n        props.mapOfCountryStatistics ||\n        mapOfCountryStatisticsSelector(state, props);\n      const mapOfCountryStatistics = computeMapOfCountryStatistics({\n        baseMapOfCountryStatistics,\n        countryCode: props.countryCode,\n        perCapita: props.perCapita,\n        worldReference: props.worldReference,\n      });\n      const countryStatistics = values(mapOfCountryStatistics);\n\n      return {\n        data: compiledCountryStatisticsSelector(\n          {\n            mapOfCountryStatistics,\n            countryCode: props.countryCode,\n            perCapita: props.perCapita,\n          },\n          state,\n        ),\n        statistics: map(\n          ({ statisticCode }) => statisticSelector(statisticCode, state),\n          // in order to remove pop statistics added for computation TODO\n          pickBy((v, k) => !k.startsWith('pop/'), mapOfCountryStatistics),\n        ),\n        isLoaded: countryStatisticsLoadedSelector(countryStatistics, state),\n        countryStatistics,\n        perCapita: props.perCapita || false,\n      };\n    })(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader countryStatistics={props.countryStatistics} />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistic;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { values } from 'ramda';\nimport { withStateHandlers, compose } from 'recompose';\n\nimport { Icon, Popover, Switch } from 'antd';\n\nimport withCountryStatistics from './withCountryStatistics';\nimport { displayUnit } from '../utils';\n\nconst defaultHeight = 200;\n\nfunction ChartSettings(props) {\n  const {\n    perCapitaSwitch,\n    stackedSwitch,\n    perCapita,\n    stacked,\n    setPerCapita,\n    setStacked,\n  } = props;\n\n  return (\n    <div className=\"ChartSettings\">\n      {perCapitaSwitch && (\n        <div>\n          {'Per capita '}\n          <Switch size=\"small\" checked={perCapita} onChange={setPerCapita} />\n        </div>\n      )}\n      {stackedSwitch && (\n        <div>\n          {'Stacked '}\n          <Switch size=\"small\" checked={stacked} onChange={setStacked} />\n        </div>\n      )}\n    </div>\n  );\n}\nChartSettings.propTypes = {\n  perCapitaSwitch: PropTypes.bool.isRequired,\n  stackedSwitch: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  setStacked: PropTypes.func.isRequired,\n};\n\nfunction buildChart(options = {}) {\n  const {\n    mapOfCountryStatisticsSelector,\n    perCapitaSwitch = false,\n    stackedSwitch = false,\n  } = options;\n  const hocs = [];\n  const hasSettings = perCapitaSwitch || stackedSwitch;\n\n  if (hasSettings) {\n    hocs.push(\n      withStateHandlers(\n        ({ defaultPerCapita = false, defaultStacked = false }) => ({\n          perCapita: defaultPerCapita,\n          stacked: defaultStacked,\n        }),\n        {\n          setPerCapita: () => perCapita => ({ perCapita }),\n          setStacked: () => stacked => ({ stacked }),\n        },\n      ),\n    );\n  }\n  hocs.push(withCountryStatistics(mapOfCountryStatisticsSelector));\n\n  return function buildChartWrapper(WrappedChart) {\n    return compose(...hocs)(props => {\n      const {\n        title,\n        statistics,\n        height,\n        perCapita,\n        stacked,\n        setPerCapita,\n        setStacked,\n      } = props;\n      const statistic = values(statistics)[0];\n      const finalHeight = options.height || height || defaultHeight;\n\n      return (\n        <div className=\"ChartWrapper\">\n          <div className=\"ChartWrapper__header\">\n            <div className=\"ChartWrapper__header__left\">\n              <span className=\"ChartWrapper__title\">\n                {title || statistic.name}\n              </span>\n              <small>{` (${displayUnit(statistic.unit, perCapita)})`}</small>\n            </div>\n            <div className=\"ChartWrapper__header__right\">\n              <Popover\n                title=\"Source(s)\"\n                content={statistic.sourceAttribution}\n                placement=\"bottomRight\"\n              >\n                <Icon\n                  type=\"bars\"\n                  style={{ fontSize: '15px', marginRight: '5px' }}\n                />\n              </Popover>\n              {hasSettings && (\n                <Popover\n                  title=\"Settings\"\n                  content={\n                    // eslint-disable-next-line react/jsx-wrap-multilines\n                    <ChartSettings\n                      perCapitaSwitch={perCapitaSwitch}\n                      stackedSwitch={stackedSwitch}\n                      stacked={stacked}\n                      perCapita={perCapita}\n                      setPerCapita={setPerCapita}\n                      setStacked={setStacked}\n                    />\n                  }\n                  placement=\"bottomRight\"\n                >\n                  <Icon\n                    type=\"setting\"\n                    theme=\"filled\"\n                    style={{ fontSize: '15px' }}\n                  />\n                </Popover>\n              )}\n            </div>\n          </div>\n\n          <WrappedChart\n            {...props}\n            height={finalHeight}\n            perCapita={perCapita}\n            stacked={stacked}\n          />\n          <div className=\"ChartWrapper__footer\" />\n        </div>\n      );\n    });\n  };\n}\n\nexport default buildChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label, displayFilter, totalFilter } = props;\n    const filteredPayload = payload.filter(displayFilter);\n\n    if (filteredPayload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload\n      .filter(totalFilter)\n      .reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = filteredPayload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {filteredPayload.map(p => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  withTotal: PropTypes.bool,\n  displayFilter: PropTypes.func,\n  totalFilter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  withTotal: false,\n  displayFilter: i => i,\n  totalFilter: i => i,\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { values } from 'ramda';\n\nimport { tickFormatter, displayUnit } from '../../../utils';\nimport { StatisticType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nfunction EnergyMixChart(props) {\n  const { data, stacked, perCapita, sourceConsumed, statistics } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart data={data}>\n          {sourceConsumed.coal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.oil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.gas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.nuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.hydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.biofuelsWaste && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"biofuelsWaste\"\n              dot={false}\n              activeDot={false}\n              name=\"Biofuels & Waste\"\n              stroke=\"saddlebrown\"\n              fill=\"saddlebrown\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.solarWindTideGeoth && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"solarWindTideGeoth\"\n              dot={false}\n              activeDot={false}\n              name=\"Geothermy, Wind, Solar & Tide\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={p => p.name !== 'World'}\n              />\n            )}\n          />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  sourceConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default EnergyMixChart;\n","import { connect } from 'react-redux';\n\nimport buildChart from '../../../HOC/buildChart';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport { energySourceCountryConsumedSelector } from '../../../store/statistics';\n\nconst EnergyMixChartBuilded = buildChart({\n  perCapitaSwitch: true,\n  stackedSwitch: true,\n})(EnergyMixChart);\n\nconst EnergyMixChartContainer = connect((state, { countryCode }) => ({\n  sourceConsumed: energySourceCountryConsumedSelector(countryCode, state),\n}))(EnergyMixChartBuilded);\n\nexport default EnergyMixChartContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nfunction SummaryTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <div>\n        <EnergyMixChartContainer\n          title=\"Primary energy consumption\"\n          countryCode={countryCode}\n          mapOfCountryStatistics={primaryMap}\n          worldReference={primaryReference}\n          defaultPerCapita\n          defaultStacked\n        />\n      </div>\n      <div id=\"test\" style={{ marginTop: '20px' }}>\n        <EnergyMixChartContainer\n          title=\"Electricity generation by fuels\"\n          countryCode={countryCode}\n          mapOfCountryStatistics={electrictyMap}\n          worldReference={electricityReference}\n          defaultPerCapita\n          defaultStacked\n        />\n      </div>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data, height } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={dataWithImportAndExport}>\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                displayFilter={p => p.name !== 'base'}\n              />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const { data, statistics, color, perCapita, height } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"BasicChart\">\n      <ResponsiveContainer height={height}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={statistic.name}\n            unit={` ${unit}`}\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={props2 => <CustomTooltip {...props2} />} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default BasicChart;\n","import buildChart from '../../../HOC/buildChart';\nimport BasicChart from '../components/BasicChart';\n\nexport default buildChart()(BasicChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport buildChart from '../../../HOC/buildChart';\nimport ProdConsoChart from './ProdConsoChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst ProdConsoChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: (state, props) => ({\n    prod: props.prodStatisticCode,\n    conso: props.consoStatisticCode,\n  }),\n})(ProdConsoChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <h3>Imports/Exports</h3>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n            fuel=\"Coal\"\n            title=\"Coal Trade\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n            fuel=\"Oil\"\n            title=\"Oil Trade\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n            consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n            fuel=\"Gas\"\n            title=\"Gas Trade\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nfunction ClimateTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_EMISSIONS_MT\"\n            perCapita\n            countryCode={countryCode}\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            perCapita\n            countryCode={countryCode}\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_INTENSITY_OF_ENERGY\"\n            countryCode={countryCode}\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\n\n// import { countrySelector } from '../../store/countries';\nimport { countryWithAreasSelector } from '../../store/otherSelectors';\nimport { CountryType } from '../../utils/types';\n\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport SummaryTab from './components/SummaryTab';\nimport IndependencyTab from './components/IndependencyTab';\nimport ClimateTab from './components/ClimateTab';\n\nimport BasicChartContainer from './containers/BasicChartContainer';\nimport { isMobileOrTablet } from '../../utils';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst tabContent = {\n  summary: countryCode => <SummaryTab countryCode={countryCode} />,\n  independency: countryCode => <IndependencyTab countryCode={countryCode} />,\n  climate: countryCode => <ClimateTab countryCode={countryCode} />,\n};\n\nclass CountryView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { country } = this.props;\n    const { currentTab } = this.state;\n\n    if (!country || country.disabled) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const countryCode = country.alpha2Code;\n    const flag = isMobileOrTablet() ? country.flagIcon : '';\n    return (\n      <div className=\"CountryView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n              <div>{`Capital: ${country.capital}`}</div>\n              <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n              <div>\n                {`Member of: `}\n                {country.areas.map((area, i) => (\n                  <Link key={area.code} to={`/area/${area.code}`}>\n                    {`${i > 0 ? ', ' : ''}${area.name}`}\n                  </Link>\n                ))}\n              </div>\n              <Row style={{ marginTop: '20px' }} gutter={20}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"POPULATION\"\n                    countryCode={countryCode}\n                    color=\"#2c82c9\"\n                  />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"GDP_2010_USD\"\n                    countryCode={countryCode}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <img\n              style={{\n                width: '100%',\n                marginBottom: '20px',\n                maxHeight: '180px',\n              }}\n              src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n              alt={`Flag of ${country.commonName}`}\n            />\n            <GeoJSONMap geojson={country.geojson} center={country.latlng} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](countryCode)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nCountryView.propTypes = {\n  country: CountryType,\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countryWithAreasSelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\nimport GeoJSONMap from '../../components/GeoJSONMap';\n\nimport { areaWithCountriesSelector } from '../../store/otherSelectors';\nimport { AreaType } from '../../utils/types';\n\nimport SummaryTab from '../CountryView/components/SummaryTab';\nimport IndependencyTab from '../CountryView/components/IndependencyTab';\nimport ClimateTab from '../CountryView/components/ClimateTab';\nimport BasicChartContainer from '../CountryView/containers/BasicChartContainer';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst tabContent = {\n  summary: areaCode => <SummaryTab countryCode={areaCode} />,\n  independency: areaCode => <IndependencyTab countryCode={areaCode} />,\n  climate: areaCode => <ClimateTab countryCode={areaCode} />,\n};\n\nclass AreaView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { area } = this.props;\n    const { currentTab } = this.state;\n    const latlng = [\n      area.countries.reduce((s, c) => c.latlng[0] + s, 0) /\n        area.countries.length,\n      area.countries.reduce((s, c) => c.latlng[1] + s, 0) /\n        area.countries.length,\n    ];\n\n    if (!area) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div className=\"AreaView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${area.name}`}</h2>}>\n              {area.code !== 'WORLD' && (\n                <div>\n                  {`Members : `}\n                  {area.countries.map((country, i) => (\n                    <Link\n                      key={country.alpha2Code}\n                      to={`/country/${country.alpha2Code}`}\n                    >\n                      {`${i > 0 ? ', ' : ''}${country.commonName}`}\n                    </Link>\n                  ))}\n                </div>\n              )}\n              <Row style={{ marginTop: '20px' }} gutter={10}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"POPULATION\"\n                    countryCode={area.code}\n                    color=\"#2c82c9\"\n                  />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"GDP_2010_USD\"\n                    countryCode={area.code}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <GeoJSONMap geojson={area.geojson} center={latlng} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](area.code)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nAreaView.propTypes = {\n  area: AreaType.isRequired,\n};\n\nexport default connect((state, props) => ({\n  area: areaWithCountriesSelector(props.match.params.areaCode, state),\n}))(AreaView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType, AreaType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, areas, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.SubMenu title=\"Areas\">\n        {sortBy(a => a.name, areas).map(area => (\n          <Menu.Item key={area.code}>\n            <Link to={`/area/${area.code}`}>{area.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu.SubMenu>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  areas: PropTypes.arrayOf(AreaType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\nimport AreaView from '../views/AreaView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\nimport {\n  loadAllAreas,\n  areasLoadedSelector,\n  areasSelector,\n} from '../store/areas';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\nconst AreasLoader = buildLoader(loadAllAreas);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    areas: areasSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isLoaded } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      <AreasLoader />\n      <Spin size=\"large\" spinning={!isLoaded}>\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            {!isLoaded && <div className=\"AppLayout__splash\" />}\n            {isLoaded && (\n              <Switch>\n                <Route path=\"/home\" exact component={HomeView} />\n                <Route\n                  path=\"/country/:countryCode\"\n                  exact\n                  component={CountryView}\n                />\n                <Route path=\"/area/:areaCode\" exact component={AreaView} />\n                <Route path=\"/about\" exact component={AboutView} />\n                <Route\n                  component={() => <Redirect to={{ pathname: '/home' }} />}\n                />\n              </Switch>\n            )}\n          </Layout.Content>\n          <Layout.Footer>Sources: IEA, World Data Bank</Layout.Footer>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded:\n      countriesLoadedSelector(state) &&\n      statisticsLoadedSelector(state) &&\n      areasLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}