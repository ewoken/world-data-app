{"version":3,"sources":["api/countries.js","store/countries.js","utils/index.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","api/areas.js","store/areas.js","store/index.js","components/ScrollToTop.jsx","utils/types.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/ControlledSlider.jsx","components/StatisticDetails.jsx","utils/copyToClipboard.js","components/ShareChartComponent.jsx","views/HomeView/components/StatisticExplorer.jsx","views/CountryView/components/CustomTooltip.jsx","views/HomeView/components/HDIByEnergyChart.jsx","HOC/components/ChartSettings.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","HOC/buildChart.jsx","views/HomeView/containers/HDIByEnergyChartContainer.jsx","views/HomeView/index.jsx","store/otherSelectors.js","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.jsx","components/GeoJSONMap.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/GDPByEnergyChart.jsx","views/CountryView/components/RentsChart.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SettingsComponent.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/components/ReservesAndPeaksTab.jsx","views/CountryView/components/PowerLoadAnalysisChart.jsx","views/CountryView/components/OthersTab.jsx","views/CountryView/components/TabsComponent.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","views/AreaView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","components/AnalyticsComponent.jsx","App.jsx","serviceWorker.js","index.js"],"names":["_callee","_ref","_ref2","countries","worldTopo","regenerator_default","a","wrap","_context","prev","next","Promise","all","fetch","concat","process","map","p","then","res","json","sent","Object","slicedToArray","abrupt","stop","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","defaultIndicators","coal","oil","gas","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","worldTopoSelector","countrySelector","countryCode","initialCountry","areas","memberCountryCodes","countryCodes","country","geojson","countryAlpha3Codes","c","numericCode","geometries","objects","filter","includes","id","merge","find","feature","bounds","L","geoJSON","getBounds","objectSpread","addGeoJSONandBounds","code","countriesSelector","keys","isIndependent","countriesInBounds","boundsFilter","intersects","dependentCountriesSelector","values","fuelConsumedCountrySelector","hasConsumed","fuelProducedCountrySelector","hasProduced","fuelProducedOrConsumedCountrySelector","mapObjIndexed","v","k","countriesReducer","arguments","length","undefined","action","coordsToLatLng","coords","_coords","longitude","latitude","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","testScreenType","size","windowWidth","innerWidth","formatNumber","value","Number","isNaN","toPrecision","toLocaleString","tickFormatter","displayUnit","unit","perCapita","base","main","parseMapOfStatistics","mapOfCountryStatistics","defaultCountry","statistics","statisticCode","addPopCountryStatistics","uniq","d","populations","mergeAll","defineProperty","clickHandlers","onClick","onDoubleClick","clicks","_len2","args","Array","_key2","setTimeout","apply","maxAndIndex","array","reduce","i","max","maxIndex","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","statistic","isGlobal","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref3","yearInterval","compiledCountryStatisticsSelector","isCompilation","dataItem","_","isFinite","year","computeDerivedValueFromCompiled","interval","startingYear","endingYear","statisticOfAllCountriesLoadedSelector","alpha2Code","fn","hashFunction","JSON","stringify","cacheSize","cache","_len","_key","hash","hashes","memoize","_ref4","_ref8","baseMap","inputYearInterval","parsedMapOfCountryStatistics","mapOfStatistic","_ref5","nullValues","startingYears","endingYears","Math","toConsumableArray","min","computeYearInterval","mapOfStatisticValues","mapOfNamedStatisticValues","statisticValues","compileName","_ref6","allValues","allValuesByYear","groupBy","range","sort","compiledValue","_ref9","cc","popCompileName","population","factor","populationFactor","computeValue","isIntensive","compiledStatisticForCountriesAndYear","_ref10","input","_ref10$perCapita","_ref10$withWorld","withWorld","push","yearValue","statisticSourcesSelector","statisticCodes","statisticSources","sources","PEAK_THRESHOLD","MAY_PEAK_THRESHOLD","YEAR_AROUND_PEAK","statisticPeakYearSelector","dataLength","_maxAndIndex","maxData","lastValue","firstValue","hasPeakValue","sure","before","fetchJSON","url","options","PERCENTAGE_UNIT","MTOE_UNIT","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","CO2_INTENSITY_BY_SOURCE","biomass","solar","geoth","wind","derivedStatistics","name","description","consumption","production","sourceAttribution","category","energy","gdp","co2","scale","geothSolarWindTide","_ref7","oilPrice","pop","capacity","generation","notNullData","result","regression","linear","equation","r2","_ref11","renew","colorScheme","rest","objectWithoutProperties","source2","total","sum","key","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","countryStatistics","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","initialCountryStatistic","countryStatisticReducer","omit","statisticsReducer","acc","WORLD","area","commonName","AREAS_LOAD_ACTION","AREAS_RECEIVE_ACTION","receiveAreasAction","areasLoadedSelector","areasSelector","areasReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","actionSanitizer","stateSanitizer","store","createStore","ScrollToTop","scrollTo","prevProps","equals","this","props","Component","CountryType","PropTypes","shape","string","isRequired","alpha3Code","capital","number","latlng","arrayOf","object","firstYear","lastYear","MAP_HEIGHT","bool","sourceUrl","sourceDescriptionUrl","pathname","search","NA_COLOR","BORDER_COLOR","LEGEND_COLORS_COUNT","LEGEND_WIDTH","DEFAULT_COLORS_SCHEME","WorldMap","selectedCountries","dependentCountries","currentStatistic","currentYear","minZoom","onMapChange","isLoaded","onCountryDblClick","onControlButtonClick","selectedCountryByCode","indexBy","selectedData","maxValue","minValue","interpolators","scaleString","scheme","scaleType","scaleLinear","scaleLog","colors","domain","clamp","legend","colorInterpolator","d3Colors","getInterpolators","colorValueMap","interpolator","valueMap","color","computeColorMap","react_default","createElement","className","Map","zoom","zoomSnap","zoomDelta","center","style","height","zIndex","dragging","onZoomend","onMoveend","countryData","GeoJSON","onEachFeature","layer","on","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","control_default","position","es_button","icon","width","background","backgroundColor","defaultProps","ControlledSlider","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","defaultValue","setState","nextProps","onChange","_this2","slider","assign","setValue","StatisticDetails","descriptionLines","split","popover","title","arrowPointAtCenter","overlayStyle","maxWidth","content","stat","href","target","rel","placement","marginRight","copyTextToClipboard","text","element","clipboard","writeText","body","textArea","document","appendChild","focus","select","successful","execCommand","removeChild","resolve","reject","Error","err","fallbackCopyTextToClipboard","ShareChartComponent","chartRef","query","location","noHash","dropdown","overlay","menu","domElement","offsetHeight","padding","offsetWidth","classFiltered","classList","add","domToImage","toBlob","bgcolor","transform","blob","remove","chartToPngBlob","current","saveAs","message","error","compileNames","headers","dataLines","csv","l","join","Blob","origin","link","copyToClipboard","success","Item","theme","withRouter","WITH_SCALE_SETTINGS","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","mapRef","setScale","countryByCode","formatedData","s","statisticByCategory","es_select","placeholder","optionFilterProp","showSearch","stats","OptGroup","label","sortBy","Option","components_ControlledSlider","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","e","Button","disabled","components_ShareChartComponent","replace","qs","components_StatisticDetails","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","defaultSortOrder","align","onRow","record","CustomTooltip","active","separator","payload","withTotal","labelColor","displayFilter","totalFilter","units","filteredPayload","_payload$","_payload$$formatter","formatter","totalUnit","fontWeight","_p$formatter","dataKey","RESOLUTION","COLORS","Africa","Europe","Americas","Asia","Oceania","toPairs","DISPLAYED_COUNTRIES","HDIByEnergyChart","finalData","hdi","r","log","region","dataArray","logarithmic","data2","es6","bottom","line","stroke","props2","cx","cy","fill","opacity","top","components_CustomTooltip","0","1","verticalAlign","ChartSettings","perCapitaSwitch","stackedSwitch","stacked","setStacked","es_switch","checked","Loader","_this$props","load","prevOtherProps","_this$props2","otherProps","buildLoader","loadFunction","connect","StatisticsLoader","defaultSelector","mapStateToProps","mapOfCountryStatisticsInput","withReference","_props$referenceCount","referenceCountryCode","reference","mapOfCountryStatisticsToLoad","countryStatisticsToLoad","countryStatitics","countryStatisticsLoadedSelector","referenceCountry","withCountryStatistics","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","spin","spinning","defaultHeight","buildChartWrapper","WrappedChart","_Component","ChartWrapper","React","createRef","buttonRef","inherits","createClass","hasSettings","statisticList","toLowerCase","descriptionStatistic","finalDescription","boxShadow","data-html2canvas-ignore","components_ChartSettings","buildChart","_options$perCapitaSwi","_options$stackedSwitc","_options$height","hocs","withStateHandlers","_ref$defaultPerCapita","defaultPerCapita","_ref$defaultStacked","defaultStacked","compose","STATISTICS_MAP","STATISTICS_CODES","HDIByEnergyChartLoader","loadStatistic","components_HDIByEnergyChart","HDIByEnergyChartContainer","f","ConnectedWorldMap","ConnectedStatisticExplorer","HomeView","drawerIsOpen","setFilterBounds","getZoom","StatisticDiv","children","col","md","drawer","closable","onClose","setDrawerState","visible","parameters","_this$props3","goTo","newPerCapita","newParameters","isOpen","_this$props4","_this$state","components_ScrollToTop","row","gutter","setParameters","marginTop","containers_HDIByEnergyChartContainer","queryObject","parse","path","history","countryWithAreasSelector","areasOfCountrySelector","areaWithCountriesSelector","areaCode","areaSelector","countriesAndAreasSelector","BasicChart","extra","withComparison","strokeWidth","dot","iconType","CustomGeoJSON","createGeoJSON","leaflet","addTo","flyToBounds","withLeaflet","GeoJSONMap","boxZoom","doubleClickZoom","scrollWheelZoom","zoomControl","TileLayer","attribution","GeoJSONMap_GeoJSON","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","console","warn","dataWithImportAndExport","diff","toFixed","export","import","stackId","activeDot","strokeOpacity","GDPByEnergyChart","DEFAULT_AREA_PROPS","yAxisId","legendType","AREA_PROPS","FUELS","RentsChart","displayedFuel","some","price","orientation","RentsChartContainer","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","GDPByEnergyChartContainer","IndependencyTab","fuelProducedOrConsumed","hasRents","sm","BasicChartContainer","strokeDasharray","isFront","REFERENCE_DATAKEY","defaultLineAreaProps","isAnimationActive","lineAreaPropsMap","legendPayload","inactive","alpha","cssa","getLegendPayload","fuelConsumed","displayedStats","EnergyMixChart","toggleStat","setDisplayedStats","coalUnit","LineArea","Area","Line","lineAreaProps","fuelProps","displayedFuels","chartMax","ticks","getNiceTickValues","getTicksAndDomain","EnergyMixChartWithState","bind","assertThisInitialized","initDone","init","newProps","toggledStat","components_EnergyMixChart","EnergyMixChartBuilded","EnergyMixChartContainer","SettingsComponent","setReferenceCountry","onSelect","primaryMap","primaryReference","electrictyMap","electricityReference","ConnectedSettingsComponent","SummaryTab","containers_EnergyMixChartContainer","ClimateTab","ClimateTab_ConnectedSettingsComponent","PeakReference","peak","PeakText","textAlign","ReservesAndPeaksTab","fuelProduced","peaks","PowerLoadAnalysisChart","_regression$linear","powerLoad","WindLoadChartContainer","PowerLoadAnalysis","SolarLoadChartContainer","OthersTab","tabList","tab","tabContents","summary","independency","climate","reserves","others","TabsComponent","currentTab","onTabChange","TabComponent","tabs","card","activeTabKey","TabsComponentWithState","withState","CountryView","Redirect","to","flag","flagIcon","xs","Link","lg","maxHeight","src","alt","components_GeoJSONMap","match","params","AboutView","AreaView","AreaView_TabsComponentWithState","GitHubLink","HeaderMenu","mode","selectable","lineHeight","SubMenu","components_GitHubLink","CountriesLoader","prop","AreasLoader","_getAreas","getAllAreas","ConnectedHeaderMenu","scrollToAnchor","getElementById","scrollIntoView","behavior","block","inline","AppLayout","onhashchange","AppLayout_StatisticsLoader","layout","Header","span","offset","xxl","Content","Switch","Route","exact","component","Footer","tracker","ga","initialize","siteSpeedSampleRate","AnalyticsComponent","trackPage","set","pageview","withProps","App","es","HashRouter","components_AnalyticsComponent","components_AppLayout","Boolean","hostname","ReactDOM","src_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4304a68.chunk.js","sourcesContent":["async function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [\n      fetch(`${process.env.PUBLIC_URL}/data/countries.json`),\n      fetch(`${process.env.PUBLIC_URL}/data/worldTopo.json`),\n    ].map(p => p.then(res => res.json())),\n  );\n  return {\n    countries,\n    worldTopo,\n  };\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop, mapObjIndexed } from 'ramda';\nimport { feature, merge } from 'topojson-client';\nimport L from 'leaflet';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nconst defaultIndicators = {\n  // for areas\n  coal: true,\n  oil: true,\n  gas: true,\n  hydro: true,\n  nuclear: true,\n  biofuelsWaste: true,\n  solarWindTideGeoth: true,\n};\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, worldTopo, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, worldTopo, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data.countries),\n            worldTopo: data.worldTopo,\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n  worldTopo: null,\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n        worldTopo: action.worldTopo,\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function worldTopoSelector(state) {\n  return state.countries.worldTopo;\n}\n\nfunction addGeoJSONandBounds(country, worldTopo) {\n  let geojson;\n  if (country.countries) {\n    const countryAlpha3Codes = country.countries.map(c => c.numericCode);\n    const geometries = worldTopo.objects.countries.geometries.filter(c =>\n      countryAlpha3Codes.includes(c.id),\n    );\n    geojson = merge(worldTopo, geometries);\n  } else {\n    const a = worldTopo.objects.countries.geometries.find(\n      c => c.id === country.numericCode,\n    );\n    geojson = a && feature(worldTopo, a);\n  }\n\n  const bounds = geojson && L.geoJSON(geojson).getBounds();\n  return {\n    ...country,\n    geojson,\n    bounds,\n  };\n}\n\nexport function countrySelector(countryCode, state) {\n  const initialCountry =\n    state.countries.data[countryCode] || state.areas.data[countryCode];\n  const memberCountryCodes =\n    initialCountry.countries || initialCountry.countryCodes;\n\n  const countryWithCountries = memberCountryCodes\n    ? {\n        ...initialCountry,\n        countries: memberCountryCodes.map(code => countrySelector(code, state)),\n      }\n    : initialCountry;\n\n  return addGeoJSONandBounds(countryWithCountries, worldTopoSelector(state));\n}\n\nexport function countriesSelector(state) {\n  return Object.keys(state.countries.data)\n    .map(code => countrySelector(code, state))\n    .filter(country => country.isIndependent);\n}\n\nexport function countriesInBounds(boundsFilter, state) {\n  const countries = countriesSelector(state);\n\n  return boundsFilter\n    ? countries.filter(\n        country => country.bounds && boundsFilter.intersects(country.bounds),\n      )\n    : countries;\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function fuelConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasConsumed : defaultIndicators;\n}\n\nexport function fuelProducedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasProduced : defaultIndicators;\n}\n\nexport function fuelProducedOrConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country\n    ? mapObjIndexed((v, k) => v || country.hasConsumed[k], country.hasProduced)\n    : defaultIndicators;\n}\n\nexport default countriesReducer;\n","import L from 'leaflet';\nimport { map, uniq, values, mergeAll } from 'ramda';\nimport domToImage from 'dom-to-image';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function testScreenType(size) {\n  const windowWidth = window.innerWidth;\n\n  switch (size) {\n    case 'xs':\n      return windowWidth < 576;\n    case 'sm':\n      return windowWidth >= 576;\n    case 'md':\n      return windowWidth >= 768;\n    case 'lg':\n      return windowWidth >= 992;\n    case 'xl':\n      return windowWidth >= 1200;\n    case 'xxl':\n      return windowWidth >= 1600;\n    default:\n      return false;\n  }\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n\nexport function parseMapOfStatistics(mapOfCountryStatistics, defaultCountry) {\n  return map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n}\n\nexport function addPopCountryStatistics(mapOfCountryStatistics, perCapita) {\n  if (!perCapita) {\n    return mapOfCountryStatistics;\n  }\n\n  const countryCodes = uniq(\n    values(mapOfCountryStatistics).map(d => d.countryCode),\n  );\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...populations,\n    ...mapOfCountryStatistics,\n  };\n}\n\nexport function chartToPngBlob(domElement, scale) {\n  const padding = 10;\n  const height = domElement.offsetHeight + padding * 2;\n  const width = domElement.offsetWidth + padding * 2;\n  const classFiltered = [\n    'ChartWrapper__header__right',\n    'leaflet-control-container',\n  ];\n  domElement.classList.add('transformingToPng');\n  return domToImage\n    .toBlob(domElement, {\n      filter: element => !classFiltered.includes(element.className),\n      bgcolor: 'white',\n      style: {\n        padding: `${padding}px`,\n        transform: `scale(${scale}) translate(${width / 2 / scale}px, ${height /\n          2 /\n          scale}px)`,\n      },\n      height: height * scale,\n      width: width * scale,\n    })\n    .then(blob => {\n      domElement.classList.remove('transformingToPng');\n      return blob;\n    });\n}\n\nexport function memoize(\n  fn,\n  hashFunction = args => JSON.stringify(args),\n  cacheSize = 30,\n) {\n  const cache = {};\n  return function memoizedFun(...args) {\n    const hash = hashFunction(args);\n    if (cache[hash]) {\n      return cache[hash];\n    }\n    const res = fn(...args);\n\n    cache[hash] = res;\n\n    const hashes = Object.keys(cache);\n    if (hashes.length > cacheSize) {\n      delete cache[hashes[0]];\n    }\n\n    return res;\n  };\n}\n\nexport function clickHandlers({ onClick, onDoubleClick }) {\n  let clicks = 0;\n  return function clickHandler(...args) {\n    clicks += 1;\n    if (clicks < 2) {\n      setTimeout(() => {\n        if (clicks < 2) {\n          onClick(...args);\n        } else {\n          onDoubleClick(...args);\n        }\n        clicks = 0;\n      }, 300);\n    }\n  };\n}\n\nexport function maxAndIndex(array) {\n  return array.reduce(\n    (res, value, i) => {\n      if (value > res.max) {\n        return { max: value, maxIndex: i };\n      }\n      return res;\n    },\n    {\n      max: 0,\n      maxIndex: 0,\n    },\n  );\n}\n","import { values, mapObjIndexed, mergeAll, groupBy, map, range } from 'ramda';\nimport { countriesSelector } from '../countries';\nimport {\n  parseMapOfStatistics,\n  addPopCountryStatistics,\n  memoize,\n  maxAndIndex,\n} from '../../utils';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return (\n    statistic && statistic.values[statistic.isGlobal ? 'WORLD' : countryCode]\n  );\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute(dataItem, _, data) {\n    const value = statistic.compute(dataItem, data);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year: dataItem.year, value: null }\n      : { year: dataItem.year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode, yearInterval },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n        yearInterval: statistic.isCompilation ? undefined : yearInterval,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  const interval = yearInterval || [\n    statistic.startingYear,\n    statistic.endingYear,\n  ];\n  return countryStatistic\n    ? countryStatistic.values.filter(\n        d => interval[0] <= d.year && d.year <= interval[1],\n      )\n    : [];\n}\n\nexport function countryStatisticsLoadedSelector(countryStatitics, state) {\n  return countryStatitics.every(countryStatistic =>\n    countryStatisticLoadedSelector(countryStatistic, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatistic, yearInterval = [0, 3000]) {\n  const statistics = values(mapOfStatistic);\n  const startingYears = statistics.map(statistic => statistic.startingYear);\n  const endingYears = statistics.map(statistic => statistic.endingYear);\n  const startingYear = Math.max(...startingYears, yearInterval[0]);\n  const endingYear = Math.min(...endingYears, yearInterval[1]);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (perCapita && !population)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction compiledCountryStatisticsSelectorFn(\n  {\n    mapOfCountryStatistics: baseMap,\n    countryCode,\n    perCapita,\n    yearInterval: inputYearInterval,\n  },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    baseMap,\n    countryCode,\n  );\n  const mapOfCountryStatistics = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    mapOfCountryStatistics,\n  );\n  const nullValues = map(() => null, mapOfStatistic);\n  const yearInterval = computeYearInterval(mapOfStatistic, inputYearInterval);\n  const mapOfStatisticValues = map(\n    countryStatistic =>\n      countryStatisticValuesSelector(\n        { ...countryStatistic, yearInterval },\n        state,\n      ),\n    mapOfCountryStatistics,\n  );\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n\n  const compiledStatistics = range(yearInterval[0], yearInterval[1] + 1)\n    .sort()\n    .map(year => ({\n      year,\n      ...nullValues,\n      ...mergeAll(allValuesByYear[year]),\n    }))\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed(({ countryCode: cc }, compileName) => {\n        const value = compiledValue[compileName];\n        const popCompileName = `pop/${cc}`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita && !mapOfStatistic[compileName].isIntensive,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, parsedMapOfCountryStatistics),\n    }));\n\n  return compiledStatistics;\n}\nexport const compiledCountryStatisticsSelector = memoize(\n  compiledCountryStatisticsSelectorFn,\n  args => JSON.stringify(args[0]),\n);\n\nexport function compiledStatisticForCountriesAndYear(\n  {\n    mapOfCountryStatistics: input,\n    statisticCode,\n    year,\n    perCapita = false,\n    withWorld = true,\n  },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = input || {\n    value: statisticCode,\n  };\n  const yearInterval = [year, year];\n\n  if (withWorld) {\n    countryCodes.push('WORLD');\n  }\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics,\n        countryCode,\n        perCapita,\n        yearInterval,\n      },\n      state,\n    );\n    const yearValue = countryStatisticValues[0];\n\n    return {\n      countryCode,\n      ...yearValue,\n    };\n  });\n  return countryValues;\n}\n\nexport function statisticSourcesSelector(statisticCodes, state) {\n  return statisticCodes.reduce((statisticSources, statisticCode) => {\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sources = values(statistic.source).map(code =>\n        statisticSelector(code, state),\n      );\n      return statisticSources.concat(sources);\n    }\n\n    return statisticSources.concat([statistic]);\n  }, []);\n}\n\nconst PEAK_THRESHOLD = 0.8;\nconst MAY_PEAK_THRESHOLD = 0.9;\nconst YEAR_AROUND_PEAK = 5;\nexport function statisticPeakYearSelector(countryStatistic, state) {\n  const data = countryStatisticValuesSelector(countryStatistic, state);\n  const dataLength = data.length;\n\n  if (data.length < 1) {\n    return null;\n  }\n\n  const { max, maxIndex } = maxAndIndex(data.map(v => v.value));\n  const maxData = data[maxIndex];\n  const lastValue = data[dataLength - 1].value;\n  const firstValue = data[0].value;\n  const mayPeakValue = MAY_PEAK_THRESHOLD * max;\n  const hasPeakValue = PEAK_THRESHOLD * max;\n\n  if (lastValue > mayPeakValue) {\n    // no simple peak\n    return null;\n  }\n\n  if (lastValue < hasPeakValue) {\n    // has a peak\n    if (maxIndex < 1) {\n      // peak at first value\n      return { ...maxData, sure: true, before: true };\n    }\n    if (firstValue > hasPeakValue) {\n      // may have peaked before\n      return { ...maxData, sure: false, before: true };\n    }\n    if (maxAndIndex < dataLength - YEAR_AROUND_PEAK) {\n      return { ...maxData, sure: false, before: false }; // may be a brief decrease\n    }\n    return { ...maxData, sure: true, before: false };\n  }\n\n  if (firstValue < hasPeakValue) {\n    return { ...maxData, sure: false, before: false };\n  }\n\n  return null;\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","import regression from 'regression';\n\nconst PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst CO2_INTENSITY_BY_SOURCE = {\n  coal: 820,\n  oil: 650,\n  gas: 490,\n  biomass: 230,\n  solar: 45,\n  geoth: 38,\n  hydro: 24,\n  nuclear: 12,\n  wind: 11,\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description:\n      'This indicator made up by dividing primary energy consumption by primary energy production, gives an indication on the level of self-sufficiency (or dependency) of a country.',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2017,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2017,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description:\n      'Measures the mass of CO2 by unit of energy that is emitted by the country.',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'FOSSIL_CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2017,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    scale: 'linear',\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: 'Includes hydroelectricity, solar, wind and tide productions.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2017,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description:\n      'Includes renewables and nuclear productions. Excludes biofuels at the moment.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2017,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2017,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2017,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'FOSSIL_RENTS_IN_GDP',\n    name: 'Fossil rents',\n    description: 'Share of all fossil rents (coal, oil & gas) in GDP',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      coal: 'COAL_RENTS_IN_GDP',\n      oil: 'OIL_RENTS_IN_GDP',\n      gas: 'GAS_RENTS_IN_GDP',\n    },\n    startingYear: 1973,\n    endingYear: 2017,\n    isIntensive: true,\n    sourceAttribution: 'World Bank',\n    category: 'Others',\n    compute({ coal, gas, oil }) {\n      return coal * gas * oil;\n    },\n  },\n  {\n    code: 'OIL_RELATIVE_PRICE',\n    name: 'Oil relative price',\n    description: `Average time (in days) that an inhabitant need to work to buy a barrel of crude oil.\nTIME = OIL_PRICE / (GDP / POP)`,\n    unit: {\n      main: 'days',\n      base: 'days',\n    },\n    source: {\n      oilPrice: 'OIL_PRICE_USD',\n      gdp: 'GDP_USD',\n      pop: 'POPULATION',\n    },\n    startingYear: 1973,\n    endingYear: 2017,\n    isIntensive: true,\n    category: 'Others',\n    compute({ oilPrice, gdp, pop }) {\n      return (oilPrice / ((gdp * 10 ** 9) / (pop * 10 ** 6))) * 365.25;\n    },\n  },\n  {\n    code: 'WIND_CAPACITY_POWER_LOAD',\n    name: 'Wind capacity power load',\n    description: `Average power load of wind capacity on a year (estimate)`,\n    unit: PERCENTAGE_UNIT,\n    source: {\n      capacity: 'WIND_CAPACITY_GW',\n      generation: 'WIND_GENERATION_TWH',\n    },\n    startingYear: 1973,\n    endingYear: 2017,\n    isIntensive: true,\n    isCompilation: true,\n    category: 'Electricity',\n    scale: 'linear',\n    compute(_, data) {\n      const notNullData = data.filter(d => d.generation && d.capacity);\n      if (notNullData.length < 4) {\n        return null;\n      }\n\n      const array = notNullData.map(({ capacity, generation }) => [\n        capacity,\n        generation,\n      ]);\n      const result = regression.linear(array);\n      const res = ((result.equation[0] * 10 ** 3) / (365.25 * 24)) * 100;\n      const res2 = res > 100 || result.r2 < 0.9 ? null : res;\n\n      return res2;\n    },\n  },\n  {\n    code: 'SOLAR_CAPACITY_POWER_LOAD',\n    name: 'Solar capacity power load',\n    description: `Average power load of solar capacity on a year (estimate)`,\n    unit: PERCENTAGE_UNIT,\n    source: {\n      capacity: 'SOLAR_CAPACITY_GW',\n      generation: 'SOLAR_GENERATION_TWH',\n    },\n    startingYear: 1973,\n    endingYear: 2017,\n    isIntensive: true,\n    isCompilation: true,\n    category: 'Electricity',\n    compute(_, data) {\n      const notNullData = data.filter(d => d.generation && d.capacity);\n      if (notNullData.length < 4) {\n        return null;\n      }\n\n      const array = notNullData.map(({ capacity, generation }) => [\n        capacity,\n        generation,\n      ]);\n      const result = regression.linear(array);\n      const res = ((result.equation[0] * 10 ** 3) / (365.25 * 24)) * 100;\n      const res2 = res > 50 || result.r2 < 0.9 ? null : res;\n\n      return res2;\n    },\n  },\n  {\n    code: 'GHG_EMISSIONS_GKWH',\n    name: 'Carbon intensity of electricity',\n    description: `Average GHG emissions of electricity production.\nCoal: 820 gCO₂eq/kWh\nOil: 650 gCO₂eq/kWh\nGas: 490 gCO₂eq/kWh\nBiomass: 230 gCO₂eq/kWh\nSolar: 45 gCO₂eq/kWh\nGeoth: 38 gCO₂eq/kWh\nHydro: 24 gCO₂eq/kWh\nNuclear: 12 gCO₂eq/kWh\nWind: 11 gCO₂eq/kWh\n`,\n    unit: {\n      main: 'gCO₂eq/kWh',\n      base: 'gCO₂eq/kWh',\n      factor: 1,\n    },\n    source: {\n      coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n      oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n      gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n      biomass: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n      solar: 'SOLAR_GENERATION_TWH',\n      renew: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n      hydro: 'HYDRO_GENERATION_TWH',\n      nuclear: 'NUCLEAR_GENERATION_TWH',\n      wind: 'WIND_GENERATION_TWH',\n    },\n    startingYear: 1973,\n    endingYear: 2017,\n    isIntensive: true,\n    category: 'Climate change',\n    scale: 'linear',\n    colorScheme: 'CO2',\n    compute(sources) {\n      const { year, wind, solar, renew, ...rest } = sources;\n      const geoth = renew - wind - solar;\n      const source2 = { ...rest, wind, solar, geoth };\n      const total = Object.keys(source2).reduce(\n        (sum, key) => sum + (source2[key] || 0),\n        0,\n      );\n      const intensity = Object.keys(source2).reduce(\n        (sum, key) => sum + (source2[key] || 0) * CO2_INTENSITY_BY_SOURCE[key],\n        0,\n      );\n\n      return intensity / total;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.isGlobal && countryCode !== 'WORLD') {\n      dispatch(loadCountryStatistic({ statisticCode, countryCode: 'WORLD' }));\n      return;\n    }\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      const countryStatistics = sourceCodes.map(sourceCode => ({\n        statisticCode: sourceCode,\n        countryCode,\n      }));\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics(countryStatistics),\n      );\n      return;\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics(countryStatistics) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      countryStatistics.map(countryStatistic =>\n        dispatch(loadCountryStatistic(countryStatistic)),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON(\n    `${process.env.PUBLIC_URL}/data/statistics.json`,\n  ).then(statistics => statistics.concat(derivedStatistics));\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(\n    `${process.env.PUBLIC_URL}/data/${statisticCode}/${countryCode}.json`,\n  );\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`${process.env.PUBLIC_URL}/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","export default async function getAreas() {\n  const res = await fetch(`${process.env.PUBLIC_URL}/data/areas.json`);\n  const data = await res.json();\n\n  return data.map(area => ({\n    ...area,\n    alpha2Code: area.code,\n    commonName: area.name,\n  }));\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllAreas from '../api/areas';\n\nexport const AREAS_LOAD_ACTION = 'AREAS_LOAD_ACTION';\nexport const AREAS_RECEIVE_ACTION = 'AREAS_RECEIVE_ACTION';\n\nfunction loadAreasAction() {\n  return { type: AREAS_LOAD_ACTION };\n}\n\nfunction receiveAreasAction({ data, errors }) {\n  return { type: AREAS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllAreas() {\n  return function dispatchLoadAllAreas(dispatch) {\n    dispatch(loadAreasAction());\n    return getAllAreas()\n      .then(data =>\n        dispatch(\n          receiveAreasAction({\n            data: indexBy(prop('code'), data),\n          }),\n        ),\n      )\n      .catch(\n        errors =>\n          console.log(errors) && dispatch(receiveAreasAction({ errors })),\n      );\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction areasReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case AREAS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case AREAS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function areasLoadedSelector(state) {\n  return state.areas.loaded;\n}\n\nexport function areasSelector(state) {\n  return values(state.areas.data);\n}\n\nexport function areaSelector(areaCode, state) {\n  return state.areas.data[areaCode];\n}\n\nexport function areasOfCountrySelector(countryCode, state) {\n  return values(state.areas.data).filter(\n    area => area.countryCodes && area.countryCodes.includes(countryCode),\n  );\n}\n\nexport default areasReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\nimport { map, omit } from 'ramda';\n\nimport countriesReducer from './countries';\nimport statisticsReducer, {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n} from './statistics';\nimport areasReducer from './areas';\n\nfunction actionSanitizer(action) {\n  if (\n    (action.type === COUNTRY_STATISTIC_RECEIVE_ACTION ||\n      action.type === STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION) &&\n    action.data\n  ) {\n    return { ...action, data: 'DATA' };\n  }\n  return action;\n}\n\nfunction stateSanitizer(state) {\n  return {\n    ...state,\n    countries: omit(['worldTopo'], state.countries),\n    statistics: map(\n      statistic => ({\n        ...statistic,\n        values: map(\n          country => ({\n            ...country,\n            values: country.values && `[${country.values.length}]`,\n          }),\n          statistic.values,\n        ),\n      }),\n      state.statistics.data,\n    ),\n  };\n}\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n  areas: areasReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  actionSanitizer,\n  stateSanitizer,\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import { Component } from 'react';\nimport { equals } from 'ramda';\n\nclass ScrollToTop extends Component {\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!equals(this.props, prevProps)) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default ScrollToTop;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n  firstYear: PropTypes.number.isRequired,\n  lastYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n  category: PropTypes.string.isRequired,\n  sourceAttribution: PropTypes.string,\n  sourceUrl: PropTypes.string,\n  sourceDescriptionUrl: PropTypes.string,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n\nexport const AreaType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  countries: PropTypes.arrayOf(CountryType),\n});\n\nexport const LocationType = PropTypes.shape({\n  hash: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n});\n\nexport const FuelIndicatorsType = PropTypes.shape({\n  coal: PropTypes.bool,\n  oil: PropTypes.bool,\n  gas: PropTypes.bool,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map, range } from 'ramda';\nimport { scaleLog, scaleLinear } from 'd3-scale';\nimport * as d3Colors from 'd3-scale-chromatic';\n\nimport { Button } from 'antd';\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\nimport Control from 'react-leaflet-control';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  testScreenType,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '100%';\nconst NA_COLOR = '#888';\nconst BORDER_COLOR = 'black';\nconst LEGEND_COLORS_COUNT = 4;\nconst LEGEND_WIDTH = 300; // px\nconst DEFAULT_COLORS_SCHEME = 'YlGnBu';\n\nfunction getInterpolators(scaleString, scheme, min, max) {\n  const scaleType = scaleString === 'linear' ? scaleLinear : scaleLog;\n\n  if (scheme === 'CO2') {\n    const colors = ['#2AA364', '#F5EB4D', '#9E4229', '#381d02'];\n    return {\n      name: 'CO2',\n      map: scaleType()\n        .domain([0, 150, 600, 750])\n        .range(colors)\n        .clamp(true),\n      legend: scaleType()\n        .domain([0, 1 / 5, 4 / 5, 1])\n        .range(colors)\n        .clamp(true),\n    };\n  }\n\n  const colorInterpolator = d3Colors[`interpolate${DEFAULT_COLORS_SCHEME}`];\n  const scale = scaleType().domain([min, max]);\n  return {\n    map: value =>\n      value === 0 ? colorInterpolator(0) : colorInterpolator(scale(value)),\n    legend: colorInterpolator,\n  };\n}\n\nfunction computeColorMap(data, isLoaded, interpolator) {\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (!isLoaded || value === null) {\n      return { color: NA_COLOR, value };\n    }\n    return {\n      color: interpolator(value),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    selectedCountries,\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    scale,\n    minZoom,\n    onMapChange,\n    isLoaded,\n    onCountryDblClick,\n    onControlButtonClick,\n  } = props;\n  const selectedCountryByCode = indexBy(c => c.alpha2Code, selectedCountries);\n  const selectedData = data.filter(\n    d => d.countryCode !== 'WORLD' && selectedCountryByCode[d.countryCode],\n  );\n  const maxValue = Math.max(...selectedData.map(d => d.value));\n  const minValue = Math.min(\n    ...selectedData.filter(d => d.value).map(d => d.value),\n  );\n\n  const interpolators = getInterpolators(\n    currentStatistic.scale || scale,\n    currentStatistic.colorScheme,\n    minValue,\n    maxValue,\n  );\n  const colorValueMap = computeColorMap(\n    selectedData,\n    isLoaded,\n    interpolators.map,\n  );\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <div className=\"WorldMap__map\">\n        <Map\n          minZoom={minZoom}\n          zoom={minZoom}\n          zoomSnap={0.1}\n          zoomDelta={0.5}\n          center={[20, 30]}\n          style={{ height: MAP_HEIGHT, zIndex: 0 }}\n          dragging={!isMobileOrTablet()}\n          onZoomend={onMapChange}\n          onMoveend={onMapChange}\n        >\n          {countries\n            .filter(\n              country =>\n                country.firstYear <= currentYear &&\n                currentYear <= country.lastYear,\n            )\n            .map(country => {\n              const countryData = colorValueMap[country.alpha2Code];\n              return (\n                <GeoJSON\n                  key={country.alpha2Code + currentStatistic.code}\n                  data={country.geojson}\n                  coordsToLatLng={coordsToLatLng}\n                  onEachFeature={(feature, layer) =>\n                    layer.on('dblclick', () => {\n                      onCountryDblClick(country);\n                    })\n                  }\n                  ref={ref =>\n                    ref &&\n                    ref.leafletElement.setStyle({\n                      color: BORDER_COLOR,\n                      weight: 0.5,\n                      fillColor: countryData ? countryData.color : NA_COLOR,\n                      fillOpacity: 1,\n                    })\n                  }\n                >\n                  <Tooltip sticky>\n                    {`${country.commonName}: ${formatNumber(\n                      countryData && countryData.value,\n                    )}`}\n                  </Tooltip>\n                </GeoJSON>\n              );\n            })}\n          {dependentCountries.map(country => (\n            <GeoJSON\n              key={country.alpha2Code}\n              data={country.geojson}\n              style={{\n                fillOpacity: 1,\n                color: BORDER_COLOR,\n                weight: 0.5,\n                fillColor: NA_COLOR,\n              }}\n            />\n          ))}\n          {!testScreenType('md') && (\n            <Control position=\"topleft\">\n              <Button icon=\"control\" onClick={onControlButtonClick} />\n            </Control>\n          )}\n        </Map>\n      </div>\n      <div className=\"WorldMap__legend\">\n        <div>\n          <div>\n            {`${currentStatistic.name} (${displayUnit(\n              currentStatistic.unit,\n              perCapita,\n            )})`}\n          </div>\n          <div className=\"WorldMap__legend__colors\">\n            <div>\n              <div className=\"WorldMap__legend__gradient\">\n                {range(0, LEGEND_COLORS_COUNT).map(i => (\n                  <div\n                    key={i}\n                    className=\"WorldMap__legend__gradient__item\"\n                    style={{\n                      width: LEGEND_WIDTH / LEGEND_COLORS_COUNT,\n                      background: `linear-gradient(to right, ${interpolators.legend(\n                        i / LEGEND_COLORS_COUNT,\n                      )}, ${interpolators.legend(\n                        (i + 1) / LEGEND_COLORS_COUNT,\n                      )}`,\n                    }}\n                  />\n                ))}\n              </div>\n              <div className=\"WorldMap__legend__gradientRange\">\n                <div>0</div>\n                <div>{formatNumber(maxValue)}</div>\n              </div>\n            </div>\n            <div>\n              <div\n                className=\"WorldMap__legend__NA__square\"\n                style={{ backgroundColor: NA_COLOR }}\n              />\n              <div>NA</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"WorldMap__sources toPng\">\n        From ewoken.github.io/world-data-app/ - Sources: IEA, World Bank\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  selectedCountries: PropTypes.arrayOf(CountryType).isRequired,\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  scale: PropTypes.string,\n  minZoom: PropTypes.number,\n  onMapChange: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  onCountryDblClick: PropTypes.func.isRequired,\n  onControlButtonClick: PropTypes.func.isRequired,\n};\n\nWorldMap.defaultProps = {\n  scale: null,\n  minZoom: 1.8,\n};\n\nexport default WorldMap;\n","import React, { Component } from 'react';\nimport { Slider } from 'antd';\n\nclass ControlledSlider extends Component {\n  constructor() {\n    super();\n    this.state = { value: undefined };\n  }\n\n  componentDidMount() {\n    const { defaultValue } = this.props;\n    this.setState({\n      value: defaultValue,\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { defaultValue } = this.props;\n    if (defaultValue !== nextProps.defaultValue) {\n      this.setState({ value: nextProps.defaultValue });\n    }\n  }\n\n  setValue(value) {\n    const { onChange } = this.props;\n    this.setState({ value });\n    onChange(value);\n  }\n\n  render() {\n    const { value } = this.state;\n    return (\n      <Slider {...this.props} value={value} onChange={v => this.setValue(v)} />\n    );\n  }\n}\n\nexport default ControlledSlider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Popover, Button } from 'antd';\n\nimport { StatisticType } from '../utils/types';\n\nfunction StatisticDetails(props) {\n  const { statisticSources, description } = props;\n  const descriptionLines = description && description.split('\\n');\n\n  return (\n    <div className=\"StatisticDetails\">\n      <Popover\n        title=\"Details\"\n        arrowPointAtCenter\n        overlayStyle={{ maxWidth: '300px' }}\n        content={\n          // eslint-disable-next-line react/jsx-wrap-multilines\n          <div>\n            {description && (\n              <div>\n                <strong>Description : </strong>\n                {`${descriptionLines[0]}`}\n              </div>\n            )}\n            <div>\n              <strong>\n                {`Source${statisticSources.length > 1 ? 's' : ''}`}\n              </strong>\n              <ul className=\"StatisticDetails__sources\">\n                {statisticSources.map(stat => (\n                  <li key={stat.code}>\n                    <a\n                      href={stat.sourceUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {`${stat.name} (${stat.sourceAttribution})`}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        }\n        placement=\"bottomRight\"\n      >\n        <Button\n          size=\"small\"\n          icon=\"info-circle\"\n          style={{ marginRight: '5px' }}\n        />\n      </Popover>\n    </div>\n  );\n}\n\nStatisticDetails.propTypes = {\n  description: PropTypes.string,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n};\n\nStatisticDetails.defaultProps = {\n  description: null,\n};\n\nexport default StatisticDetails;\n","function fallbackCopyTextToClipboard(text, element = window.body) {\n  const textArea = document.createElement('textarea');\n  textArea.value = text;\n  element.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    const successful = document.execCommand('copy');\n    element.removeChild(textArea);\n    return successful\n      ? Promise.resolve()\n      : Promise.reject(new Error('fallbackCopyTextToClipboard error'));\n  } catch (err) {\n    element.removeChild(textArea);\n    throw Promise.reject(err);\n  }\n}\nfunction copyTextToClipboard(text, element) {\n  return navigator.clipboard\n    ? navigator.clipboard.writeText(text)\n    : fallbackCopyTextToClipboard(text, element);\n}\n\nexport default copyTextToClipboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { saveAs } from 'file-saver';\nimport { withRouter } from 'react-router-dom';\n\nimport { Button, Dropdown, Menu, Icon, message } from 'antd';\nimport { chartToPngBlob } from '../utils';\nimport copyToClipboard from '../utils/copyToClipboard';\nimport { LocationType } from '../utils/types';\n\nfunction ShareChartComponent(props) {\n  const { id, chartRef, query, location, noHash } = props;\n  return (\n    <div className=\"ShareChartComponent\">\n      <Dropdown\n        overlay={\n          // eslint-disable-next-line\n          <Menu\n            onClick={({ key }) => {\n              if (key === 'png') {\n                chartToPngBlob(chartRef.current, 2)\n                  .then(blob => saveAs(blob, `${id}.png`))\n                  .catch(() => message.error('An error occured !'));\n              } else if (key === 'csv') {\n                const { data, statistics } = props;\n                const compileNames = Object.keys(statistics);\n                const headers = compileNames.map(\n                  compileName => statistics[compileName].code,\n                );\n                const dataLines = data.map(dataItem =>\n                  compileNames.map(compileName => dataItem[compileName]),\n                );\n                const lines = [headers, ...dataLines];\n                const csv = lines.map(l => l.join(',')).join('\\n');\n                const blob = new Blob([csv], {\n                  type: 'text/plain;charset=utf-8',\n                });\n                saveAs(blob, `${id}.csv`);\n              } else if (key === 'link') {\n                const { origin } = window.location;\n                const { pathname } = location;\n\n                const link = `${origin}#${pathname}${query}${\n                  noHash ? '' : `#${id}`\n                }`;\n                copyToClipboard(link, chartRef.current)\n                  .then(() => message.success('Copied !'))\n                  .catch(() => message.error('An error occured !'));\n              }\n            }}\n          >\n            <Menu.Item key=\"link\">\n              <Icon type=\"copy\" theme=\"filled\" />\n              Copy link\n            </Menu.Item>\n            <Menu.Item key=\"png\">\n              <Icon type=\"picture\" theme=\"filled\" />\n              .png\n            </Menu.Item>\n            <Menu.Item key=\"csv\">\n              <Icon type=\"file-text\" theme=\"filled\" />\n              .csv\n            </Menu.Item>\n          </Menu>\n        }\n      >\n        <Button size=\"small\" icon=\"share-alt\" style={{ marginRight: '5px' }} />\n      </Dropdown>\n    </div>\n  );\n}\n\nShareChartComponent.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  chartRef: PropTypes.any.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  statistics: PropTypes.object.isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  id: PropTypes.string.isRequired,\n  query: PropTypes.string,\n  location: LocationType.isRequired,\n  noHash: PropTypes.bool,\n};\n\nShareChartComponent.defaultProps = {\n  query: '',\n  noHash: false,\n};\n\nexport default withRouter(ShareChartComponent);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Radio, Popover, Button, Icon } from 'antd';\nimport debounce from 'lodash.debounce';\nimport qs from 'qs';\n\nimport { sortBy, groupBy, indexBy } from 'ramda';\n\nimport Slider from './ControlledSlider';\nimport StatisticDetails from '../../../components/StatisticDetails';\nimport ShareChartComponent from '../../../components/ShareChartComponent';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nconst WITH_SCALE_SETTINGS = false;\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    statisticSources,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n    mapRef,\n    scale,\n    setScale,\n  } = props;\n\n  const countryByCode = indexBy(c => c.alpha2Code, countries);\n  const formatedData = data\n    .filter(s => s.value !== null && countryByCode[s.countryCode])\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countryByCode[s.countryCode].commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  if (currentStatistic.isIntensive && perCapita) {\n    setPerCapita(false);\n  }\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <div className=\"StatisticExplorer__options\">\n        <Radio.Group\n          style={{ marginBottom: '10px' }}\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button\n            value\n            disabled={\n              currentStatistic.code === 'POPULATION' ||\n              currentStatistic.isIntensive\n            }\n          >\n            Per capita\n          </Radio.Button>\n        </Radio.Group>\n        <div className=\"StatisticExplorer__options__right\">\n          <ShareChartComponent\n            id={currentStatistic.name.replace(/ /g, '_')}\n            chartRef={mapRef}\n            statistics={{\n              countryCode: { code: 'COUNTRY_CODE' },\n              value: currentStatistic,\n            }}\n            data={data}\n            query={`?${qs.stringify({\n              statisticCode: currentStatistic.code,\n              perCapita,\n              currentYear,\n            })}`}\n            noHash\n          />\n          <StatisticDetails\n            statisticSources={statisticSources}\n            description={currentStatistic.description}\n          />\n          {WITH_SCALE_SETTINGS && (\n            <Popover\n              title=\"Settings\"\n              arrowPointAtCenter\n              content={\n                // eslint-disable-next-line react/jsx-wrap-multilines\n                <div>\n                  {'Scale '}\n                  <Radio.Group\n                    buttonStyle=\"solid\"\n                    size=\"small\"\n                    value={scale}\n                    onChange={e => setScale(e.target.value)}\n                  >\n                    <Radio.Button value=\"log\">Log</Radio.Button>\n                    <Radio.Button value=\"linear\">Linear</Radio.Button>\n                  </Radio.Group>\n                </div>\n              }\n              placement=\"bottomRight\"\n            >\n              <Button size=\"small\">\n                <Icon type=\"setting\" theme=\"filled\" />\n              </Button>\n            </Popover>\n          )}\n        </div>\n      </div>\n      <Table\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: '50%',\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  mapRef: PropTypes.object.isRequired,\n  scale: PropTypes.string,\n  setScale: PropTypes.func.isRequired,\n};\n\nStatisticExplorer.defaultProps = {\n  scale: null,\n};\n\nexport default StatisticExplorer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label, labelColor, displayFilter, totalFilter, units } = props;\n    const filteredPayload = payload.filter(displayFilter);\n\n    if (filteredPayload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload\n      .filter(totalFilter)\n      .reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = filteredPayload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div style={{ color: labelColor, fontWeight: 'bold' }}>{label}</div>\n        <div>\n          {filteredPayload.map((p, i) => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey || name} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit || units[i]}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  labelColor: PropTypes.string,\n  withTotal: PropTypes.bool,\n  displayFilter: PropTypes.func,\n  totalFilter: PropTypes.func,\n  units: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  labelColor: 'black',\n  withTotal: false,\n  displayFilter: i => i,\n  totalFilter: i => i,\n  units: {},\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  LabelList,\n  Legend,\n} from 'recharts';\nimport { toPairs, range } from 'ramda';\nimport regression from 'regression';\n\nimport CustomTooltip from '../../CountryView/components/CustomTooltip';\n\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nconst RESOLUTION = 100;\nconst COLORS = {\n  Africa: 'black',\n  Europe: 'blue',\n  Americas: 'red',\n  Asia: 'green',\n  Oceania: 'orange',\n};\nconst legend = toPairs(COLORS).map(array => ({\n  value: array[0],\n  color: array[1],\n}));\n\nconst DISPLAYED_COUNTRIES = [\n  'CN',\n  'US',\n  'FR',\n  'DE',\n  'GB',\n  'BR',\n  'CA',\n  'IN',\n  'RU',\n  'ZA',\n];\n\nfunction HDIByEnergyChart(props) {\n  const { data, statistics, height, countries } = props;\n\n  const finalData = data\n    .filter(d => d.energy && d.hdi)\n    .map(d => {\n      const country = countries.find(c => c.alpha2Code === d.countryCode);\n      return {\n        ...d,\n        r: Math.max(Math.log(d[`pop/${d.countryCode}`]) + 1, 2),\n        commonName: country.commonName,\n        color: COLORS[country.region],\n        label: DISPLAYED_COUNTRIES.includes(d.countryCode) ? d.countryCode : '',\n      };\n    })\n    .sort((a, b) => (a.r < b.r ? 1 : -1));\n  const dataArray = finalData.map(d => [d.energy, d.hdi]);\n  const { equation } = regression.logarithmic(dataArray);\n  const min = Math.min(...finalData.map(d => d.energy));\n  const max = Math.max(...finalData.map(d => d.energy));\n  const data2 = range(0, RESOLUTION + 1)\n    .map(i => {\n      const energy = min + (i / RESOLUTION) * (max - min);\n      return {\n        energy,\n        hdi: equation[1] * Math.log(energy) + equation[0],\n      };\n    })\n    .filter(d => d.hdi < 1);\n\n  return (\n    <div className=\"HDIByEnergyChart\">\n      <ResponsiveContainer height={height}>\n        <ScatterChart data={finalData} margin={{ bottom: 50 }}>\n          <Scatter data={data2} line={{ stroke: 'grey' }} shape={() => null} />\n          <Scatter\n            shape={props2 => (\n              <circle\n                cx={props2.cx}\n                cy={props2.cy}\n                r={props2.r}\n                fill={props2.color}\n              />\n            )}\n          >\n            <LabelList dataKey=\"label\" position=\"top\" />\n          </Scatter>\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"energy\"\n            name={statistics.energy.name}\n            type=\"number\"\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.energy.name} (${displayUnit(\n                statistics.energy.unit,\n                true,\n              )})`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"hdi\"\n            name={statistics.hdi.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n            domain={[0.2, 1]}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  `${\n                    countries.find(\n                      c =>\n                        c.alpha2Code === props2.payload[0].payload.countryCode,\n                    ).commonName\n                  } (${props2.payload[0].payload.countryCode})`\n                }\n                labelColor={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.color\n                }\n                units={{\n                  '0': `${displayUnit(statistics.energy.unit, true)}`,\n                  '1': statistics.hdi.unit.main,\n                }}\n              />\n            )}\n          />\n          <Legend verticalAlign=\"top\" payload={legend} />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nHDIByEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      hdi: PropTypes.number,\n      energy: PropTypes.number,\n    }),\n  ).isRequired,\n  countries: PropTypes.arrayOf(CountryType.isRequired).isRequired,\n  statistics: PropTypes.shape({\n    hdi: StatisticType,\n    energy: StatisticType,\n  }).isRequired,\n  color: PropTypes.string,\n  height: PropTypes.number.isRequired,\n};\n\nHDIByEnergyChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default HDIByEnergyChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Switch } from 'antd';\n\nfunction ChartSettings(props) {\n  const {\n    perCapitaSwitch,\n    stackedSwitch,\n    perCapita,\n    stacked,\n    setPerCapita,\n    setStacked,\n  } = props;\n\n  return (\n    <div className=\"ChartSettings\">\n      {perCapitaSwitch && (\n        <div>\n          {'Per capita '}\n          <Switch size=\"small\" checked={perCapita} onChange={setPerCapita} />\n        </div>\n      )}\n      {stackedSwitch && (\n        <div>\n          {'Stacked '}\n          <Switch size=\"small\" checked={stacked} onChange={setStacked} />\n        </div>\n      )}\n    </div>\n  );\n}\nChartSettings.propTypes = {\n  perCapitaSwitch: PropTypes.bool.isRequired,\n  stackedSwitch: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  setStacked: PropTypes.func.isRequired,\n};\n\nexport default ChartSettings;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(null, { load: loadFunction })(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values, uniq } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n  statisticSourcesSelector,\n} from '../store/statistics';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../utils';\nimport { countrySelector } from '../store/countries';\n\nconst StatisticsLoader = buildLoader(({ countryStatistics }) =>\n  loadCountryStatistics(countryStatistics),\n);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction mapStateToProps(state, props) {\n  const {\n    perCapita,\n    statisticCode,\n    mapOfCountryStatistics: mapOfCountryStatisticsInput,\n    countryCode,\n    withReference,\n    referenceCountryCode = 'WORLD',\n  } = props;\n  const isIntensive =\n    statisticCode && statisticSelector(statisticCode, state).isIntensive;\n  const mapOfCountryStatistics =\n    (perCapita || isIntensive) && withReference\n      ? {\n          ...mapOfCountryStatisticsInput,\n          reference: {\n            countryCode: referenceCountryCode,\n            statisticCode:\n              typeof withReference === 'boolean'\n                ? statisticCode\n                : withReference,\n          },\n        }\n      : mapOfCountryStatisticsInput;\n\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n  );\n  const mapOfCountryStatisticsToLoad = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const countryStatisticsToLoad = values(mapOfCountryStatisticsToLoad);\n  const statisticCodes = uniq(\n    countryStatisticsToLoad.map(c => c.statisticCode),\n  );\n  const isLoaded = countryStatisticsLoadedSelector(\n    countryStatisticsToLoad,\n    state,\n  );\n  const data = isLoaded\n    ? compiledCountryStatisticsSelector(\n        {\n          mapOfCountryStatistics,\n          countryCode: props.countryCode,\n          perCapita: props.perCapita,\n        },\n        state,\n      )\n    : [];\n\n  return {\n    data,\n    statistics: map(\n      ({ statisticCode: code }) => statisticSelector(code, state),\n      parsedMapOfCountryStatistics,\n    ),\n    statisticSources: statisticSourcesSelector(statisticCodes, state),\n    isLoaded,\n    countryStatisticsToLoad,\n    country: countrySelector(countryCode, state),\n    referenceCountry: countrySelector(referenceCountryCode, state),\n  };\n}\n\nfunction withCountryStatistics(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) =>\n      mapStateToProps(state, {\n        mapOfCountryStatistics: mapOfCountryStatisticsSelector(state, props),\n        ...props,\n      }),\n    )(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader countryStatistics={props.countryStatisticsToLoad} />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistics;\n","import React, { Component } from 'react';\nimport { values } from 'ramda';\nimport { withStateHandlers, compose, defaultProps } from 'recompose';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\n\nimport { Icon, Popover, Button } from 'antd';\n\nimport { displayUnit } from '../utils';\nimport StatisticDetails from '../components/StatisticDetails';\n\nimport ChartSettings from './components/ChartSettings';\nimport ShareChartComponent from '../components/ShareChartComponent';\nimport withCountryStatistics from './withCountryStatistics';\n\nconst defaultHeight = 200;\n\nexport function buildChartWrapper(WrappedChart) {\n  return class ChartWrapper extends Component {\n    constructor() {\n      super();\n      this.chartRef = React.createRef();\n      this.buttonRef = React.createRef();\n    }\n\n    render() {\n      const {\n        title,\n        description,\n        statistics,\n        statisticSources,\n        perCapita,\n        stacked,\n        setPerCapita,\n        setStacked,\n        data,\n        withReference,\n        referenceCountryCode,\n        location,\n        perCapitaSwitch,\n        stackedSwitch,\n        hasSettings,\n      } = this.props;\n      const statisticList = values(statistics);\n      const statistic = statisticList[0];\n      const id = (title\n        ? title.replace(/ /g, '_')\n        : statistic.name.replace(/ /g, '_')\n      ).toLowerCase();\n\n      const descriptionStatistic = statisticList.find(\n        s => s.code === description,\n      );\n      const finalDescription =\n        statisticList.length < 2\n          ? description || statistic.description\n          : (descriptionStatistic && descriptionStatistic.description) ||\n            description;\n      const hash = location.hash.substr(1);\n      const style =\n        hash === id\n          ? {\n              boxShadow: '0px 0px 10px 1px rgba(0,0,0,0.5)',\n            }\n          : {};\n\n      return (\n        <div id={id} className=\"ChartWrapper\" ref={this.chartRef} style={style}>\n          <div className=\"ChartWrapper__header\">\n            <div className=\"ChartWrapper__header__left\">\n              <span className=\"ChartWrapper__title\">\n                {title || statistic.name}\n              </span>\n              <span className=\"ChartWrapper__title__unit\">\n                {statistic.unit.main === ''\n                  ? ''\n                  : ` (${displayUnit(statistic.unit, perCapita)})`}\n              </span>\n            </div>\n            <div\n              className=\"ChartWrapper__header__right\"\n              data-html2canvas-ignore\n            >\n              <ShareChartComponent\n                id={id}\n                chartRef={this.chartRef}\n                statistics={{ year: { code: 'YEAR' }, ...statistics }}\n                data={data}\n                {...(withReference\n                  ? {\n                      query: `?${qs.stringify({\n                        referenceCountry: referenceCountryCode,\n                      })}`,\n                    }\n                  : {})}\n              />\n              <StatisticDetails\n                statisticSources={statisticSources}\n                description={finalDescription}\n              />\n              {hasSettings && (\n                <div>\n                  <Popover\n                    title=\"Settings\"\n                    arrowPointAtCenter\n                    content={\n                      // eslint-disable-next-line react/jsx-wrap-multilines\n                      <ChartSettings\n                        perCapitaSwitch={perCapitaSwitch}\n                        stackedSwitch={stackedSwitch}\n                        stacked={stacked}\n                        perCapita={perCapita}\n                        setPerCapita={setPerCapita}\n                        setStacked={setStacked}\n                      />\n                    }\n                    placement=\"bottomRight\"\n                  >\n                    <Button size=\"small\">\n                      <Icon type=\"setting\" theme=\"filled\" />\n                    </Button>\n                  </Popover>\n                </div>\n              )}\n            </div>\n          </div>\n          <WrappedChart {...this.props} />\n          <div className=\"ChartWrapper__footer toPng\">\n            From ewoken.github.io/world-data-app/ - Sources: IEA, World Bank\n          </div>\n        </div>\n      );\n    }\n  };\n}\n\nfunction buildChart(options = {}) {\n  const {\n    mapOfCountryStatisticsSelector,\n    perCapitaSwitch = false,\n    stackedSwitch = false,\n    height = defaultHeight,\n  } = options;\n  const hasSettings = perCapitaSwitch || stackedSwitch;\n  const hocs = [\n    withRouter,\n    defaultProps({\n      perCapitaSwitch,\n      stackedSwitch,\n      hasSettings,\n      height,\n      perCapita: false,\n      stacked: false,\n    }),\n  ];\n\n  if (hasSettings) {\n    hocs.push(\n      withStateHandlers(\n        ({ defaultPerCapita = false, defaultStacked = false }) => ({\n          perCapita: defaultPerCapita,\n          stacked: defaultStacked,\n        }),\n        {\n          setPerCapita: () => perCapita => ({ perCapita }),\n          setStacked: () => stacked => ({ stacked }),\n        },\n      ),\n    );\n  }\n\n  hocs.push(withCountryStatistics(mapOfCountryStatisticsSelector));\n  hocs.push(buildChartWrapper);\n\n  return compose(...hocs);\n}\n\nexport default buildChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport { values, map } from 'ramda';\n\nimport { withRouter } from 'react-router-dom';\n\nimport { Spin } from 'antd';\nimport HDIByEnergyChart from '../components/HDIByEnergyChart';\n\nimport { buildChartWrapper } from '../../../HOC/buildChart';\nimport { countriesSelector } from '../../../store/countries';\nimport {\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../../store/statistics';\n\nconst STATISTICS_MAP = {\n  hdi: 'HUMAN_DEVELOPMENT_INDEX',\n  energy: 'FINAL_ENERGY_CONSUMPTION_MTOE',\n};\nconst STATISTICS_CODES = values(STATISTICS_MAP).concat(['POPULATION']);\n\nclass HDIByEnergyChartLoader extends Component {\n  componentDidMount() {\n    const { loadStatistic } = this.props;\n    STATISTICS_CODES.map(loadStatistic);\n  }\n\n  render() {\n    const { isLoaded } = this.props;\n    return (\n      <Spin spinning={!isLoaded}>\n        <HDIByEnergyChart {...this.props} />\n      </Spin>\n    );\n  }\n}\n\nHDIByEnergyChartLoader.propTypes = {\n  loadStatistic: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nconst hocs = [\n  withRouter,\n  connect(\n    state => ({\n      countries: countriesSelector(state),\n      statisticSources: statisticSourcesSelector(STATISTICS_CODES, state),\n      isLoaded: STATISTICS_CODES.every(statisticCode =>\n        statisticOfAllCountriesLoadedSelector(statisticCode, state),\n      ),\n      statistics: map(\n        statisticCode => statisticSelector(statisticCode, state),\n        STATISTICS_MAP,\n      ),\n      data: compiledStatisticForCountriesAndYear(\n        {\n          mapOfCountryStatistics: STATISTICS_MAP,\n          year: 2016,\n          perCapita: true,\n          withWorld: false,\n        },\n        state,\n      ),\n    }),\n    {\n      loadStatistic: loadStatisticOfCountries,\n    },\n  ),\n  buildChartWrapper,\n];\n\nconst HDIByEnergyChartContainer = compose(...hocs)(HDIByEnergyChartLoader);\n\nexport default HDIByEnergyChartContainer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport qs from 'qs';\n\nimport { Row, Col, Drawer } from 'antd';\nimport ScrollToTop from '../../components/ScrollToTop';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\nimport HDIByEnergyChartContainer from './containers/HDIByEnergyChartContainer';\n\nimport {\n  countriesSelector,\n  countriesInBounds,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../store/statistics';\nimport { testScreenType } from '../../utils';\n\nfunction f(statisticCode, perCapita) {\n  // TODO\n  return perCapita ? [statisticCode, 'POPULATION'] : [statisticCode];\n}\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    selectedCountries: countriesInBounds(boundsFilter, state),\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    countries: countriesInBounds(boundsFilter, state),\n    statistics: allStatisticsSelector(state).filter(s => !s.isGlobal),\n    currentStatistic: statisticSelector(statisticCode, state),\n    statisticSources: statisticSourcesSelector(\n      f(statisticCode, perCapita),\n      state,\n    ),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nconst MIN_ZOOM = 2;\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      scale: null,\n      boundsFilter: null,\n      drawerIsOpen: false,\n    };\n    this.mapRef = React.createRef();\n    this.onMapChange = e =>\n      this.setFilterBounds(e.target.getBounds(), e.target.getZoom());\n    this.StatisticDiv = ({ children }) => {\n      const { drawerIsOpen } = this.state;\n      return !testScreenType('md') ? (\n        <Drawer\n          title=\"Map Control\"\n          placement=\"right\"\n          closable\n          onClose={() => this.setDrawerState(false)}\n          visible={drawerIsOpen}\n          width=\"300px\"\n        >\n          {children}\n        </Drawer>\n      ) : (\n        <Col className=\"hideOnMobile\" md={8}>\n          {children}\n        </Col>\n      );\n    };\n  }\n\n  componentDidMount() {\n    const { loadStatistic, statisticCode, perCapita } = this.props;\n\n    loadStatistic(statisticCode);\n\n    if (perCapita) {\n      loadStatistic('POPULATION');\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { loadStatistic, statisticCode, perCapita } = this.props;\n    if (statisticCode !== prevProps.statisticCode) {\n      loadStatistic(statisticCode);\n    }\n    if (perCapita !== prevProps.perCapita && perCapita) {\n      loadStatistic('POPULATION');\n    }\n  }\n\n  setParameters(parameters) {\n    const { statisticCode, perCapita, currentYear, goTo } = this.props;\n    const newPerCapita =\n      parameters.perCapita === undefined ? perCapita : parameters.perCapita;\n\n    const newParameters = {\n      statisticCode,\n      currentYear,\n      ...parameters,\n      perCapita: newPerCapita && parameters.statisticCode !== 'POPULATION',\n    };\n    goTo(`?${qs.stringify(newParameters)}`);\n  }\n\n  setFilterBounds(bounds, zoom) {\n    this.setState({ boundsFilter: zoom === MIN_ZOOM ? null : bounds });\n  }\n\n  setScale(scale) {\n    this.setState({ scale });\n  }\n\n  setDrawerState(isOpen) {\n    this.setState({ drawerIsOpen: isOpen });\n  }\n\n  render() {\n    const {\n      goTo,\n      currentYear,\n      statisticCode,\n      perCapita,\n      location,\n    } = this.props;\n    const { scale, boundsFilter, drawerIsOpen } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <ScrollToTop />\n        <div className=\"hideOnMobile\">\n          <Row>\n            <h1>Welcome to the World Energy Data Explorer</h1>\n          </Row>\n        </div>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <div ref={this.mapRef}>\n              <ConnectedWorldMap\n                statisticCode={statisticCode}\n                currentYear={currentYear}\n                perCapita={perCapita}\n                scale={scale}\n                minZoom={MIN_ZOOM}\n                onMapChange={this.onMapChange}\n                boundsFilter={boundsFilter}\n                onCountryDblClick={country =>\n                  goTo(`country/${country.alpha2Code}`)\n                }\n                onControlButtonClick={() => this.setDrawerState(!drawerIsOpen)}\n              />\n            </div>\n          </Col>\n          <this.StatisticDiv>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => goTo(`country/${record.countryCode}`)}\n              setYear={year => this.setParameters({ currentYear: year })}\n              setStatistic={value =>\n                this.setParameters({ statisticCode: value })\n              }\n              setPerCapita={value => this.setParameters({ perCapita: value })}\n              mapRef={this.mapRef}\n              scale={scale}\n              setScale={value => this.setScale(value)}\n              boundsFilter={boundsFilter}\n            />\n          </this.StatisticDiv>\n          {location.search.includes('beta') && (\n            <Col md={24} style={{ marginTop: 20, backgroundColor: 'white' }}>\n              <HDIByEnergyChartContainer\n                title=\"Human development index according to energy in 2016\"\n                description=\"size of circle depends on population\"\n                height={600}\n              />\n            </Col>\n          )}\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  loadStatistic: PropTypes.func.isRequired,\n  statisticCode: PropTypes.string,\n  perCapita: PropTypes.bool.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  goTo: PropTypes.func.isRequired,\n  location: PropTypes.shape({ search: PropTypes.string.isRequired }).isRequired,\n};\n\nHomeView.defaultProps = {\n  statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n};\n\nexport default connect(\n  (state, props) => {\n    const { search } = props.location;\n    const queryObject = search ? qs.parse(search.substr(1)) : {};\n    return {\n      goTo(path) {\n        props.history.push(path);\n      },\n      currentYear: Number(queryObject.currentYear) || 2010,\n      perCapita: queryObject.perCapita === 'true',\n      statisticCode: queryObject.statisticCode,\n    };\n  },\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import { merge } from 'topojson-client';\n\nimport {\n  countrySelector,\n  countriesSelector,\n  worldTopoSelector,\n} from './countries';\nimport { areaSelector, areasOfCountrySelector, areasSelector } from './areas';\n\nexport function countryWithAreasSelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  const areas = areasOfCountrySelector(countryCode, state);\n\n  return {\n    ...country,\n    areas,\n  };\n}\n\nexport function areaWithCountriesSelector(areaCode, state) {\n  const area = areaSelector(areaCode, state);\n  const worldTopo = worldTopoSelector(state);\n\n  const countries = area.countryCodes\n    ? area.countryCodes\n        .map(countryCode => countrySelector(countryCode, state))\n        .filter(c => !!c)\n    : countriesSelector(state);\n\n  const countryAlpha3Codes = countries.map(c => c.numericCode);\n  const geometries = worldTopo.objects.countries.geometries.filter(c =>\n    countryAlpha3Codes.includes(c.id),\n  );\n\n  return {\n    ...area,\n    countries,\n    geojson: merge(worldTopo, geometries),\n  };\n}\n\nexport function countriesAndAreasSelector(state) {\n  return [\n    ...countriesSelector(state).filter(c => !c.disabled),\n    ...areasSelector(state),\n  ];\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  Legend,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const {\n    data,\n    statistics,\n    color,\n    perCapita,\n    height,\n    country,\n    referenceCountry,\n    withReference,\n    extra,\n  } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n  const withComparison = withReference && (perCapita || statistic.isIntensive);\n\n  return (\n    <div className=\"BasicChart\">\n      <ResponsiveContainer height={height}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={country.commonName}\n            unit={` ${unit}`}\n          />\n          {withComparison && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reference\"\n              stroke=\"red\"\n              strokeWidth={3}\n              dot={false}\n              name={referenceCountry.commonName}\n              unit={` ${unit}`}\n            />\n          )}\n          {extra && extra(props)}\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={props2 => <CustomTooltip {...props2} />} />\n          {withComparison && <Legend iconType=\"circle\" />}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n  withReference: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  country: CountryType.isRequired,\n  referenceCountry: CountryType.isRequired,\n  extra: PropTypes.func,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n  withReference: false,\n  extra: null,\n};\n\nexport default BasicChart;\n","import buildChart from '../../../HOC/buildChart';\nimport BasicChart from '../components/BasicChart';\n\nexport default buildChart()(BasicChart);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction GeoJSONMap(props) {\n  const { geojson, center } = props;\n\n  return (\n    <div className=\"GeoJSONMap\">\n      <Map\n        center={center}\n        zoom={2}\n        zoomDelta={0}\n        zoomSnap={0}\n        boxZoom={false}\n        doubleClickZoom={false}\n        scrollWheelZoom={false}\n        zoomControl={false}\n        dragging={false}\n        style={{ height: '250px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {geojson && <GeoJSON data={geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nGeoJSONMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  geojson: PropTypes.object.isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default GeoJSONMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data, height } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={dataWithImportAndExport}>\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" />\n          <YAxis />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                displayFilter={p => p.name !== 'base'}\n              />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\n\nfunction GDPByEnergyChart(props) {\n  const { data, color, statistics } = props;\n  // const statistic = statistics.value;\n  // const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"GDPByEnergyChart\">\n      <ResponsiveContainer height={300}>\n        <ScatterChart data={data} margin={{ bottom: 50 }}>\n          <Scatter\n            fill={color}\n            shape={props2 => (\n              <circle cx={props2.cx} cy={props2.cy} r={3} fill={color} />\n            )}\n            line\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"energy\"\n            name={statistics.energy.name}\n            type=\"number\"\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.energy.name} (${\n                statistics.energy.unit.main\n              })`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"gdp\"\n            name={statistics.gdp.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.year\n                }\n                units={{\n                  '0': statistics.energy.unit.main,\n                  '1': statistics.gdp.unit.main,\n                }}\n              />\n            )}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nGDPByEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      gdp: PropTypes.number,\n      energy: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    gdp: StatisticType,\n    energy: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  color: PropTypes.string,\n};\n\nGDPByEnergyChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default GDPByEnergyChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nconst DEFAULT_AREA_PROPS = {\n  type: 'monotone',\n  dot: false,\n  unit: '%',\n  activeDot: false,\n  strokeOpacity: 0,\n  fillOpacity: 0.8,\n  stackId: '1',\n  yAxisId: 'left',\n  legendType: 'circle',\n};\n\nconst AREA_PROPS = {\n  coal: {\n    name: 'Coal',\n    dataKey: 'coal',\n    stroke: 'black',\n    fill: 'black',\n  },\n  oil: {\n    name: 'Oil',\n    dataKey: 'oil',\n    stroke: 'grey',\n    fill: 'grey',\n  },\n  gas: {\n    name: 'Gas',\n    dataKey: 'gas',\n    stroke: 'orange',\n    fill: 'orange',\n  },\n};\nconst FUELS = Object.keys(AREA_PROPS);\n\nfunction RentsChart(props) {\n  const { data, height, statistics } = props;\n  const displayedFuel = FUELS.filter(fuel => data.some(d => d[fuel] > 0.1));\n\n  return (\n    <div className=\"RentsChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={data} margin={{ top: 5 }}>\n          {displayedFuel.map(fuel => (\n            <Area key={fuel} {...DEFAULT_AREA_PROPS} {...AREA_PROPS[fuel]} />\n          ))}\n          <Line\n            name=\"Oil price\"\n            dataKey=\"price\"\n            stroke=\"red\"\n            yAxisId=\"right\"\n            dot={false}\n            unit={statistics.price.unit.base}\n            legendType=\"line\"\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" />\n          <YAxis yAxisId=\"left\" />\n          <YAxis\n            yAxisId=\"right\"\n            orientation=\"right\"\n            // eslint-disable-next-line no-irregular-whitespace\n            label={`   ${statistics.price.unit.base}`}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={({ dataKey }) => dataKey !== 'price'}\n              />\n            )}\n            displayFilter={({ dataKey }) =>\n              displayedFuel.includes(dataKey) || dataKey === 'price'\n            }\n          />\n          <Legend />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nRentsChart.propTypes = {\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    price: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      price: PropTypes.number,\n    }),\n  ).isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default RentsChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\nimport { ReferenceLine } from 'recharts';\n\nimport { FuelIndicatorsType } from '../../../utils/types';\n\nimport buildChart from '../../../HOC/buildChart';\nimport ProdConsoChart from './ProdConsoChart';\nimport GDPByEnergyChart from './GDPByEnergyChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\nimport RentsChart from './RentsChart';\n\nconst RentsChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    coal: 'COAL_RENTS_IN_GDP',\n    oil: 'OIL_RENTS_IN_GDP',\n    gas: 'GAS_RENTS_IN_GDP',\n    price: 'OIL_PRICE_USD',\n  },\n})(RentsChart);\n\nconst ProdConsoChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: (state, props) => ({\n    prod: props.prodStatisticCode,\n    conso: props.consoStatisticCode,\n  }),\n})(ProdConsoChart);\n\nconst GDPByEnergyChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    gdp: 'GDP_2010_USD',\n    energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n  },\n})(GDPByEnergyChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode, fuelProducedOrConsumed, hasRents } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n        {hasRents && (\n          <Col md={8} sm={24}>\n            <RentsChartContainer\n              countryCode={countryCode}\n              title=\"Share of fossil rents in GDP\"\n              description=\"Sum of coal, oil and gas rents in GDP\"\n            />\n          </Col>\n        )}\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"OIL_RELATIVE_PRICE\"\n            countryCode={countryCode}\n            color=\"grey\"\n            extra={props2 => (\n              <ReferenceLine\n                y={Math.max(...props2.data.map(d => d.value))}\n                stroke=\"red\"\n                strokeDasharray=\"3 3\"\n                isFront\n              />\n            )}\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <h3>Imports/Exports</h3>\n        {fuelProducedOrConsumed.coal && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n              fuel=\"Coal\"\n              title=\"Coal Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.oil && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n              fuel=\"Oil\"\n              title=\"Oil Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.gas && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n              consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n              fuel=\"Gas\"\n              title=\"Gas Trade\"\n            />\n          </Col>\n        )}\n      </Row>\n      <Row>\n        <h3>Energy/GDP coupling</h3>\n        <Col md={16} sm={24}>\n          <GDPByEnergyChartContainer\n            countryCode={countryCode}\n            title=\"GDP according to primary energy\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  fuelProducedOrConsumed: FuelIndicatorsType.isRequired,\n  hasRents: PropTypes.bool.isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { values, mapObjIndexed } from 'ramda';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport color from 'onecolor';\n\nimport { getNiceTickValues } from 'recharts-scale';\nimport { tickFormatter, displayUnit, clickHandlers } from '../../../utils';\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nconst FILL_OPACITY = 0.7;\nconst REFERENCE_DATAKEY = 'reference'; // TODO in selectors\nconst defaultLineAreaProps = {\n  type: 'monotone',\n  dot: false,\n  activeDot: false,\n  fillOpacity: FILL_OPACITY,\n  isAnimationActive: false,\n};\n\nconst lineAreaPropsMap = {\n  coal: { name: 'Coal', color: 'black' },\n  oil: { name: 'Oil', color: 'grey' },\n  gas: { name: 'Gas', color: 'orange' },\n  nuclear: { name: 'Nuclear', color: 'purple' },\n  hydro: { name: 'Hydroelectricity', color: 'blue' },\n  biofuelsWaste: { name: 'Biofuels & Waste', color: 'saddlebrown' },\n  solarWindTideGeoth: { name: 'Geothermy, Wind, Solar & Tide', color: 'green' },\n};\n\nconst legendPayload = values(\n  mapObjIndexed((p, key) => ({ ...p, dataKey: key }), lineAreaPropsMap),\n).map(props => ({\n  dataKey: props.dataKey,\n  value: props.name,\n  type: 'circle',\n  inactive: false,\n  color: color(props.color)\n    .alpha(FILL_OPACITY)\n    .cssa(),\n}));\n\nfunction getLegendPayload({\n  fuelConsumed,\n  displayedStats,\n  perCapita,\n  referenceCountry,\n}) {\n  return legendPayload\n    .filter(payload => fuelConsumed[payload.dataKey])\n    .map(payload => ({\n      ...payload,\n      inactive: !displayedStats.includes(payload.dataKey),\n    }))\n    .concat(\n      perCapita\n        ? [\n            {\n              dataKey: REFERENCE_DATAKEY,\n              value: referenceCountry.commonName,\n              color: 'red',\n              type: 'circle',\n              inactive: !displayedStats.includes(REFERENCE_DATAKEY),\n            },\n          ]\n        : [],\n    );\n}\n\nfunction getTicksAndDomain({ data, perCapita, displayedStats, stacked }) {\n  const displayedFuels = displayedStats.filter(s => s !== REFERENCE_DATAKEY);\n  const withReference = perCapita && displayedStats.includes(REFERENCE_DATAKEY);\n  const max = Math.max(\n    ...(stacked\n      ? data.map(d => displayedFuels.reduce((sum, k) => sum + d[k], 0))\n      : data.map(d => Math.max(...displayedFuels.map(k => d[k])))),\n    ...(withReference ? data.map(d => d.reference) : []),\n  );\n\n  const chartMax = max * 1.05;\n  const ticks = getNiceTickValues([0, chartMax], 5, true);\n\n  if (ticks[3] > chartMax) {\n    ticks.pop();\n  }\n  const domain = [0, ticks[ticks.length - 1]];\n  return { domain, ticks };\n}\n\nfunction EnergyMixChart(props) {\n  const {\n    data,\n    stacked,\n    perCapita,\n    fuelConsumed,\n    statistics,\n    referenceCountry,\n    displayedStats,\n    toggleStat,\n    setDisplayedStats,\n  } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n  const lineAreaProps = stacked\n    ? { stackId: '1', unit, ...defaultLineAreaProps }\n    : { strokeWidth: 2, unit, ...defaultLineAreaProps };\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart data={data}>\n          {displayedStats\n            .filter(s => s !== REFERENCE_DATAKEY)\n            .map(fuel => {\n              const fuelProps = lineAreaPropsMap[fuel];\n              return (\n                <LineArea\n                  key={fuel}\n                  {...lineAreaProps}\n                  dataKey={fuel}\n                  name={fuelProps.name}\n                  stroke={fuelProps.color}\n                  fill={fuelProps.color}\n                />\n              );\n            })}\n          {perCapita && displayedStats.includes(REFERENCE_DATAKEY) && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reference\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n              name={referenceCountry.commonName}\n              stroke=\"red\"\n              unit={unit}\n              isAnimationActive={false}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" />\n          <YAxis\n            tickFormatter={tickFormatter}\n            {...getTicksAndDomain({\n              data,\n              perCapita,\n              displayedStats,\n              stacked,\n            })}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={p => p.dataKey !== REFERENCE_DATAKEY}\n              />\n            )}\n          />\n          <Legend\n            iconType=\"circle\"\n            onClick={clickHandlers({\n              onClick: ({ dataKey }) => toggleStat(dataKey),\n              onDoubleClick: ({ dataKey }) => setDisplayedStats([dataKey]),\n            })}\n            payload={getLegendPayload({\n              fuelConsumed,\n              displayedStats,\n              perCapita,\n              referenceCountry,\n            })}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  fuelConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  referenceCountry: CountryType.isRequired,\n  toggleStat: PropTypes.func.isRequired,\n  setDisplayedStats: PropTypes.func.isRequired,\n  displayedStats: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default EnergyMixChart;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { sortBy } from 'ramda';\n\nimport buildChart from '../../../HOC/buildChart';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport { fuelConsumedCountrySelector } from '../../../store/countries';\n\nclass EnergyMixChartWithState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      displayedStats: [],\n    };\n    this.toggleStat = this.toggleStat.bind(this);\n    this.setDisplayedStats = this.setDisplayedStats.bind(this);\n    this.initDone = false;\n  }\n\n  componentDidMount() {\n    this.init(this.props);\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { countryCode, data } = this.props;\n    if (\n      newProps.countryCode !== countryCode ||\n      (data.length !== newProps.data.length && !this.initDone)\n    ) {\n      this.init(newProps);\n    }\n  }\n\n  setDisplayedStats(displayedStats) {\n    this.setState({\n      displayedStats,\n    });\n  }\n\n  init({ data, fuelConsumed }) {\n    this.initDone = true;\n    this.setState({\n      displayedStats: sortBy(\n        fuel => -Math.max(...data.map(d => d[fuel])),\n        Object.keys(fuelConsumed).filter(fuel => fuelConsumed[fuel]),\n      ).concat(['reference']),\n    });\n  }\n\n  toggleStat(toggledStat) {\n    const { displayedStats } = this.state;\n    this.setState({\n      displayedStats: displayedStats.includes(toggledStat)\n        ? displayedStats.filter(d => d !== toggledStat)\n        : [...displayedStats, toggledStat],\n    });\n  }\n\n  render() {\n    return (\n      <EnergyMixChart\n        {...this.props}\n        {...this.state}\n        toggleStat={this.toggleStat}\n        setDisplayedStats={this.setDisplayedStats}\n      />\n    );\n  }\n}\n\nconst EnergyMixChartBuilded = buildChart({\n  perCapitaSwitch: true,\n  stackedSwitch: true,\n})(EnergyMixChartWithState);\n\nconst EnergyMixChartContainer = connect((state, { countryCode }) => ({\n  fuelConsumed: fuelConsumedCountrySelector(countryCode, state),\n}))(EnergyMixChartBuilded);\n\nexport default EnergyMixChartContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { sortBy } from 'ramda';\n\nimport { Select } from 'antd';\n\nimport { CountryType } from '../../../utils/types';\n\nfunction SettingsComponent(props) {\n  const { countries, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"SettingComponent\">\n      {'Compare to : '}\n      <Select\n        value={referenceCountryCode}\n        placeholder=\"Select a country or a zone\"\n        optionFilterProp=\"title\"\n        showSearch\n        style={{ width: '250px' }}\n        onSelect={countryCode => setReferenceCountry(countryCode)}\n      >\n        {sortBy(c => c.commonName, countries).map(country => (\n          <Select.Option\n            key={country.alpha2Code}\n            disabled={country.disabled}\n            title={`${country.commonName} (${country.alpha3Code})`}\n          >\n            {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n          </Select.Option>\n        ))}\n      </Select>\n    </div>\n  );\n}\n\nSettingsComponent.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default SettingsComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\nimport SettingsComponent from './SettingsComponent';\nimport { countriesAndAreasSelector } from '../../../store/otherSelectors';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nconst ConnectedSettingsComponent = connect(state => ({\n  countries: countriesAndAreasSelector(state),\n}))(SettingsComponent);\n\nfunction SummaryTab(props) {\n  const { countryCode, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <Row>\n        <Col md={24} sm={24}>\n          <ConnectedSettingsComponent\n            setReferenceCountry={setReferenceCountry}\n            referenceCountryCode={referenceCountryCode}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={24} sm={24}>\n          <EnergyMixChartContainer\n            title=\"Primary energy consumption\"\n            description=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            countryCode={countryCode}\n            mapOfCountryStatistics={primaryMap}\n            withReference={primaryReference}\n            referenceCountryCode={referenceCountryCode}\n            defaultPerCapita\n            defaultStacked\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={24} sm={24}>\n          <EnergyMixChartContainer\n            title=\"Electricity generation by fuels\"\n            description=\"ELECTRICITY_GENERATION_TWH\"\n            countryCode={countryCode}\n            mapOfCountryStatistics={electrictyMap}\n            withReference={electricityReference}\n            referenceCountryCode={referenceCountryCode}\n            defaultPerCapita\n            defaultStacked\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\nimport SettingsComponent from './SettingsComponent';\n\nimport { countriesAndAreasSelector } from '../../../store/otherSelectors';\n\nconst ConnectedSettingsComponent = connect(state => ({\n  countries: countriesAndAreasSelector(state),\n}))(SettingsComponent);\n\nfunction ClimateTab(props) {\n  const { countryCode, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row>\n        <Col md={24} sm={24}>\n          <ConnectedSettingsComponent\n            setReferenceCountry={setReferenceCountry}\n            referenceCountryCode={referenceCountryCode}\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"FOSSIL_CO2_EMISSIONS_MT\"\n            perCapita\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            perCapita\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_INTENSITY_OF_ENERGY\"\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"LOW_CARBON_ENERGY_PRODUCTION_MTOE\"\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            perCapita\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"GHG_EMISSIONS_GKWH\"\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\nimport { ReferenceLine } from 'recharts';\n\nimport { FuelIndicatorsType } from '../../../utils/types';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nfunction PeakReference(props) {\n  const { peak } = props;\n\n  return (\n    peak && (\n      <ReferenceLine\n        y={peak.value}\n        stroke=\"red\"\n        strokeDasharray=\"3 3\"\n        isFront\n      />\n    )\n  );\n}\n\nfunction PeakText(props) {\n  const { fuel, peak } = props;\n  return (\n    peak && (\n      <div style={{ textAlign: 'right' }}>\n        {`Peak ${fuel} ${peak.before && peak.sure ? 'before' : 'in'} ${\n          peak.year\n          // eslint-disable-next-line no-nested-ternary\n        }${peak.sure ? '' : peak.before ? ' (may be before)' : ' ?'}`}\n      </div>\n    )\n  );\n}\n\nfunction ReservesAndPeaksTab(props) {\n  const { countryCode, referenceCountryCode, fuelProduced, peaks } = props;\n  return (\n    <div className=\"ReservesAndPeaksTab\">\n      <Row gutter={20}>\n        <h2>Productions</h2>\n        {fuelProduced.coal && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"COAL_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n              peak={peaks.coal}\n              extra={PeakReference}\n            />\n            <PeakText fuel=\"coal\" peak={peaks.coal} />\n          </Col>\n        )}\n        {fuelProduced.oil && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"OIL_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n              peak={peaks.oil}\n              extra={PeakReference}\n            />\n            <PeakText fuel=\"oil\" peak={peaks.oil} />\n          </Col>\n        )}\n        {fuelProduced.gas && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"GAS_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n              peak={peaks.gas}\n              extra={PeakReference}\n            />\n            <PeakText fuel=\"gas\" peak={peaks.gas} />\n          </Col>\n        )}\n      </Row>\n      <Row gutter={20}>\n        <h2>Reserves</h2>\n        {fuelProduced.coal && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"COAL_RESERVES_GT\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n        {fuelProduced.oil && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"OIL_RESERVES_BB\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n        {fuelProduced.gas && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"GAS_RESERVES_BCM\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n      </Row>\n    </div>\n  );\n}\n\nconst PeakData = {\n  year: PropTypes.number,\n  value: PropTypes.number,\n  sure: PropTypes.bool,\n  before: PropTypes.bool,\n};\n\nReservesAndPeaksTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n  fuelProduced: FuelIndicatorsType.isRequired,\n  peaks: PropTypes.shape({\n    coal: PeakData,\n    oil: PeakData,\n    gas: PeakData,\n  }).isRequired,\n};\n\nexport default ReservesAndPeaksTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport regression from 'regression';\nimport { range } from 'ramda';\n\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter, formatNumber } from '../../../utils';\n\nconst RESOLUTION = 20;\n\nfunction PowerLoadAnalysisChart(props) {\n  const { data, color, statistics } = props;\n\n  const finalData = data.filter(d => d.generation && d.capacity);\n  const array = finalData.map(({ capacity, generation }) => [\n    capacity,\n    generation,\n  ]);\n  const { equation, r2 } = regression.linear(array);\n  const powerLoad = ((equation[0] * 10 ** 3) / (365.25 * 24)) * 100;\n\n  const min = Math.min(...finalData.map(d => d.capacity));\n  const max = Math.max(...finalData.map(d => d.capacity));\n  const data2 = range(0, RESOLUTION + 1).map(i => {\n    const capacity = min + (i / RESOLUTION) * (max - min);\n    return {\n      capacity,\n      generation: equation[0] * capacity + equation[1],\n    };\n  });\n\n  return (\n    <div className=\"PowerLoadAnalysisChart\">\n      <ResponsiveContainer height={300}>\n        <ScatterChart data={finalData} margin={{ bottom: 50 }}>\n          <Scatter data={data2} line={{ stroke: 'grey' }} shape={() => null} />\n          <Scatter\n            fill={color}\n            shape={props2 => (\n              <circle cx={props2.cx} cy={props2.cy} r={3} fill={color} />\n            )}\n            line\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"capacity\"\n            name={statistics.capacity.name}\n            type=\"number\"\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.capacity.name} (${\n                statistics.capacity.unit.main\n              })`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"generation\"\n            name={statistics.generation.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.year\n                }\n                units={{\n                  '0': statistics.capacity.unit.main,\n                  '1': statistics.generation.unit.main,\n                }}\n              />\n            )}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n      <p>{`Average power load: ${formatNumber(powerLoad)} % (R²=${r2})`}</p>\n    </div>\n  );\n}\n\nPowerLoadAnalysisChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      capacity: PropTypes.number,\n      generation: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    capacity: StatisticType,\n    generation: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  color: PropTypes.string,\n};\n\nPowerLoadAnalysisChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default PowerLoadAnalysisChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\nimport PowerLoadAnalysis from './PowerLoadAnalysisChart';\nimport buildChart from '../../../HOC/buildChart';\n\nconst WindLoadChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    generation: 'WIND_GENERATION_TWH',\n    capacity: 'WIND_CAPACITY_GW',\n  },\n})(PowerLoadAnalysis);\n\nconst SolarLoadChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    generation: 'SOLAR_GENERATION_TWH',\n    capacity: 'SOLAR_CAPACITY_GW',\n  },\n})(PowerLoadAnalysis);\n\nfunction OthersTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"OthersTab\">\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <WindLoadChartContainer countryCode={countryCode} />\n        </Col>\n        <Col md={8} sm={24}>\n          <SolarLoadChartContainer countryCode={countryCode} />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nOthersTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default OthersTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Card } from 'antd';\n\nimport {\n  fuelProducedOrConsumedCountrySelector,\n  fuelProducedCountrySelector,\n} from '../../../store/countries';\nimport { statisticPeakYearSelector } from '../../../store/statistics';\n\nimport { FuelIndicatorsType } from '../../../utils/types';\n\nimport IndependencyTab from './IndependencyTab';\nimport SummaryTab from './SummaryTab';\nimport ClimateTab from './ClimateTab';\nimport ReservesAndPeaksTab from './ReservesAndPeaksTab';\nimport OthersTab from './OthersTab';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n  { key: 'reserves', tab: 'Reserves and peaks' },\n  { key: 'others', tab: 'Others' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst ReservesAndPeaksTabContainer = connect((state, { countryCode }) => ({\n  fuelProduced: fuelProducedCountrySelector(countryCode, state),\n  peaks: {\n    coal: statisticPeakYearSelector(\n      {\n        countryCode,\n        statisticCode: 'COAL_PRODUCTION_MTOE',\n      },\n      state,\n    ),\n    oil: statisticPeakYearSelector(\n      {\n        countryCode,\n        statisticCode: 'OIL_PRODUCTION_MTOE',\n      },\n      state,\n    ),\n    gas: statisticPeakYearSelector(\n      {\n        countryCode,\n        statisticCode: 'GAS_PRODUCTION_MTOE',\n      },\n      state,\n    ),\n  },\n}))(ReservesAndPeaksTab);\n\nconst tabContents = {\n  summary: SummaryTab,\n  independency: IndependencyTabContainer,\n  climate: ClimateTab,\n  reserves: ReservesAndPeaksTabContainer,\n  others: OthersTab,\n};\n\nfunction TabsComponent(props) {\n  const {\n    currentTab,\n    countryCode,\n    onTabChange,\n    setReferenceCountry,\n    referenceCountryCode,\n    fuelProduced,\n    hasRents,\n  } = props;\n  const TabComponent = tabContents[currentTab];\n  const hasProducedFossils =\n    fuelProduced.coal || fuelProduced.oil || fuelProduced.gas;\n  const tabs = hasProducedFossils\n    ? tabList\n    : tabList.filter(d => d.key !== 'reserves');\n\n  return (\n    <Card\n      key={currentTab}\n      tabList={tabs}\n      activeTabKey={currentTab}\n      onTabChange={onTabChange}\n    >\n      <TabComponent\n        countryCode={countryCode}\n        setReferenceCountry={setReferenceCountry}\n        referenceCountryCode={referenceCountryCode}\n        hasRents={hasRents}\n      />\n    </Card>\n  );\n}\n\nTabsComponent.propTypes = {\n  currentTab: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  onTabChange: PropTypes.func.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n  fuelProduced: FuelIndicatorsType.isRequired,\n  hasRents: PropTypes.bool.isRequired,\n};\n\nexport default TabsComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { withState } from 'recompose';\nimport qs from 'qs';\n\nimport { Row, Col, Card } from 'antd';\n\nimport { fuelProducedCountrySelector } from '../../store/countries';\nimport { countryWithAreasSelector } from '../../store/otherSelectors';\n\nimport { CountryType, FuelIndicatorsType } from '../../utils/types';\nimport { isMobileOrTablet } from '../../utils';\n\nimport BasicChartContainer from './containers/BasicChartContainer';\n\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport ScrollToTop from '../../components/ScrollToTop';\nimport TabsComponent from './components/TabsComponent';\n\nconst TabsComponentWithState = withState(\n  'referenceCountryCode',\n  'setReferenceCountry',\n  props => props.referenceCountry,\n)(TabsComponent);\n\nfunction CountryView(props) {\n  const { country, goTo, currentTab, referenceCountry, fuelProduced } = props;\n\n  if (!country || country.disabled || !country.isIndependent) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const countryCode = country.alpha2Code;\n  const flag = isMobileOrTablet() ? country.flagIcon : '';\n  return (\n    <div className=\"CountryView\">\n      <ScrollToTop countryCode={countryCode} />\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n            <div>{`Capital: ${country.capital}`}</div>\n            <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n            <div>\n              {`Member of: `}\n              {country.areas.map((area, i) => (\n                <Link key={area.code} to={`/area/${area.code}`}>\n                  {`${i > 0 ? ', ' : ''}${area.name}`}\n                </Link>\n              ))}\n            </div>\n            <Row style={{ marginTop: '20px' }} gutter={20}>\n              <Col xs={24} sm={24} md={24} lg={8}>\n                <BasicChartContainer\n                  statisticCode=\"POPULATION\"\n                  countryCode={countryCode}\n                  color=\"#2c82c9\"\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={8}>\n                <BasicChartContainer\n                  statisticCode=\"GDP_2010_USD\"\n                  countryCode={countryCode}\n                  color=\"#f22613\"\n                  perCapita\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={8}>\n                <BasicChartContainer\n                  statisticCode=\"HUMAN_DEVELOPMENT_INDEX\"\n                  countryCode={countryCode}\n                  color=\"green\"\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <img\n            key={countryCode}\n            style={{\n              width: '100%',\n              marginBottom: '20px',\n              maxHeight: '180px',\n            }}\n            src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n            alt={`Flag of ${country.commonName}`}\n          />\n          <GeoJSONMap geojson={country.geojson} center={country.latlng} />\n        </Col>\n      </Row>\n      <Row>\n        <TabsComponentWithState\n          countryCode={countryCode}\n          currentTab={currentTab}\n          onTabChange={tab => goTo(`/country/${countryCode}/${tab}`)}\n          referenceCountry={referenceCountry}\n          fuelProduced={fuelProduced}\n          hasRents={country.hasRents}\n        />\n      </Row>\n    </div>\n  );\n}\n\nCountryView.propTypes = {\n  currentTab: PropTypes.string,\n  country: CountryType,\n  goTo: PropTypes.func.isRequired,\n  referenceCountry: PropTypes.string,\n  fuelProduced: FuelIndicatorsType.isRequired,\n};\nCountryView.defaultProps = {\n  currentTab: 'summary',\n  country: null,\n  referenceCountry: 'WORLD',\n};\n\nexport default connect((state, props) => ({\n  currentTab: props.match.params.tab,\n  goTo: url => props.history.push(url),\n  country: countryWithAreasSelector(props.match.params.countryCode, state),\n  referenceCountry: qs.parse(props.location.search.substr(1)).referenceCountry,\n  fuelProduced: fuelProducedCountrySelector(\n    props.match.params.countryCode,\n    state,\n  ),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { withState } from 'recompose';\nimport qs from 'qs';\n\nimport { Row, Col, Card } from 'antd';\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport ScrollToTop from '../../components/ScrollToTop';\n\nimport { fuelProducedCountrySelector } from '../../store/countries';\nimport { areaWithCountriesSelector } from '../../store/otherSelectors';\nimport { AreaType, FuelIndicatorsType } from '../../utils/types';\n\nimport BasicChartContainer from '../CountryView/containers/BasicChartContainer';\nimport TabsComponent from '../CountryView/components/TabsComponent';\n\nconst TabsComponentWithState = withState(\n  'referenceCountryCode',\n  'setReferenceCountry',\n  props => props.referenceCountry,\n)(TabsComponent);\n\nfunction AreaView(props) {\n  const { area, currentTab, goTo, referenceCountry, fuelProduced } = props;\n  const latlng = [\n    area.countries.reduce((s, c) => c.latlng[0] + s, 0) / area.countries.length,\n    area.countries.reduce((s, c) => c.latlng[1] + s, 0) / area.countries.length,\n  ];\n\n  if (!area) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"AreaView\">\n      <ScrollToTop areaCode={area.code} />\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <Card title={<h2>{`${area.name}`}</h2>}>\n            {area.code !== 'WORLD' && (\n              <div>\n                <strong>Members : </strong>\n                {area.countries.map((country, i) => {\n                  const string = `${i > 0 ? ', ' : ''}${country.commonName}`;\n                  return !country.disabled && country.isIndependent ? (\n                    <Link\n                      key={country.alpha2Code}\n                      to={`/country/${country.alpha2Code}`}\n                    >\n                      {string}\n                    </Link>\n                  ) : (\n                    string\n                  );\n                })}\n              </div>\n            )}\n            <Row style={{ marginTop: '20px' }} gutter={10}>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"POPULATION\"\n                  countryCode={area.code}\n                  color=\"#2c82c9\"\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"GDP_2010_USD\"\n                  countryCode={area.code}\n                  color=\"#f22613\"\n                  perCapita\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <GeoJSONMap geojson={area.geojson} center={latlng} />\n        </Col>\n      </Row>\n      <Row>\n        <TabsComponentWithState\n          countryCode={area.code}\n          currentTab={currentTab}\n          onTabChange={tab => goTo(`/area/${area.code}/${tab}`)}\n          referenceCountry={referenceCountry}\n          fuelProduced={fuelProduced}\n        />\n      </Row>\n    </div>\n  );\n}\n\nAreaView.propTypes = {\n  area: AreaType.isRequired,\n  currentTab: PropTypes.string,\n  goTo: PropTypes.func.isRequired,\n  referenceCountry: PropTypes.string,\n  fuelProduced: FuelIndicatorsType.isRequired,\n};\n\nAreaView.defaultProps = {\n  currentTab: 'summary',\n  referenceCountry: 'WORLD',\n};\n\nexport default connect((state, props) => ({\n  currentTab: props.match.params.tab,\n  goTo: url => props.history.push(url),\n  area: areaWithCountriesSelector(props.match.params.areaCode, state),\n  referenceCountry: qs.parse(props.location.search.substr(1)).referenceCountry,\n  fuelProduced: fuelProducedCountrySelector(props.match.params.areaCode, state),\n}))(AreaView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType, AreaType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, areas, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Select a country\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.SubMenu title=\"Areas\">\n        {sortBy(a => a.name, areas).map(area => (\n          <Menu.Item key={area.code}>\n            <Link to={`/area/${area.code}`}>{area.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu.SubMenu>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  areas: PropTypes.arrayOf(AreaType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  Route, // as BaseRoute,\n  Switch,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport { Layout, Spin, Row, Col } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\nimport AreaView from '../views/AreaView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\nimport {\n  loadAllAreas,\n  areasLoadedSelector,\n  areasSelector,\n} from '../store/areas';\nimport { LocationType } from '../utils/types';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\nconst AreasLoader = buildLoader(loadAllAreas);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    areas: areasSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction scrollToAnchor(location) {\n  const { hash } = location;\n\n  if (hash !== '') {\n    const id = hash.substr(1);\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'nearest',\n      });\n    }\n  }\n}\n\nclass AppLayout extends Component {\n  componentDidMount() {\n    const { location } = this.props;\n    window.onhashchange = () => scrollToAnchor(location);\n  }\n\n  componentDidUpdate() {\n    const { location } = this.props;\n    scrollToAnchor(location);\n  }\n\n  render() {\n    const { isLoaded } = this.props;\n    return (\n      <div className=\"AppLayout\">\n        <CountriesLoader />\n        <StatisticsLoader />\n        <AreasLoader />\n        <Spin size=\"large\" spinning={!isLoaded}>\n          <Layout>\n            <Layout.Header className=\"AppLayout__header\">\n              <ConnectedHeaderMenu />\n            </Layout.Header>\n            <Row>\n              <Col\n                span={24}\n                md={{ offset: 1, span: 22 }}\n                xxl={{ offset: 3, span: 18 }}\n              >\n                <Layout.Content className=\"AppLayout__content\">\n                  {!isLoaded && <div className=\"AppLayout__splash\" />}\n                  {isLoaded && (\n                    <Switch>\n                      <Route path=\"/home\" exact component={HomeView} />\n                      <Route\n                        path=\"/country/:countryCode/:tab?\"\n                        exact\n                        component={CountryView}\n                      />\n                      <Route\n                        path=\"/area/:areaCode/:tab?\"\n                        exact\n                        component={AreaView}\n                      />\n                      <Route path=\"/about\" exact component={AboutView} />\n                      <Route\n                        component={() => (\n                          <Redirect to={{ pathname: '/home' }} />\n                        )}\n                      />\n                    </Switch>\n                  )}\n                </Layout.Content>\n                <Layout.Footer>\n                  Sources: IEA, EIA, BP, World Bank, HDRO\n                </Layout.Footer>\n              </Col>\n            </Row>\n          </Layout>\n        </Spin>\n      </div>\n    );\n  }\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n  location: LocationType.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded:\n      countriesLoadedSelector(state) &&\n      statisticsLoadedSelector(state) &&\n      areasLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { withRouter } from 'react-router-dom';\nimport { compose, withProps } from 'recompose';\n\nimport ga from 'react-ga';\n\nconst f = title => (...args) => console.log(title, ...args);\nconst mockGa = {\n  set: () => {},\n  pageview: f('tracker.pageview'),\n};\n\nconst isDev = process.env.NODE_ENV !== 'production';\nconst tracker = isDev ? mockGa : ga;\n\nif (!isDev) ga.initialize('UA-133488135-1', { siteSpeedSampleRate: 100 });\n\nclass AnalyticsComponent extends Component {\n  componentDidMount() {\n    this.trackPage();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { location } = this.props;\n\n    if (location !== prevProps.location) {\n      this.trackPage();\n    }\n  }\n\n  trackPage() {\n    const { location } = this.props;\n    tracker.set({ location });\n    tracker.pageview(location);\n  }\n\n  render() {\n    const { children } = this.props;\n    return <div>{children}</div>;\n  }\n}\n\nAnalyticsComponent.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  children: PropTypes.any.isRequired,\n  location: PropTypes.string.isRequired,\n};\n\nexport default compose(\n  withRouter,\n  withProps(props => ({\n    location: `${props.location.pathname}${props.location.search}`,\n  })),\n)(AnalyticsComponent);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\nimport AnalyticsComponent from './components/AnalyticsComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AnalyticsComponent>\n            <AppLayout />\n          </AnalyticsComponent>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}