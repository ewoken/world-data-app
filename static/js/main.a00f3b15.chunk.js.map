{"version":3,"sources":["api/countries.js","store/countries.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","store/index.js","utils/types.js","utils/index.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","views/CountryView/components/CountryMap.jsx","views/CountryView/components/CustomTooltip.jsx","views/CountryView/components/PrimaryEnergyChart.jsx","views/CountryView/containers/PrimaryEnergyChartContainer.jsx","views/CountryView/components/ElectricityMixChart.jsx","views/CountryView/containers/ElectricityMixChartContainer.jsx","views/CountryView/components/SummaryTab.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.js","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["countryMapValues","country","a","worldTopo","objects","countries","geometries","find","c","id","numericCode","Object","objectSpread","geojson","feature","_callee","res","regenerator_default","wrap","_context","prev","next","fetch","sent","json","abrupt","map","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","receiveCountriesAction","_ref","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","dependentCountriesSelector","countrySelector","countryCode","countriesReducer","arguments","length","undefined","action","statisticsLoadedSelector","statistics","allStatisticsSelector","statisticSelector","statisticCode","countryStatisticSelector","statistic","countryStatisticLoadedSelector","_ref2","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref4","compiledCountryStatisticsSelector","mapOfCountryStatistics","_ref3","year","sources","objectWithoutProperties","value","Number","isNaN","isFinite","computeDerivedValueFromCompiled","countryStatisticsLoadedSelector","_ref5","statisticCodes","statisticOfAllCountriesLoadedSelector","alpha2Code","_ref7","_ref11","perCapita","parsedMapOfCountryStatistics","defaultCountry","parsed","countryCodes","uniq","d","populations","mergeAll","defineProperty","concat","parseMapOfStatistics","mapOfStatistic","_ref8","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","statisticValues","Math","min","apply","toConsumableArray","v","endingYears","max","computeYearInterval","_computeYearInterval2","slicedToArray","startingYear","endingYear","mapOfNamedStatisticValues","mapObjIndexed","compileName","_ref9","allValues","allValuesByYear","groupBy","keys","sort","compiledValue","popCompileName","population","factor","populationFactor","computeValue","unit","omit","energySourceCountryConsumedSelector","check","some","coal","gas","oil","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","compiledStatisticForCountriesAndYear","_ref12","push","yearValue","fetchJSON","url","options","then","MTOE_UNIT","main","base","pow","derivedStatistics","code","name","description","consumption","production","sourceAttribution","category","isIntensive","energy","gdp","co2","geothSolarWindTide","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","sourceCodes","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","Promise","all","initialCountryStatistic","countryStatisticReducer","statisticsReducer","reduce","acc","WORLD","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","area","number","latlng","arrayOf","object","bool","coordsToLatLng","coords","_coords","longitude","latitude","L","latLng","isMobileOrTablet","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","toPrecision","toLocaleString","tickFormatter","displayUnit","MAP_HEIGHT","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","dependentCountries","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","indexBy","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","dragging","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","background","backgroundColor","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","formatedData","s","statisticByCategory","es_select","width","placeholder","optionFilterProp","showSearch","onChange","stats","OptGroup","label","sortBy","Option","title","slider","defaultValue","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","size","e","target","Button","disabled","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","href","defaultSortOrder","align","onRow","record","onClick","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","CustomGeoJSON","createGeoJSON","prevProps","remove","_this$props","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","CountryMap","TileLayer","attribution","CountryMap_GeoJSON","CustomTooltip","active","separator","payload","withTotal","_payload$","_payload$$formatter","formatter","total","sum","p","totalUnit","_p$formatter","dataKey","defaultProps","PrimaryEnergyChart","sourceConsumed","stacked","setStacked","LineArea","Area","Line","marginRight","ResponsiveContainer","ComposedChart","top","bottom","dot","activeDot","stroke","fill","stackId","CartesianGrid","opacity","XAxis","interval","YAxis","angle","position","component_Tooltip","content","props2","components_CustomTooltip","assign","Legend","iconType","mapOfStatistics","worldReferences","ConnectedPrimaryEnergyChart","world","PrimaryEnergyChartContainer","loadStatistics","_this$props2","_this$props3","spin","spinning","containers_PrimaryEnergyChartContainer","ElectricityMixChart","processedData","gen","ConnectedElectricityMixChart","ElectricityMixChartContainer","SummaryTab","Loader","load","prevOtherProps","otherProps","equals","buildLoader","loadFunction","StatisticsLoader","defaultSelector","withCountryStatistic","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","lineHeight","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","console","warn","dataWithImportAndExport","l","diff","toFixed","export","import","strokeOpacity","strokeWidth","offset","ProdConsoChart_CustomTooltip","BasicChart","LineChart","padding","withCountryStatistics","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","IndependencyTab","sm","BasicChartContainer","ClimateTab","PopulationChart","GDPChart","tabList","tab","tabContent","summary","components_SummaryTab","independency","components_IndependencyTab","climate","components_ClimateTab","CountryView","currentTab","tabKey","Redirect","to","flag","flagIcon","xs","card","marginTop","lg","maxHeight","src","toLowerCase","alt","components_CountryMap","activeTabKey","onTabChange","setTab","match","params","AboutView","rel","GitHubLink","icon","theme","HeaderMenu","goTo","menu","mode","selectable","Item","Link","onSelect","components_GitHubLink","CountriesLoader","prop","ConnectedHeaderMenu","withRouter","AppLayout_StatisticsLoader","layout","Header","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a00f3b15.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport worldTopo from 'world-atlas/world/110m.json';\n\nfunction countryMapValues(country) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  return {\n    ...country,\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nasync function getAllCountries() {\n  const res = await fetch('/data/countries.json');\n  const countries = await res.json();\n  return countries.map(countryMapValues);\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport default countriesReducer;\n","import {\n  values,\n  mapObjIndexed,\n  mergeAll,\n  groupBy,\n  map,\n  omit,\n  uniq,\n} from 'ramda';\nimport { countriesSelector } from '../countries';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, value: null }\n      : { year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(\n  { statisticCodes, countryCode },\n  state,\n) {\n  return statisticCodes.every(statisticCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (!population && perCapita)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction parseMapOfStatistics(\n  mapOfCountryStatistics,\n  defaultCountry,\n  perCapita,\n) {\n  const parsed = map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n  const countryCodes = uniq(values(parsed).map(d => d.countryCode));\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...(perCapita ? populations : {}),\n    ...parsed,\n  };\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfCountryStatistics, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    parsedMapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    parsedMapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .filter(value => startingYear <= value.year && value.year <= endingYear)\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          parsedMapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year', 'pop'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\n\nexport function energySourceCountryConsumedSelector(countryCode, state) {\n  const check = d => d.value > 0.01;\n  const statisticCodeMap = {\n    coal: 'COAL_CONSUMPTION_MTOE',\n    gas: 'GAS_CONSUMPTION_MTOE',\n    oil: 'OIL_CONSUMPTION_MTOE',\n    hydro: 'HYDRO_PRODUCTION_MTOE',\n    nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n    solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n  };\n  return map(\n    statisticCode =>\n      countryStatisticValuesSelector(\n        { statisticCode, countryCode },\n        state,\n      ).some(check),\n    statisticCodeMap,\n  );\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","const PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description: '',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description: '',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: '',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description: '',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics({ statisticCodes: sourceCodes, countryCode }),\n      );\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics({ statisticCodes, countryCode }) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      statisticCodes.map(statisticCode =>\n        dispatch(loadCountryStatistic({ statisticCode, countryCode })),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n","import L from 'leaflet';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n  } = props;\n  const maxValue = Math.max(\n    ...data.filter(d => d.countryCode !== 'WORLD').map(d => d.value),\n  );\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: 'white',\n                  weight: 0.5,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(value)}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          {`${currentStatistic.name} (${displayUnit(\n            currentStatistic.unit,\n            perCapita,\n          )})`}\n        </div>\n        <div className=\"WorldMap__legend__colors\">\n          <div>\n            <div\n              className=\"WorldMap__legend__gradient\"\n              style={{\n                background: colorGradient,\n              }}\n            />\n            <div className=\"WorldMap__legend__gradientRange\">\n              <div>0</div>\n              <div>{formatNumber(maxValue)}</div>\n            </div>\n          </div>\n          <div>\n            <div\n              className=\"WorldMap__legend__NA__square\"\n              style={{ backgroundColor: NA_COLOR }}\n            />\n            <div>NA</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy, groupBy } from 'ramda';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <Radio.Group\n        style={{ marginBottom: '10px' }}\n        buttonStyle=\"solid\"\n        size=\"small\"\n        value={perCapita}\n        onChange={e => setPerCapita(e.target.value)}\n      >\n        <Radio.Button value={false}>Absolute</Radio.Button>\n        <Radio.Button\n          value\n          disabled={\n            currentStatistic.code === 'POPULATION' ||\n            currentStatistic.isIntensive\n          }\n        >\n          Per capita\n        </Radio.Button>\n      </Radio.Group>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n} from '../../store/statistics';\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../../../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction CountryMap(props) {\n  const { country } = props;\n\n  return (\n    <div className=\"CountryMap\">\n      <Map\n        center={country.latlng}\n        zoom={2}\n        style={{ height: '200px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {country.geojson && <GeoJSON data={country.geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nCountryMap.propTypes = {\n  country: PropTypes.shape({\n    latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n    area: PropTypes.number.isRequired,\n    geojson: PropTypes.object.isRequired,\n  }).isRequired,\n};\n\nexport default CountryMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\n//\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label } = props;\n\n    if (payload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload.reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = payload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload.map(p => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  withTotal: PropTypes.bool,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  withTotal: false,\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { Radio } from 'antd';\nimport { tickFormatter } from '../../../utils';\n\nimport CustomTooltip from './CustomTooltip';\n\nfunction PrimaryEnergyChart(props) {\n  const {\n    data,\n    sourceConsumed,\n    stacked,\n    setStacked,\n    perCapita,\n    setPerCapita,\n  } = props;\n  const unit = perCapita ? ' toe/capita' : ' Mtoe';\n\n  const LineArea = stacked ? Area : Line;\n  return (\n    <div className=\"PrimaryEnergyChart\">\n      <h3 className=\"PrimaryEnergyChart__title\">Primary Energy Consumption</h3>\n      <div>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={stacked}\n          onChange={e => setStacked(e.target.value)}\n          style={{ marginRight: '10px' }}\n        >\n          <Radio.Button value>Stacked</Radio.Button>\n          <Radio.Button value={false}>Split</Radio.Button>\n        </Radio.Group>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button value>Per capita</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ResponsiveContainer height={300} width=\"100%\">\n        <ComposedChart\n          data={data}\n          margin={{ top: 10, right: 0, bottom: 10, left: 0 }}\n        >\n          {sourceConsumed.coal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.oil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.gas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.nuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.hydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.biofuelsWaste && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"biofuelsWaste\"\n              dot={false}\n              activeDot={false}\n              name=\"Biofuels & Waste\"\n              stroke=\"saddlebrown\"\n              fill=\"saddlebrown\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.solarWindTideGeoth && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"solarWindTideGeoth\"\n              dot={false}\n              activeDot={false}\n              name=\"Geothermal, Wind, Solar & Tide\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            tickFormatter={tickFormatter}\n            label={{\n              value: unit,\n              angle: -90,\n              position: 'insideLeft',\n            }}\n          />\n          <Tooltip\n            content={props2 => <CustomTooltip {...props2} withTotal />}\n          />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nPrimaryEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  sourceConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default PrimaryEnergyChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport PrimaryEnergyChart from '../components/PrimaryEnergyChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  compiledCountryStatisticsSelector,\n  energySourceCountryConsumedSelector,\n} from '../../../store/statistics';\n\nconst WORLD = 'WORLD';\n\nconst mapOfStatistics = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst statisticCodes = values(mapOfStatistics).concat(['POPULATION']);\nconst worldReferences = ['POPULATION', 'PRIMARY_ENERGY_CONSUMPTION_MTOE'];\n\nconst ConnectedPrimaryEnergyChart = connect(\n  (state, { countryCode, perCapita }) => ({\n    data: compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: {\n          ...mapOfStatistics,\n          world: {\n            statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n            countryCode: WORLD,\n          },\n        },\n        countryCode,\n        perCapita,\n      },\n      state,\n    ),\n    sourceConsumed: energySourceCountryConsumedSelector(countryCode, state),\n  }),\n)(PrimaryEnergyChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stacked: true,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { countryCode, loadStatistics } = this.props;\n\n    loadStatistics({ statisticCodes, countryCode });\n    loadStatistics({\n      statisticCodes: worldReferences,\n      countryCode: WORLD,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistics } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  setStacked(stacked) {\n    this.setState({ stacked });\n  }\n\n  setPerCapita(perCapita) {\n    this.setState({ perCapita });\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n    const { stacked, perCapita } = this.state;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedPrimaryEnergyChart\n          countryCode={countryCode}\n          setStacked={value => this.setStacked(value)}\n          setPerCapita={value => this.setPerCapita(value)}\n          stacked={stacked}\n          perCapita={perCapita}\n        />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded:\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes,\n          countryCode: props.countryCode,\n        },\n        state,\n      ) &&\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes: worldReferences,\n          countryCode: WORLD,\n        },\n        state,\n      ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(PrimaryEnergyChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { Radio } from 'antd';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ElectricityMixChart(props) {\n  const {\n    data,\n    stacked,\n    setStacked,\n    perCapita,\n    setPerCapita,\n    sourceConsumed,\n  } = props;\n  const unit = perCapita ? ' kWh/capita' : ' TWh';\n  const factor = perCapita ? 1000 : 1;\n\n  // TODO\n  const processedData = data.map(v => ({\n    ...v,\n    nuclear: v.nuclear * 0.33 * 11.63 * factor,\n    hydro: v.hydro * 11.63 * factor,\n    solarWindTideGeoth: v.solarWindTideGeoth * 11.63 * factor,\n  }));\n  const LineArea = stacked ? Area : Line;\n\n  return (\n    <div className=\"ElectricityMixChart\">\n      <h3 className=\"ElectricityMixChart__title\">Electricity generation</h3>\n      <div>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={stacked}\n          onChange={e => setStacked(e.target.value)}\n          style={{ marginRight: '10px' }}\n        >\n          <Radio.Button value>Stacked</Radio.Button>\n          <Radio.Button value={false}>Split</Radio.Button>\n        </Radio.Group>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button value>Per capita</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ResponsiveContainer height={300} width=\"100%\">\n        <ComposedChart\n          data={processedData}\n          margin={{ top: 10, right: 0, bottom: 10, left: 0 }}\n        >\n          {sourceConsumed.coal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.oil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.gas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.nuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.hydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.biofuelsWaste && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"biofuelsWaste\"\n              dot={false}\n              activeDot={false}\n              name=\"Biofuels & Waste\"\n              stroke=\"saddlebrown\"\n              fill=\"saddlebrown\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.solarWindTideGeoth && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"solarWindTideGeoth\"\n              dot={false}\n              activeDot={false}\n              name=\"Geothermy, Wind, Solar & Tide\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            tickFormatter={tickFormatter}\n            label={{\n              value: unit,\n              angle: -90,\n              position: 'insideLeft',\n            }}\n          />\n          <Tooltip\n            content={props2 => <CustomTooltip {...props2} withTotal />}\n          />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nElectricityMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  sourceConsumed: PropTypes.shape({\n    coal: PropTypes.number,\n    oil: PropTypes.number,\n    gas: PropTypes.number,\n    hydro: PropTypes.number,\n    nuclear: PropTypes.number,\n    biofuelsWaste: PropTypes.number,\n    solarWindTideGeoth: PropTypes.number,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default ElectricityMixChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport ElectricityMixChart from '../components/ElectricityMixChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  compiledCountryStatisticsSelector,\n  energySourceCountryConsumedSelector,\n} from '../../../store/statistics';\n\nconst WORLD = 'WORLD';\n\nconst mapOfStatistics = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n  gen: 'ELECTRICITY_GENERATION_TWH',\n};\nconst statisticCodes = values(mapOfStatistics).concat(['POPULATION']);\nconst worldReferences = ['POPULATION', 'ELECTRICITY_GENERATION_TWH'];\n\nconst ConnectedElectricityMixChart = connect(\n  (state, { countryCode, perCapita }) => ({\n    data: compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: {\n          ...mapOfStatistics,\n          world: {\n            statisticCode: 'ELECTRICITY_GENERATION_TWH',\n            countryCode: WORLD,\n          },\n        },\n        countryCode,\n        perCapita,\n      },\n      state,\n    ),\n    sourceConsumed: energySourceCountryConsumedSelector(countryCode, state),\n  }),\n)(ElectricityMixChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stacked: true,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { countryCode, loadStatistics } = this.props;\n\n    loadStatistics({ statisticCodes, countryCode });\n    loadStatistics({\n      statisticCodes: worldReferences,\n      countryCode: WORLD,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistics } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  setStacked(stacked) {\n    this.setState({ stacked });\n  }\n\n  setPerCapita(perCapita) {\n    this.setState({ perCapita });\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n    const { stacked, perCapita } = this.state;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedElectricityMixChart\n          countryCode={countryCode}\n          setStacked={value => this.setStacked(value)}\n          setPerCapita={value => this.setPerCapita(value)}\n          stacked={stacked}\n          perCapita={perCapita}\n        />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded:\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes,\n          countryCode: props.countryCode,\n        },\n        state,\n      ) &&\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes: worldReferences,\n          countryCode: WORLD,\n        },\n        state,\n      ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(PrimaryEnergyChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PrimaryEnergyChartContainer from '../containers/PrimaryEnergyChartContainer';\nimport ElectricityMixChartContainer from '../containers/ElectricityMixChartContainer';\n\nfunction SummaryTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <PrimaryEnergyChartContainer countryCode={countryCode} />\n      <ElectricityMixChartContainer countryCode={countryCode} />\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n} from '../store/statistics';\n\nconst StatisticsLoader = buildLoader(loadCountryStatistics);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction withCountryStatistic(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) => {\n      const mapOfCountryStatistics = mapOfCountryStatisticsSelector(\n        state,\n        props,\n      );\n      const statisticCodes = values(mapOfCountryStatistics);\n      return {\n        data: compiledCountryStatisticsSelector(\n          {\n            mapOfCountryStatistics,\n            countryCode: props.countryCode,\n            perCapita: props.perCapita,\n          },\n          state,\n        ),\n        statistics: map(\n          statisticCode => statisticSelector(statisticCode, state),\n          mapOfCountryStatistics,\n        ),\n        isLoaded: countryStatisticsLoadedSelector(\n          {\n            statisticCodes,\n            countryCode: props.countryCode,\n          },\n          state,\n        ),\n        statisticCodes,\n        perCapita: props.perCapita || false,\n      };\n    })(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader\n          statisticCodes={props.statisticCodes}\n          countryCode={props.countryCode}\n        />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistic;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { formatNumber, tickFormatter } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active } = props;\n\n  if (active) {\n    const { payload, label, filter } = props;\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.filter(filter).map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${formatNumber(p.value)} ${p.unit}`}\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n  filter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  filter: i => i,\n};\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <h3>{fuel}</h3>\n      <ResponsiveContainer height={250} width=\"100%\">\n        <ComposedChart\n          data={dataWithImportAndExport}\n          margin={{ top: 30, right: 20, bottom: 5, left: 20 }}\n        >\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis\n            label={{ value: unit, position: 'insideTopLeft', offset: -20 }}\n          />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip {...props2} filter={p => p.name !== 'base'} />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const { data, statistics, color, perCapita } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"SelfSufficiency\">\n      <strong>{`${statistic.name} (${unit})`}</strong>\n      <ResponsiveContainer height={200}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={statistic.name}\n            unit={` ${unit}`}\n          />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={CustomTooltip} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  color: PropTypes.string,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default BasicChart;\n","import withCountryStatistics from '../../../HOC/withCountryStatistics';\nimport BasicChart from '../components/BasicChart';\n\nexport default withCountryStatistics()(BasicChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport withCountryStatistics from '../../../HOC/withCountryStatistics';\nimport ProdConsoChart from './ProdConsoChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst ProdConsoChartContainer = withCountryStatistics((state, props) => ({\n  prod: props.prodStatisticCode,\n  conso: props.consoStatisticCode,\n}))(ProdConsoChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n      </Row>\n      <Row>\n        <h3>Imports/Exports</h3>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n            fuel=\"Coal\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n            fuel=\"Oil\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n            consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n            fuel=\"Gas\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst statisticCodes = [\n  'CO2_EMISSIONS_MT',\n  'CO2_INTENSITY_OF_ENERGY',\n  'ENERGY_INTENSITY',\n  // 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n];\n\nfunction ClimateTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row gutter={20}>\n        {statisticCodes.map(statisticCode => (\n          <Col md={24 / statisticCodes.length} sm={24}>\n            <BasicChartContainer\n              statisticCode={statisticCode}\n              countryCode={countryCode}\n            />\n          </Col>\n        ))}\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\n\nimport { countrySelector } from '../../store/countries';\n\nimport CountryMap from './components/CountryMap';\nimport SummaryTab from './components/SummaryTab';\nimport IndependencyTab from './components/IndependencyTab';\nimport ClimateTab from './components/ClimateTab';\n\nimport BasicChart from './components/BasicChart';\nimport withCountryStatistics from '../../HOC/withCountryStatistics';\nimport { isMobileOrTablet } from '../../utils';\n\nconst [PopulationChart, GDPChart] = ['POPULATION', 'GDP_2010_USD'].map(\n  statisticCode =>\n    withCountryStatistics({\n      value: statisticCode,\n    })(BasicChart),\n);\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst tabContent = {\n  summary: countryCode => <SummaryTab countryCode={countryCode} />,\n  independency: countryCode => <IndependencyTab countryCode={countryCode} />,\n  climate: countryCode => <ClimateTab countryCode={countryCode} />,\n};\n\nclass CountryView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { country } = this.props;\n    const { currentTab } = this.state;\n\n    if (!country || country.disabled) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const countryCode = country.alpha2Code;\n    const flag = isMobileOrTablet() ? country.flagIcon : '';\n    return (\n      <div className=\"CountryView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n              <div>{`Capital: ${country.capital}`}</div>\n              <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n              <Row style={{ marginTop: '20px' }} gutter={10}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <PopulationChart countryCode={countryCode} color=\"#2c82c9\" />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <GDPChart\n                    countryCode={countryCode}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <img\n              style={{\n                width: '100%',\n                marginBottom: '20px',\n                maxHeight: '180px',\n              }}\n              src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n              alt={`Flag of ${country.commonName}`}\n            />\n            <CountryMap country={country} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](countryCode)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nCountryView.propTypes = {\n  country: PropTypes.shape({\n    alpha2Code: PropTypes.string.isRequired,\n    commonName: PropTypes.string.isRequired,\n  }),\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countrySelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isLoaded } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      <Spin size=\"large\" spinning={!isLoaded}>\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            {!isLoaded && <div className=\"AppLayout__splash\" />}\n            {isLoaded && (\n              <Switch>\n                <Route path=\"/home\" exact component={HomeView} />\n                <Route\n                  path=\"/country/:countryCode\"\n                  exact\n                  component={CountryView}\n                />\n                <Route path=\"/about\" exact component={AboutView} />\n                <Route\n                  component={() => <Redirect to={{ pathname: '/home' }} />}\n                />\n              </Switch>\n            )}\n          </Layout.Content>\n          <Layout.Footer>Sources: IEA, World Data Bank</Layout.Footer>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded: countriesLoadedSelector(state) && statisticsLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}