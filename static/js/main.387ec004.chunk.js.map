{"version":3,"sources":["api/countries.js","store/countries.js","utils/index.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","api/areas.js","store/areas.js","store/index.js","components/ScrollToTop.jsx","utils/types.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/ControlledSlider.jsx","components/StatisticDetails.jsx","utils/copyToClipboard.js","components/ShareChartComponent.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","store/otherSelectors.js","HOC/components/ChartSettings.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","HOC/buildChart.jsx","views/CountryView/components/CustomTooltip.jsx","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.jsx","components/GeoJSONMap.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/GDPByEnergyChart.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SettingsComponent.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/components/ReservesAndPeaksTab.jsx","views/CountryView/components/TabsComponent.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","views/AreaView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","components/AnalyticsComponent.jsx","App.jsx","serviceWorker.js","index.js"],"names":["countryMapValues","country","worldTopo","a","objects","countries","geometries","find","c","id","numericCode","geojson","feature","bounds","L","geoJSON","getBounds","Object","objectSpread","_callee","_ref","_ref2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","map","p","then","res","json","sent","slicedToArray","abrupt","stop","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","defaultIndicators","coal","oil","gas","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","countriesInBounds","boundsFilter","intersects","dependentCountriesSelector","countrySelector","countryCode","areas","fuelConsumedCountrySelector","hasConsumed","fuelProducedCountrySelector","hasProduced","fuelProducedOrConsumedCountrySelector","mapObjIndexed","v","k","countriesReducer","arguments","length","undefined","action","coordsToLatLng","coords","_coords","longitude","latitude","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","value","Number","isNaN","toPrecision","toLocaleString","tickFormatter","displayUnit","unit","perCapita","concat","base","main","parseMapOfStatistics","mapOfCountryStatistics","defaultCountry","statistics","statisticCode","addPopCountryStatistics","countryCodes","uniq","d","populations","mergeAll","defineProperty","clickHandlers","onClick","onDoubleClick","clicks","_len2","args","Array","_key2","setTimeout","apply","maxAndIndex","array","reduce","i","max","maxIndex","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","statistic","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref4","compiledCountryStatisticsSelector","_ref3","year","sources","objectWithoutProperties","isFinite","computeDerivedValueFromCompiled","statisticOfAllCountriesLoadedSelector","alpha2Code","fn","hashFunction","JSON","stringify","cacheSize","cache","_len","_key","hash","hashes","keys","memoize","_ref5","_ref9","baseMap","mapOfStatistic","_ref6","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","statisticValues","Math","min","toConsumableArray","endingYears","computeYearInterval","_computeYearInterval2","startingYear","endingYear","mapOfNamedStatisticValues","compileName","_ref7","allValues","allValuesByYear","groupBy","sort","compiledValue","popCompileName","population","factor","populationFactor","computeValue","omit","compiledStatisticForCountriesAndYear","_ref10","push","yearValue","statisticSourcesSelector","statisticCodes","statisticSources","code","PEAK_THRESHOLD","MAY_PEAK_THRESHOLD","YEAR_AROUND_PEAK","statisticPeakYearSelector","dataLength","_maxAndIndex","maxData","lastValue","firstValue","hasPeakValue","sure","before","fetchJSON","url","options","MTOE_UNIT","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","derivedStatistics","name","description","consumption","production","sourceAttribution","category","isIntensive","energy","gdp","co2","scale","geothSolarWindTide","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","countryStatistics","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","initialCountryStatistic","countryStatisticReducer","statisticsReducer","acc","WORLD","indexedCountries","indexBy","cca2","countriesData","SU","ccn3","computeGeojson","area","countryAlpha3Codes","includes","merge","commonName","AREAS_LOAD_ACTION","AREAS_RECEIVE_ACTION","receiveAreasAction","areasLoadedSelector","areasSelector","areasReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","actionSanitizer","stateSanitizer","store","createStore","ScrollToTop","scrollTo","prevProps","equals","this","props","Component","CountryType","PropTypes","shape","string","isRequired","alpha3Code","capital","number","latlng","arrayOf","object","MAP_HEIGHT","bool","sourceUrl","sourceDescriptionUrl","pathname","search","NA_COLOR","BORDER_COLOR","LEGEND_COLORS_COUNT","LEGEND_WIDTH","interpolator","d3Colors","WorldMap","selectedCountries","dependentCountries","currentStatistic","currentYear","minZoom","onMapChange","selectedCountryByCode","selectedData","maxValue","colorValueMap","scaleString","minValue","valueMap","scaleLinear","scaleLog","domain","color","computeColorMap","react_default","createElement","className","Map","zoom","zoomSnap","zoomDelta","center","style","height","zIndex","dragging","onZoomend","onMoveend","countryData","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","range","width","background","backgroundColor","defaultProps","ControlledSlider","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","defaultValue","setState","nextProps","onChange","_this2","slider","assign","setValue","StatisticDetails","descriptionLines","split","popover","title","arrowPointAtCenter","overlayStyle","maxWidth","content","stat","href","target","rel","placement","es_button","size","icon","marginRight","copyTextToClipboard","text","element","clipboard","writeText","body","textArea","document","appendChild","focus","select","successful","execCommand","removeChild","resolve","reject","Error","err","fallbackCopyTextToClipboard","ShareChartComponent","chartRef","query","location","noHash","dropdown","overlay","menu","domElement","offsetHeight","padding","offsetWidth","classFiltered","classList","add","domToImage","toBlob","bgcolor","transform","blob","remove","chartToPngBlob","current","saveAs","message","error","compileNames","headers","dataLines","dataItem","csv","l","join","Blob","origin","link","copyToClipboard","success","Item","theme","withRouter","WITH_SCALE_SETTINGS","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","mapRef","setScale","countryByCode","formatedData","s","statisticByCategory","es_select","placeholder","optionFilterProp","showSearch","stats","OptGroup","label","sortBy","Option","components_ControlledSlider","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","e","Button","disabled","components_ShareChartComponent","replace","qs","components_StatisticDetails","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","defaultSortOrder","align","onRow","record","f","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","React","createRef","setFilterBounds","getZoom","_this$props","loadStatistic","_this$props2","parameters","_this$props3","goTo","newPerCapita","newParameters","_this$props4","_this$state","components_ScrollToTop","row","gutter","md","col","setParameters","queryObject","parse","path","history","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","countryWithAreasSelector","areasOfCountrySelector","areaWithCountriesSelector","areaCode","areaSelector","countriesAndAreasSelector","ChartSettings","perCapitaSwitch","stackedSwitch","stacked","setStacked","es_switch","checked","Loader","load","prevOtherProps","otherProps","buildLoader","loadFunction","StatisticsLoader","defaultSelector","mapStateToProps","mapOfCountryStatisticsInput","withReference","_props$referenceCount","referenceCountryCode","reference","parsedMapOfCountryStatistics","mapOfCountryStatisticsToLoad","countryStatisticsToLoad","countryStatitics","countryStatisticsLoadedSelector","referenceCountry","withCountryStatistics","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","spin","spinning","defaultHeight","buildChart","_options$perCapitaSwi","_options$stackedSwitc","hocs","hasSettings","withStateHandlers","_ref$defaultPerCapita","defaultPerCapita","_ref$defaultStacked","defaultStacked","WrappedChart","compose","_Component","ChartWrapper","buttonRef","inherits","createClass","_this$props$perCapita","_this$props$stacked","statisticList","finalHeight","toLowerCase","descriptionStatistic","finalDescription","boxShadow","data-html2canvas-ignore","components_ChartSettings","CustomTooltip","active","separator","payload","withTotal","displayFilter","totalFilter","units","filteredPayload","_payload$","_payload$$formatter","formatter","total","sum","totalUnit","_p$formatter","dataKey","BasicChart","extra","withComparison","es6","stroke","strokeWidth","dot","opacity","interval","props2","components_CustomTooltip","iconType","CustomGeoJSON","createGeoJSON","leaflet","addTo","flyToBounds","withLeaflet","GeoJSONMap","boxZoom","doubleClickZoom","scrollWheelZoom","zoomControl","TileLayer","attribution","GeoJSONMap_GeoJSON","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","console","warn","dataWithImportAndExport","diff","toFixed","export","import","stackId","activeDot","fill","strokeOpacity","GDPByEnergyChart","bottom","cx","cy","r","line","dataMin","floor","dataMax","ceil","position","top","0","1","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","GDPByEnergyChartContainer","IndependencyTab","fuelProducedOrConsumed","sm","BasicChartContainer","REFERENCE_DATAKEY","defaultLineAreaProps","isAnimationActive","lineAreaPropsMap","legendPayload","inactive","alpha","cssa","getLegendPayload","fuelConsumed","displayedStats","EnergyMixChart","toggleStat","setDisplayedStats","coalUnit","LineArea","Area","Line","lineAreaProps","some","fuelProps","displayedFuels","chartMax","ticks","getNiceTickValues","pop","getTicksAndDomain","EnergyMixChartWithState","bind","assertThisInitialized","initDone","init","newProps","toggledStat","components_EnergyMixChart","EnergyMixChartBuilded","EnergyMixChartContainer","SettingsComponent","setReferenceCountry","onSelect","primaryMap","primaryReference","electrictyMap","electricityReference","ConnectedSettingsComponent","SummaryTab","containers_EnergyMixChartContainer","ClimateTab","ClimateTab_ConnectedSettingsComponent","PeakReference","peak","strokeDasharray","isFront","PeakText","textAlign","ReservesAndPeaksTab","fuelProduced","peaks","tabList","tab","tabContents","summary","independency","climate","reserves","TabsComponent","currentTab","onTabChange","TabComponent","tabs","card","activeTabKey","TabsComponentWithState","withState","CountryView","Redirect","to","flag","flagIcon","xs","Link","marginTop","lg","maxHeight","src","alt","components_GeoJSONMap","match","params","AboutView","AreaView","AreaView_TabsComponentWithState","GitHubLink","HeaderMenu","mode","selectable","lineHeight","SubMenu","components_GitHubLink","CountriesLoader","prop","AreasLoader","_getAreas","getAllAreas","log","ConnectedHeaderMenu","scrollToAnchor","getElementById","scrollIntoView","behavior","block","inline","AppLayout","onhashchange","AppLayout_StatisticsLoader","layout","Header","Content","Switch","Route","exact","component","Footer","tracker","ga","initialize","siteSpeedSampleRate","AnalyticsComponent","trackPage","set","pageview","children","withProps","App","es","HashRouter","components_AnalyticsComponent","components_AppLayout","Boolean","hostname","ReactDOM","src_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.387ec004.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport L from 'leaflet';\n\nfunction countryMapValues(country, worldTopo) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  const geojson = a && feature(worldTopo, a);\n  const bounds = a && L.geoJSON(geojson).getBounds();\n  return {\n    ...country,\n    geojson,\n    bounds,\n  };\n}\n\nasync function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [fetch('/data/countries.json'), fetch('/data/worldTopo.json')].map(p =>\n      p.then(res => res.json()),\n    ),\n  );\n  return countries.map(country => countryMapValues(country, worldTopo));\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop, mapObjIndexed } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nconst defaultIndicators = {\n  // for areas\n  coal: true,\n  oil: true,\n  gas: true,\n  hydro: true,\n  nuclear: true,\n  biofuelsWaste: true,\n  solarWindTideGeoth: true,\n};\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function countriesInBounds(boundsFilter, state) {\n  const countries = countriesSelector(state);\n\n  return boundsFilter\n    ? countries.filter(\n        country => country.bounds && boundsFilter.intersects(country.bounds),\n      )\n    : countries;\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode] || state.areas.data[countryCode];\n}\n\nexport function fuelConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasConsumed : defaultIndicators;\n}\n\nexport function fuelProducedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasProduced : defaultIndicators;\n}\n\nexport function fuelProducedOrConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country\n    ? mapObjIndexed((v, k) => v || country.hasConsumed[k], country.hasProduced)\n    : defaultIndicators;\n}\n\nexport default countriesReducer;\n","import L from 'leaflet';\nimport { map, uniq, values, mergeAll } from 'ramda';\nimport domToImage from 'dom-to-image';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n\nexport function parseMapOfStatistics(mapOfCountryStatistics, defaultCountry) {\n  return map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n}\n\nexport function addPopCountryStatistics(mapOfCountryStatistics, perCapita) {\n  if (!perCapita) {\n    return mapOfCountryStatistics;\n  }\n\n  const countryCodes = uniq(\n    values(mapOfCountryStatistics).map(d => d.countryCode),\n  );\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...populations,\n    ...mapOfCountryStatistics,\n  };\n}\n\nexport function chartToPngBlob(domElement, scale) {\n  const padding = 10;\n  const height = domElement.offsetHeight + padding * 2;\n  const width = domElement.offsetWidth + padding * 2;\n  const classFiltered = [\n    'ChartWrapper__header__right',\n    'leaflet-control-container',\n  ];\n  domElement.classList.add('transformingToPng');\n  return domToImage\n    .toBlob(domElement, {\n      filter: element => !classFiltered.includes(element.className),\n      bgcolor: 'white',\n      style: {\n        padding: `${padding}px`,\n        transform: `scale(${scale}) translate(${width / 2 / scale}px, ${height /\n          2 /\n          scale}px)`,\n      },\n      height: height * scale,\n      width: width * scale,\n    })\n    .then(blob => {\n      domElement.classList.remove('transformingToPng');\n      return blob;\n    });\n}\n\nexport function memoize(\n  fn,\n  hashFunction = args => JSON.stringify(args),\n  cacheSize = 30,\n) {\n  const cache = {};\n  return function memoizedFun(...args) {\n    const hash = hashFunction(args);\n    if (cache[hash]) {\n      return cache[hash];\n    }\n    const res = fn(...args);\n\n    cache[hash] = res;\n\n    const hashes = Object.keys(cache);\n    if (hashes.length > cacheSize) {\n      delete cache[hashes[0]];\n    }\n\n    return res;\n  };\n}\n\nexport function clickHandlers({ onClick, onDoubleClick }) {\n  let clicks = 0;\n  return function clickHandler(...args) {\n    clicks += 1;\n    if (clicks < 2) {\n      setTimeout(() => {\n        if (clicks < 2) {\n          onClick(...args);\n        } else {\n          onDoubleClick(...args);\n        }\n        clicks = 0;\n      }, 300);\n    }\n  };\n}\n\nexport function maxAndIndex(array) {\n  return array.reduce(\n    (res, value, i) => {\n      if (value > res.max) {\n        return { max: value, maxIndex: i };\n      }\n      return res;\n    },\n    {\n      max: 0,\n      maxIndex: 0,\n    },\n  );\n}\n","import { values, mapObjIndexed, mergeAll, groupBy, map, omit } from 'ramda';\nimport { countriesSelector } from '../countries';\nimport {\n  parseMapOfStatistics,\n  addPopCountryStatistics,\n  memoize,\n  maxAndIndex,\n} from '../../utils';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, value: null }\n      : { year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(countryStatitics, state) {\n  return countryStatitics.every(countryStatistic =>\n    countryStatisticLoadedSelector(countryStatistic, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (perCapita && !population)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction compiledCountryStatisticsSelectorFn(\n  { mapOfCountryStatistics: baseMap, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    baseMap,\n    countryCode,\n  );\n  const mapOfCountryStatistics = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    mapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    mapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .map(year => Number(year))\n    .filter(year => startingYear <= year && year <= endingYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          mapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\nexport const compiledCountryStatisticsSelector = memoize(\n  compiledCountryStatisticsSelectorFn,\n  args => JSON.stringify(args[0]),\n);\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function statisticSourcesSelector(statisticCodes, state) {\n  return statisticCodes.reduce((statisticSources, statisticCode) => {\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sources = values(statistic.source).map(code =>\n        statisticSelector(code, state),\n      );\n      return statisticSources.concat(sources);\n    }\n\n    return statisticSources.concat([statistic]);\n  }, []);\n}\n\nconst PEAK_THRESHOLD = 0.8;\nconst MAY_PEAK_THRESHOLD = 0.9;\nconst YEAR_AROUND_PEAK = 5;\nexport function statisticPeakYearSelector(countryStatistic, state) {\n  const data = countryStatisticValuesSelector(countryStatistic, state);\n  const dataLength = data.length;\n\n  if (data.length < 1) {\n    return null;\n  }\n\n  const { max, maxIndex } = maxAndIndex(data.map(v => v.value));\n  const maxData = data[maxIndex];\n  const lastValue = data[dataLength - 1].value;\n  const firstValue = data[0].value;\n  const mayPeakValue = MAY_PEAK_THRESHOLD * max;\n  const hasPeakValue = PEAK_THRESHOLD * max;\n\n  if (lastValue > mayPeakValue) {\n    // no simple peak\n    return null;\n  }\n\n  if (lastValue < hasPeakValue) {\n    // has a peak\n    if (maxIndex < 1) {\n      // peak at first value\n      return { ...maxData, sure: true, before: true };\n    }\n    if (firstValue > hasPeakValue) {\n      // may have peaked before\n      return { ...maxData, sure: false, before: true };\n    }\n    if (maxAndIndex < dataLength - YEAR_AROUND_PEAK) {\n      return { ...maxData, sure: false, before: false }; // may be a brief decrease\n    }\n    return { ...maxData, sure: true, before: false };\n  }\n\n  if (firstValue < hasPeakValue) {\n    return { ...maxData, sure: false, before: false };\n  }\n\n  return null;\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","const PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description:\n      'This indicator made up by dividing primary energy consumption by primary energy production, gives an indication on the level of self-sufficiency (or dependency) of a country.',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description:\n      'Measures the mass of CO2 by unit of energy that is emitted by the country.',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'FOSSIL_CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    scale: 'linear',\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: 'Includes hydroelectricity, solar, wind and tide productions.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description:\n      'Includes renewables and nuclear productions. Excludes biofuels at the moment.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      const countryStatistics = sourceCodes.map(sourceCode => ({\n        statisticCode: sourceCode,\n        countryCode,\n      }));\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics(countryStatistics),\n      );\n      return;\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics(countryStatistics) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      countryStatistics.map(countryStatistic =>\n        dispatch(loadCountryStatistic(countryStatistic)),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import worldTopo from 'world-atlas/world/110m.json'; // TODO\nimport countriesData from 'world-countries/countries'; // TODO\nimport { merge } from 'topojson-client';\nimport { indexBy } from 'ramda';\n\nconst indexedCountries = {\n  ...indexBy(c => c.cca2, countriesData),\n  SU: { ccn3: 810 },\n};\n\nfunction computeGeojson(area) {\n  const countryAlpha3Codes = area.countryCodes.map(\n    countryCode => indexedCountries[countryCode].ccn3,\n  );\n  const geometries = worldTopo.objects.countries.geometries.filter(c =>\n    countryAlpha3Codes.includes(c.id),\n  );\n  return merge(worldTopo, geometries);\n}\n\nexport default async function getAreas() {\n  const res = await fetch('/data/areas.json');\n  const data = await res.json();\n\n  return data.map(area => ({\n    ...area,\n    alpha2Code: area.code,\n    commonName: area.name,\n    geojson: area.countryCodes ? computeGeojson(area) : null,\n  }));\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllAreas from '../api/areas';\n\nexport const AREAS_LOAD_ACTION = 'AREAS_LOAD_ACTION';\nexport const AREAS_RECEIVE_ACTION = 'AREAS_RECEIVE_ACTION';\n\nfunction loadAreasAction() {\n  return { type: AREAS_LOAD_ACTION };\n}\n\nfunction receiveAreasAction({ data, errors }) {\n  return { type: AREAS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllAreas() {\n  return function dispatchLoadAllAreas(dispatch) {\n    dispatch(loadAreasAction());\n    return getAllAreas()\n      .then(data =>\n        dispatch(\n          receiveAreasAction({\n            data: indexBy(prop('code'), data),\n          }),\n        ),\n      )\n      .catch(\n        errors =>\n          console.log(errors) && dispatch(receiveAreasAction({ errors })),\n      );\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction areasReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case AREAS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case AREAS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function areasLoadedSelector(state) {\n  return state.areas.loaded;\n}\n\nexport function areasSelector(state) {\n  return values(state.areas.data);\n}\n\nexport function areaSelector(areaCode, state) {\n  return state.areas.data[areaCode];\n}\n\nexport function areasOfCountrySelector(countryCode, state) {\n  return values(state.areas.data).filter(\n    area => area.countryCodes && area.countryCodes.includes(countryCode),\n  );\n}\n\nexport default areasReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\nimport { map } from 'ramda';\n\nimport countriesReducer from './countries';\nimport statisticsReducer, {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n} from './statistics';\nimport areasReducer from './areas';\n\nfunction actionSanitizer(action) {\n  if (\n    (action.type === COUNTRY_STATISTIC_RECEIVE_ACTION ||\n      action.type === STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION) &&\n    action.data\n  ) {\n    return { ...action, data: 'DATA' };\n  }\n  return action;\n}\n\nfunction stateSanitizer(state) {\n  return {\n    ...state,\n    countries: map(\n      country => ({ ...country, geojson: country.geojson && 'GEOJSON' }),\n      state.countries.data,\n    ),\n    areas: map(\n      area => ({ ...area, geojson: area.geojson && 'GEOJSON' }),\n      state.areas.data,\n    ),\n    statistics: map(\n      statistic => ({\n        ...statistic,\n        values: map(\n          country => ({\n            ...country,\n            values: country.values && `[${country.values.length}]`,\n          }),\n          statistic.values,\n        ),\n      }),\n      state.statistics.data,\n    ),\n  };\n}\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n  areas: areasReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  actionSanitizer,\n  stateSanitizer,\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import { Component } from 'react';\nimport { equals } from 'ramda';\n\nclass ScrollToTop extends Component {\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!equals(this.props, prevProps)) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default ScrollToTop;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n  category: PropTypes.string.isRequired,\n  sourceAttribution: PropTypes.string,\n  sourceUrl: PropTypes.string,\n  sourceDescriptionUrl: PropTypes.string,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n\nexport const AreaType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  countries: PropTypes.arrayOf(CountryType),\n});\n\nexport const LocationType = PropTypes.shape({\n  hash: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n});\n\nexport const FuelIndicatorsType = PropTypes.shape({\n  coal: PropTypes.bool,\n  oil: PropTypes.bool,\n  gas: PropTypes.bool,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map, range } from 'ramda';\nimport { scaleLog, scaleLinear } from 'd3-scale';\nimport * as d3Colors from 'd3-scale-chromatic';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst NA_COLOR = '#888';\nconst BORDER_COLOR = 'black';\nconst LEGEND_COLORS_COUNT = 4;\nconst LEGEND_WIDTH = 300; // px\nconst COLORS_SCHEME = 'YlGnBu';\n\nconst interpolator = d3Colors[`interpolate${COLORS_SCHEME}`];\n\nfunction computeColorMap(data, scaleString) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n  const scaleType = scaleString === 'linear' ? scaleLinear() : scaleLog();\n  const scale = scaleType.domain([minValue, maxValue]);\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: interpolator(0), value };\n    }\n    return {\n      color: interpolator(scale(value)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    selectedCountries,\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    scale,\n    minZoom,\n    onMapChange,\n  } = props;\n  const selectedCountryByCode = indexBy(c => c.alpha2Code, selectedCountries);\n  const selectedData = data.filter(\n    d => d.countryCode !== 'WORLD' && selectedCountryByCode[d.countryCode],\n  );\n  const maxValue = Math.max(...selectedData.map(d => d.value));\n  const colorValueMap = computeColorMap(\n    selectedData,\n    currentStatistic.scale || scale,\n  );\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        minZoom={minZoom}\n        zoom={minZoom}\n        zoomSnap={0.1}\n        zoomDelta={0.5}\n        center={[20, 30]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        dragging={!isMobileOrTablet()}\n        onZoomend={onMapChange}\n        onMoveend={onMapChange}\n      >\n        {countries.map(country => {\n          const countryData = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: BORDER_COLOR,\n                  weight: 0.5,\n                  fillColor: countryData ? countryData.color : NA_COLOR,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(\n                  countryData && countryData.value,\n                )}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          <div>\n            {`${currentStatistic.name} (${displayUnit(\n              currentStatistic.unit,\n              perCapita,\n            )})`}\n          </div>\n          <div className=\"WorldMap__legend__colors\">\n            <div>\n              <div className=\"WorldMap__legend__gradient\">\n                {range(0, LEGEND_COLORS_COUNT).map(i => (\n                  <div\n                    key={i}\n                    className=\"WorldMap__legend__gradient__item\"\n                    style={{\n                      width: LEGEND_WIDTH / LEGEND_COLORS_COUNT,\n                      background: `linear-gradient(to right, ${interpolator(\n                        i / LEGEND_COLORS_COUNT,\n                      )}, ${interpolator((i + 1) / LEGEND_COLORS_COUNT)}`,\n                    }}\n                  />\n                ))}\n              </div>\n              <div className=\"WorldMap__legend__gradientRange\">\n                <div>0</div>\n                <div>{formatNumber(maxValue)}</div>\n              </div>\n            </div>\n            <div>\n              <div\n                className=\"WorldMap__legend__NA__square\"\n                style={{ backgroundColor: NA_COLOR }}\n              />\n              <div>NA</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"WorldMap__sources toPng\">\n        From http://worldenergydata.tk - Sources: IEA, World Bank\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  selectedCountries: PropTypes.arrayOf(CountryType).isRequired,\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  scale: PropTypes.string,\n  minZoom: PropTypes.number,\n  onMapChange: PropTypes.func.isRequired,\n};\n\nWorldMap.defaultProps = {\n  scale: null,\n  minZoom: 1.8,\n};\n\nexport default WorldMap;\n","import React, { Component } from 'react';\nimport { Slider } from 'antd';\n\nclass ControlledSlider extends Component {\n  constructor() {\n    super();\n    this.state = { value: undefined };\n  }\n\n  componentDidMount() {\n    const { defaultValue } = this.props;\n    this.setState({\n      value: defaultValue,\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { defaultValue } = this.props;\n    if (defaultValue !== nextProps.defaultValue) {\n      this.setState({ value: nextProps.defaultValue });\n    }\n  }\n\n  setValue(value) {\n    const { onChange } = this.props;\n    this.setState({ value });\n    onChange(value);\n  }\n\n  render() {\n    const { value } = this.state;\n    return (\n      <Slider {...this.props} value={value} onChange={v => this.setValue(v)} />\n    );\n  }\n}\n\nexport default ControlledSlider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Popover, Button } from 'antd';\n\nimport { StatisticType } from '../utils/types';\n\nfunction StatisticDetails(props) {\n  const { statisticSources, description } = props;\n  const descriptionLines = description && description.split('\\n');\n\n  return (\n    <div className=\"StatisticDetails\">\n      <Popover\n        title=\"Details\"\n        arrowPointAtCenter\n        overlayStyle={{ maxWidth: '300px' }}\n        content={\n          // eslint-disable-next-line react/jsx-wrap-multilines\n          <div>\n            {description && (\n              <div>\n                <strong>Description : </strong>\n                {`${descriptionLines[0]}`}\n              </div>\n            )}\n            <div>\n              <strong>\n                {`Source${statisticSources.length > 1 ? 's' : ''}`}\n              </strong>\n              <ul className=\"StatisticDetails__sources\">\n                {statisticSources.map(stat => (\n                  <li key={stat.code}>\n                    <a\n                      href={stat.sourceUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {`${stat.name} (${stat.sourceAttribution})`}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        }\n        placement=\"bottomRight\"\n      >\n        <Button\n          size=\"small\"\n          icon=\"info-circle\"\n          style={{ marginRight: '5px' }}\n        />\n      </Popover>\n    </div>\n  );\n}\n\nStatisticDetails.propTypes = {\n  description: PropTypes.string,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n};\n\nStatisticDetails.defaultProps = {\n  description: null,\n};\n\nexport default StatisticDetails;\n","function fallbackCopyTextToClipboard(text, element = window.body) {\n  const textArea = document.createElement('textarea');\n  textArea.value = text;\n  element.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    const successful = document.execCommand('copy');\n    element.removeChild(textArea);\n    return successful\n      ? Promise.resolve()\n      : Promise.reject(new Error('fallbackCopyTextToClipboard error'));\n  } catch (err) {\n    element.removeChild(textArea);\n    throw Promise.reject(err);\n  }\n}\nfunction copyTextToClipboard(text, element) {\n  return navigator.clipboard\n    ? navigator.clipboard.writeText(text)\n    : fallbackCopyTextToClipboard(text, element);\n}\n\nexport default copyTextToClipboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { saveAs } from 'file-saver';\nimport { withRouter } from 'react-router-dom';\n\nimport { Button, Dropdown, Menu, Icon, message } from 'antd';\nimport { chartToPngBlob } from '../utils';\nimport copyToClipboard from '../utils/copyToClipboard';\nimport { LocationType } from '../utils/types';\n\nfunction ShareChartComponent(props) {\n  const { id, chartRef, query, location, noHash } = props;\n  return (\n    <div className=\"ShareChartComponent\">\n      <Dropdown\n        overlay={\n          // eslint-disable-next-line\n          <Menu\n            onClick={({ key }) => {\n              if (key === 'png') {\n                chartToPngBlob(chartRef.current, 2)\n                  .then(blob => saveAs(blob, `${id}.png`))\n                  .catch(() => message.error('An error occured !'));\n              } else if (key === 'csv') {\n                const { data, statistics } = props;\n                const compileNames = Object.keys(statistics);\n                const headers = compileNames.map(\n                  compileName => statistics[compileName].code,\n                );\n                const dataLines = data.map(dataItem =>\n                  compileNames.map(compileName => dataItem[compileName]),\n                );\n                const lines = [headers, ...dataLines];\n                const csv = lines.map(l => l.join(',')).join('\\n');\n                const blob = new Blob([csv], {\n                  type: 'text/plain;charset=utf-8',\n                });\n                saveAs(blob, `${id}.csv`);\n              } else if (key === 'link') {\n                const { origin } = window.location;\n                const { pathname } = location;\n\n                const link = `${origin}#${pathname}${query}${\n                  noHash ? '' : `#${id}`\n                }`;\n                copyToClipboard(link, chartRef.current)\n                  .then(() => message.success('Copied !'))\n                  .catch(() => message.error('An error occured !'));\n              }\n            }}\n          >\n            <Menu.Item key=\"link\">\n              <Icon type=\"copy\" theme=\"filled\" />\n              Copy link\n            </Menu.Item>\n            <Menu.Item key=\"png\">\n              <Icon type=\"picture\" theme=\"filled\" />\n              .png\n            </Menu.Item>\n            <Menu.Item key=\"csv\">\n              <Icon type=\"file-text\" theme=\"filled\" />\n              .csv\n            </Menu.Item>\n          </Menu>\n        }\n      >\n        <Button size=\"small\" icon=\"share-alt\" style={{ marginRight: '5px' }} />\n      </Dropdown>\n    </div>\n  );\n}\n\nShareChartComponent.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  chartRef: PropTypes.any.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  statistics: PropTypes.object.isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  id: PropTypes.string.isRequired,\n  query: PropTypes.string,\n  location: LocationType.isRequired,\n  noHash: PropTypes.bool,\n};\n\nShareChartComponent.defaultProps = {\n  query: '',\n  noHash: false,\n};\n\nexport default withRouter(ShareChartComponent);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Radio, Popover, Button, Icon } from 'antd';\nimport debounce from 'lodash.debounce';\nimport qs from 'qs';\n\nimport { sortBy, groupBy, indexBy } from 'ramda';\n\nimport Slider from './ControlledSlider';\nimport StatisticDetails from '../../../components/StatisticDetails';\nimport ShareChartComponent from '../../../components/ShareChartComponent';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nconst WITH_SCALE_SETTINGS = false;\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    statisticSources,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n    mapRef,\n    scale,\n    setScale,\n  } = props;\n\n  const countryByCode = indexBy(c => c.alpha2Code, countries);\n  const formatedData = data\n    .filter(s => s.value !== null && countryByCode[s.countryCode])\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countryByCode[s.countryCode].commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  if (currentStatistic.isIntensive && perCapita) {\n    setPerCapita(false);\n  }\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <div className=\"StatisticExplorer__options\">\n        <Radio.Group\n          style={{ marginBottom: '10px' }}\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button\n            value\n            disabled={\n              currentStatistic.code === 'POPULATION' ||\n              currentStatistic.isIntensive\n            }\n          >\n            Per capita\n          </Radio.Button>\n        </Radio.Group>\n        <div className=\"StatisticExplorer__options__right\">\n          <ShareChartComponent\n            id={currentStatistic.name.replace(/ /g, '_')}\n            chartRef={mapRef}\n            statistics={{\n              countryCode: { code: 'COUNTRY_CODE' },\n              value: currentStatistic,\n            }}\n            data={data}\n            query={`?${qs.stringify({\n              statisticCode: currentStatistic.code,\n              perCapita,\n              currentYear,\n            })}`}\n            noHash\n          />\n          <StatisticDetails\n            statisticSources={statisticSources}\n            description={currentStatistic.description}\n          />\n          {WITH_SCALE_SETTINGS && (\n            <Popover\n              title=\"Settings\"\n              arrowPointAtCenter\n              content={\n                // eslint-disable-next-line react/jsx-wrap-multilines\n                <div>\n                  {'Scale '}\n                  <Radio.Group\n                    buttonStyle=\"solid\"\n                    size=\"small\"\n                    value={scale}\n                    onChange={e => setScale(e.target.value)}\n                  >\n                    <Radio.Button value=\"log\">Log</Radio.Button>\n                    <Radio.Button value=\"linear\">Linear</Radio.Button>\n                  </Radio.Group>\n                </div>\n              }\n              placement=\"bottomRight\"\n            >\n              <Button size=\"small\">\n                <Icon type=\"setting\" theme=\"filled\" />\n              </Button>\n            </Popover>\n          )}\n        </div>\n      </div>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  mapRef: PropTypes.object.isRequired,\n  scale: PropTypes.string,\n  setScale: PropTypes.func.isRequired,\n};\n\nStatisticExplorer.defaultProps = {\n  scale: null,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport qs from 'qs';\n\nimport { Row, Col } from 'antd';\nimport ScrollToTop from '../../components/ScrollToTop';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  countriesInBounds,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../store/statistics';\n\nfunction f(statisticCode, perCapita) {\n  // TODO\n  return perCapita ? [statisticCode, 'POPULATION'] : [statisticCode];\n}\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    selectedCountries: countriesInBounds(boundsFilter, state),\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    countries: countriesInBounds(boundsFilter, state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    statisticSources: statisticSourcesSelector(\n      f(statisticCode, perCapita),\n      state,\n    ),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nconst MIN_ZOOM = 2;\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      scale: null,\n      boundsFilter: null,\n    };\n    this.mapRef = React.createRef();\n    this.onMapChange = e =>\n      this.setFilterBounds(e.target.getBounds(), e.target.getZoom());\n  }\n\n  componentDidMount() {\n    const { loadStatistic, statisticCode, perCapita } = this.props;\n\n    loadStatistic(statisticCode);\n\n    if (perCapita) {\n      loadStatistic('POPULATION');\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { loadStatistic, statisticCode, perCapita } = this.props;\n    if (statisticCode !== prevProps.statisticCode) {\n      loadStatistic(statisticCode);\n    }\n    if (perCapita !== prevProps.perCapita && perCapita) {\n      loadStatistic('POPULATION');\n    }\n  }\n\n  setParameters(parameters) {\n    const { statisticCode, perCapita, currentYear, goTo } = this.props;\n    const newPerCapita =\n      parameters.perCapita === undefined ? perCapita : parameters.perCapita;\n\n    const newParameters = {\n      statisticCode,\n      currentYear,\n      ...parameters,\n      perCapita: newPerCapita && parameters.statisticCode !== 'POPULATION',\n    };\n    goTo(`?${qs.stringify(newParameters)}`);\n  }\n\n  setFilterBounds(bounds, zoom) {\n    this.setState({ boundsFilter: zoom === MIN_ZOOM ? null : bounds });\n  }\n\n  setScale(scale) {\n    this.setState({ scale });\n  }\n\n  render() {\n    const { goTo, currentYear, statisticCode, perCapita } = this.props;\n    const { scale, boundsFilter } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <ScrollToTop />\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <div ref={this.mapRef}>\n              <ConnectedWorldMap\n                statisticCode={statisticCode}\n                currentYear={currentYear}\n                perCapita={perCapita}\n                scale={scale}\n                minZoom={MIN_ZOOM}\n                onMapChange={this.onMapChange}\n                boundsFilter={boundsFilter}\n              />\n            </div>\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => goTo(`country/${record.countryCode}`)}\n              setYear={year => this.setParameters({ currentYear: year })}\n              setStatistic={value =>\n                this.setParameters({ statisticCode: value })\n              }\n              setPerCapita={value => this.setParameters({ perCapita: value })}\n              mapRef={this.mapRef}\n              scale={scale}\n              setScale={value => this.setScale(value)}\n              boundsFilter={boundsFilter}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  loadStatistic: PropTypes.func.isRequired,\n  statisticCode: PropTypes.string,\n  perCapita: PropTypes.bool.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nHomeView.defaultProps = {\n  statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n};\n\nexport default connect(\n  (state, props) => {\n    const { search } = props.location;\n    const queryObject = search ? qs.parse(search.substr(1)) : {};\n    return {\n      goTo(path) {\n        props.history.push(path);\n      },\n      currentYear: Number(queryObject.currentYear) || 2010,\n      perCapita: queryObject.perCapita === 'true',\n      statisticCode: queryObject.statisticCode,\n    };\n  },\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import { countrySelector, countriesSelector } from './countries';\nimport { areaSelector, areasOfCountrySelector, areasSelector } from './areas';\n\nexport function countryWithAreasSelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  const areas = areasOfCountrySelector(countryCode, state);\n\n  return {\n    ...country,\n    areas,\n  };\n}\n\nexport function areaWithCountriesSelector(areaCode, state) {\n  const area = areaSelector(areaCode, state);\n  const countries = area.countryCodes\n    ? area.countryCodes\n        .map(countryCode => countrySelector(countryCode, state))\n        .filter(c => !!c)\n    : countriesSelector(state);\n  return {\n    ...area,\n    countries,\n  };\n}\n\nexport function countriesAndAreasSelector(state) {\n  return [\n    ...countriesSelector(state).filter(c => !c.disabled),\n    ...areasSelector(state),\n  ];\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Switch } from 'antd';\n\nfunction ChartSettings(props) {\n  const {\n    perCapitaSwitch,\n    stackedSwitch,\n    perCapita,\n    stacked,\n    setPerCapita,\n    setStacked,\n  } = props;\n\n  return (\n    <div className=\"ChartSettings\">\n      {perCapitaSwitch && (\n        <div>\n          {'Per capita '}\n          <Switch size=\"small\" checked={perCapita} onChange={setPerCapita} />\n        </div>\n      )}\n      {stackedSwitch && (\n        <div>\n          {'Stacked '}\n          <Switch size=\"small\" checked={stacked} onChange={setStacked} />\n        </div>\n      )}\n    </div>\n  );\n}\nChartSettings.propTypes = {\n  perCapitaSwitch: PropTypes.bool.isRequired,\n  stackedSwitch: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  setStacked: PropTypes.func.isRequired,\n};\n\nexport default ChartSettings;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values, uniq } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n  statisticSourcesSelector,\n} from '../store/statistics';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../utils';\nimport { countrySelector } from '../store/countries';\n\nconst StatisticsLoader = buildLoader(({ countryStatistics }) =>\n  loadCountryStatistics(countryStatistics),\n);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction mapStateToProps(state, props) {\n  const {\n    perCapita,\n    statisticCode,\n    mapOfCountryStatistics: mapOfCountryStatisticsInput,\n    countryCode,\n    withReference,\n    referenceCountryCode = 'WORLD',\n  } = props;\n  const isIntensive =\n    statisticCode && statisticSelector(statisticCode, state).isIntensive;\n  const mapOfCountryStatistics =\n    (perCapita || isIntensive) && withReference\n      ? {\n          ...mapOfCountryStatisticsInput,\n          reference: {\n            countryCode: referenceCountryCode,\n            statisticCode:\n              typeof withReference === 'boolean'\n                ? statisticCode\n                : withReference,\n          },\n        }\n      : mapOfCountryStatisticsInput;\n\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n  );\n  const mapOfCountryStatisticsToLoad = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const countryStatisticsToLoad = values(mapOfCountryStatisticsToLoad);\n  const statisticCodes = uniq(\n    countryStatisticsToLoad.map(c => c.statisticCode),\n  );\n  const isLoaded = countryStatisticsLoadedSelector(\n    countryStatisticsToLoad,\n    state,\n  );\n  const data = isLoaded\n    ? compiledCountryStatisticsSelector(\n        {\n          mapOfCountryStatistics,\n          countryCode: props.countryCode,\n          perCapita: props.perCapita,\n        },\n        state,\n      )\n    : [];\n\n  return {\n    data,\n    statistics: map(\n      ({ statisticCode: code }) => statisticSelector(code, state),\n      parsedMapOfCountryStatistics,\n    ),\n    statisticSources: statisticSourcesSelector(statisticCodes, state),\n    isLoaded,\n    countryStatisticsToLoad,\n    country: countrySelector(countryCode, state),\n    referenceCountry: countrySelector(referenceCountryCode, state),\n  };\n}\n\nfunction withCountryStatistics(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) =>\n      mapStateToProps(state, {\n        mapOfCountryStatistics: mapOfCountryStatisticsSelector(state, props),\n        ...props,\n      }),\n    )(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader countryStatistics={props.countryStatisticsToLoad} />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistics;\n","import React, { Component } from 'react';\nimport { values } from 'ramda';\nimport { withStateHandlers, compose } from 'recompose';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\n\nimport { Icon, Popover, Button } from 'antd';\n\nimport { displayUnit } from '../utils';\nimport StatisticDetails from '../components/StatisticDetails';\n\nimport ChartSettings from './components/ChartSettings';\nimport ShareChartComponent from '../components/ShareChartComponent';\nimport withCountryStatistics from './withCountryStatistics';\n\nconst defaultHeight = 200;\n\nfunction buildChart(options = {}) {\n  const {\n    mapOfCountryStatisticsSelector,\n    perCapitaSwitch = false,\n    stackedSwitch = false,\n  } = options;\n  const hocs = [withRouter];\n  const hasSettings = perCapitaSwitch || stackedSwitch;\n\n  if (hasSettings) {\n    hocs.push(\n      withStateHandlers(\n        ({ defaultPerCapita = false, defaultStacked = false }) => ({\n          perCapita: defaultPerCapita,\n          stacked: defaultStacked,\n        }),\n        {\n          setPerCapita: () => perCapita => ({ perCapita }),\n          setStacked: () => stacked => ({ stacked }),\n        },\n      ),\n    );\n  }\n  hocs.push(withCountryStatistics(mapOfCountryStatisticsSelector));\n\n  return function buildChartWrapper(WrappedChart) {\n    return compose(...hocs)(\n      class ChartWrapper extends Component {\n        constructor() {\n          super();\n          this.chartRef = React.createRef();\n          this.buttonRef = React.createRef();\n        }\n\n        render() {\n          const {\n            title,\n            description,\n            statistics,\n            statisticSources,\n            height,\n            perCapita = false,\n            stacked = false,\n            setPerCapita,\n            setStacked,\n            data,\n            withReference,\n            referenceCountryCode,\n            location,\n          } = this.props;\n          const statisticList = values(statistics);\n          const statistic = statisticList[0];\n          const finalHeight = options.height || height || defaultHeight;\n          const id = (title\n            ? title.replace(/ /g, '_')\n            : statistic.name.replace(/ /g, '_')\n          ).toLowerCase();\n\n          const descriptionStatistic = statisticList.find(\n            s => s.code === description,\n          );\n          const finalDescription =\n            statisticList.length < 2\n              ? description || statistic.description\n              : (descriptionStatistic && descriptionStatistic.description) ||\n                description;\n          const hash = location.hash.substr(1);\n          const style =\n            hash === id\n              ? {\n                  boxShadow: '0px 0px 10px 1px rgba(0,0,0,0.5)',\n                }\n              : {};\n\n          return (\n            <div\n              id={id}\n              className=\"ChartWrapper\"\n              ref={this.chartRef}\n              style={style}\n            >\n              <div className=\"ChartWrapper__header\">\n                <div className=\"ChartWrapper__header__left\">\n                  <span className=\"ChartWrapper__title\">\n                    {title || statistic.name}\n                  </span>\n                  <span className=\"ChartWrapper__title__unit\">\n                    {` (${displayUnit(statistic.unit, perCapita)})`}\n                  </span>\n                </div>\n                <div\n                  className=\"ChartWrapper__header__right\"\n                  data-html2canvas-ignore\n                >\n                  <ShareChartComponent\n                    id={id}\n                    chartRef={this.chartRef}\n                    statistics={{ year: { code: 'YEAR' }, ...statistics }}\n                    data={data}\n                    {...(withReference\n                      ? {\n                          query: `?${qs.stringify({\n                            referenceCountry: referenceCountryCode,\n                          })}`,\n                        }\n                      : {})}\n                  />\n                  <StatisticDetails\n                    statisticSources={statisticSources}\n                    description={finalDescription}\n                  />\n                  {hasSettings && (\n                    <div>\n                      <Popover\n                        title=\"Settings\"\n                        arrowPointAtCenter\n                        content={\n                          // eslint-disable-next-line react/jsx-wrap-multilines\n                          <ChartSettings\n                            perCapitaSwitch={perCapitaSwitch}\n                            stackedSwitch={stackedSwitch}\n                            stacked={stacked}\n                            perCapita={perCapita}\n                            setPerCapita={setPerCapita}\n                            setStacked={setStacked}\n                          />\n                        }\n                        placement=\"bottomRight\"\n                      >\n                        <Button size=\"small\">\n                          <Icon type=\"setting\" theme=\"filled\" />\n                        </Button>\n                      </Popover>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <WrappedChart\n                {...this.props}\n                height={finalHeight}\n                perCapita={perCapita}\n                stacked={stacked}\n              />\n              <div className=\"ChartWrapper__footer toPng\">\n                From http://worldenergydata.tk - Sources: IEA, World Bank\n              </div>\n            </div>\n          );\n        }\n      },\n    );\n  };\n}\n\nexport default buildChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label, displayFilter, totalFilter, units } = props;\n    const filteredPayload = payload.filter(displayFilter);\n\n    if (filteredPayload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload\n      .filter(totalFilter)\n      .reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = filteredPayload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {filteredPayload.map((p, i) => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey || name} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit || units[i]}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  withTotal: PropTypes.bool,\n  displayFilter: PropTypes.func,\n  totalFilter: PropTypes.func,\n  units: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  withTotal: false,\n  displayFilter: i => i,\n  totalFilter: i => i,\n  units: {},\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  Legend,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const {\n    data,\n    statistics,\n    color,\n    perCapita,\n    height,\n    country,\n    referenceCountry,\n    withReference,\n    extra,\n  } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n  const withComparison = withReference && (perCapita || statistic.isIntensive);\n\n  return (\n    <div className=\"BasicChart\">\n      <ResponsiveContainer height={height}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={country.commonName}\n            unit={` ${unit}`}\n          />\n          {withComparison && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reference\"\n              stroke=\"red\"\n              strokeWidth={3}\n              dot={false}\n              name={referenceCountry.commonName}\n              unit={` ${unit}`}\n            />\n          )}\n          {extra && extra(props)}\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={props2 => <CustomTooltip {...props2} />} />\n          {withComparison && <Legend iconType=\"circle\" />}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n  withReference: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  country: CountryType.isRequired,\n  referenceCountry: CountryType.isRequired,\n  extra: PropTypes.func,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n  withReference: false,\n  extra: null,\n};\n\nexport default BasicChart;\n","import buildChart from '../../../HOC/buildChart';\nimport BasicChart from '../components/BasicChart';\n\nexport default buildChart()(BasicChart);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction GeoJSONMap(props) {\n  const { geojson, center } = props;\n\n  return (\n    <div className=\"GeoJSONMap\">\n      <Map\n        center={center}\n        zoom={2}\n        zoomDelta={0}\n        zoomSnap={0}\n        boxZoom={false}\n        doubleClickZoom={false}\n        scrollWheelZoom={false}\n        zoomControl={false}\n        dragging={false}\n        style={{ height: '300px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {geojson && <GeoJSON data={geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nGeoJSONMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  geojson: PropTypes.object.isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default GeoJSONMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data, height } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={dataWithImportAndExport}>\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                displayFilter={p => p.name !== 'base'}\n              />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\n\nfunction GDPByEnergyChart(props) {\n  const { data, color, statistics } = props;\n  // const statistic = statistics.value;\n  // const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"GDPByEnergyChart\">\n      <ResponsiveContainer height={300}>\n        <ScatterChart data={data} margin={{ bottom: 50 }}>\n          <Scatter\n            fill={color}\n            shape={props2 => (\n              <circle cx={props2.cx} cy={props2.cy} r={3} fill={color} />\n            )}\n            line\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"energy\"\n            name={statistics.energy.name}\n            type=\"number\"\n            domain={[\n              dataMin => Math.floor(0.95 * dataMin),\n              dataMax => Math.ceil(1.05 * dataMax),\n            ]}\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.energy.name} (${\n                statistics.energy.unit.main\n              })`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"gdp\"\n            name={statistics.gdp.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.year\n                }\n                units={{\n                  '0': statistics.energy.unit.main,\n                  '1': statistics.gdp.unit.main,\n                }}\n              />\n            )}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nGDPByEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      gdp: PropTypes.number,\n      energy: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    gdp: StatisticType,\n    energy: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  color: PropTypes.string,\n};\n\nGDPByEnergyChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default GDPByEnergyChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport { FuelIndicatorsType } from '../../../utils/types';\n\nimport buildChart from '../../../HOC/buildChart';\nimport ProdConsoChart from './ProdConsoChart';\nimport GDPByEnergyChart from './GDPByEnergyChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst ProdConsoChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: (state, props) => ({\n    prod: props.prodStatisticCode,\n    conso: props.consoStatisticCode,\n  }),\n})(ProdConsoChart);\n\nconst GDPByEnergyChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    gdp: 'GDP_2010_USD',\n    energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n  },\n})(GDPByEnergyChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode, fuelProducedOrConsumed } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <h3>Imports/Exports</h3>\n        {fuelProducedOrConsumed.coal && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n              fuel=\"Coal\"\n              title=\"Coal Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.oil && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n              fuel=\"Oil\"\n              title=\"Oil Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.gas && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n              consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n              fuel=\"Gas\"\n              title=\"Gas Trade\"\n            />\n          </Col>\n        )}\n      </Row>\n      <Row>\n        <h3>Energy/GDP coupling</h3>\n        <Col md={16} sm={24}>\n          <GDPByEnergyChartContainer\n            countryCode={countryCode}\n            title=\"GDP according to primary energy\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  fuelProducedOrConsumed: FuelIndicatorsType.isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { values, mapObjIndexed } from 'ramda';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport color from 'onecolor';\n\nimport { getNiceTickValues } from 'recharts-scale';\nimport { tickFormatter, displayUnit, clickHandlers } from '../../../utils';\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nconst FILL_OPACITY = 0.7;\nconst REFERENCE_DATAKEY = 'reference'; // TODO in selectors\nconst defaultLineAreaProps = {\n  type: 'monotone',\n  dot: false,\n  activeDot: false,\n  fillOpacity: FILL_OPACITY,\n  isAnimationActive: false,\n};\n\nconst lineAreaPropsMap = {\n  coal: { name: 'Coal', color: 'black' },\n  oil: { name: 'Oil', color: 'grey' },\n  gas: { name: 'Gas', color: 'orange' },\n  nuclear: { name: 'Nuclear', color: 'purple' },\n  hydro: { name: 'Hydroelectricity', color: 'blue' },\n  biofuelsWaste: { name: 'Biofuels & Waste', color: 'saddlebrown' },\n  solarWindTideGeoth: { name: 'Geothermy, Wind, Solar & Tide', color: 'green' },\n};\n\nconst legendPayload = values(\n  mapObjIndexed((p, key) => ({ ...p, dataKey: key }), lineAreaPropsMap),\n).map(props => ({\n  dataKey: props.dataKey,\n  value: props.name,\n  type: 'circle',\n  inactive: false,\n  color: color(props.color)\n    .alpha(FILL_OPACITY)\n    .cssa(),\n}));\n\nfunction getLegendPayload({\n  fuelConsumed,\n  displayedStats,\n  perCapita,\n  referenceCountry,\n}) {\n  return legendPayload\n    .filter(payload => fuelConsumed[payload.dataKey])\n    .map(payload => ({\n      ...payload,\n      inactive: !displayedStats.includes(payload.dataKey),\n    }))\n    .concat(\n      perCapita\n        ? [\n            {\n              dataKey: REFERENCE_DATAKEY,\n              value: referenceCountry.commonName,\n              color: 'red',\n              type: 'circle',\n              inactive: !displayedStats.includes(REFERENCE_DATAKEY),\n            },\n          ]\n        : [],\n    );\n}\n\nfunction getTicksAndDomain({ data, perCapita, displayedStats, stacked }) {\n  const displayedFuels = displayedStats.filter(s => s !== REFERENCE_DATAKEY);\n  const withReference = perCapita && displayedStats.includes(REFERENCE_DATAKEY);\n  const max = Math.max(\n    ...(stacked\n      ? data.map(d => displayedFuels.reduce((sum, k) => sum + d[k], 0))\n      : data.map(d => Math.max(...displayedFuels.map(k => d[k])))),\n    ...(withReference ? data.map(d => d.reference) : []),\n  );\n\n  const chartMax = max * 1.05;\n  const ticks = getNiceTickValues([0, chartMax], 5, true);\n\n  if (ticks[3] > chartMax) {\n    ticks.pop();\n  }\n  const domain = [0, ticks[ticks.length - 1]];\n  return { domain, ticks };\n}\n\nfunction EnergyMixChart(props) {\n  const {\n    data,\n    stacked,\n    perCapita,\n    fuelConsumed,\n    statistics,\n    referenceCountry,\n    displayedStats,\n    toggleStat,\n    setDisplayedStats,\n  } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n  const lineAreaProps = stacked\n    ? { stackId: '1', unit, ...defaultLineAreaProps }\n    : { strokeWidth: 2, unit, ...defaultLineAreaProps };\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart data={data}>\n          {displayedStats\n            .filter(s => s !== REFERENCE_DATAKEY)\n            .map(fuel => {\n              const fuelProps = lineAreaPropsMap[fuel];\n              return (\n                <LineArea\n                  key={fuel}\n                  {...lineAreaProps}\n                  dataKey={fuel}\n                  name={fuelProps.name}\n                  stroke={fuelProps.color}\n                  fill={fuelProps.color}\n                />\n              );\n            })}\n          {perCapita && displayedStats.includes(REFERENCE_DATAKEY) && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reference\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n              name={referenceCountry.commonName}\n              stroke=\"red\"\n              unit={unit}\n              isAnimationActive={false}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            tickFormatter={tickFormatter}\n            {...getTicksAndDomain({\n              data,\n              perCapita,\n              displayedStats,\n              stacked,\n            })}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={p => p.dataKey !== REFERENCE_DATAKEY}\n              />\n            )}\n          />\n          <Legend\n            iconType=\"circle\"\n            onClick={clickHandlers({\n              onClick: ({ dataKey }) => toggleStat(dataKey),\n              onDoubleClick: ({ dataKey }) => setDisplayedStats([dataKey]),\n            })}\n            payload={getLegendPayload({\n              fuelConsumed,\n              displayedStats,\n              perCapita,\n              referenceCountry,\n            })}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  fuelConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  referenceCountry: CountryType.isRequired,\n  toggleStat: PropTypes.func.isRequired,\n  setDisplayedStats: PropTypes.func.isRequired,\n  displayedStats: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default EnergyMixChart;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { sortBy } from 'ramda';\n\nimport buildChart from '../../../HOC/buildChart';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport { fuelConsumedCountrySelector } from '../../../store/countries';\n\nclass EnergyMixChartWithState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      displayedStats: [],\n    };\n    this.toggleStat = this.toggleStat.bind(this);\n    this.setDisplayedStats = this.setDisplayedStats.bind(this);\n    this.initDone = false;\n  }\n\n  componentDidMount() {\n    this.init(this.props);\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { countryCode, data } = this.props;\n    if (\n      newProps.countryCode !== countryCode ||\n      (data.length !== newProps.data.length && !this.initDone)\n    ) {\n      this.init(newProps);\n    }\n  }\n\n  setDisplayedStats(displayedStats) {\n    this.setState({\n      displayedStats,\n    });\n  }\n\n  init({ data, fuelConsumed }) {\n    this.initDone = true;\n    this.setState({\n      displayedStats: sortBy(\n        fuel => -Math.max(...data.map(d => d[fuel])),\n        Object.keys(fuelConsumed).filter(fuel => fuelConsumed[fuel]),\n      ).concat(['reference']),\n    });\n  }\n\n  toggleStat(toggledStat) {\n    const { displayedStats } = this.state;\n    this.setState({\n      displayedStats: displayedStats.includes(toggledStat)\n        ? displayedStats.filter(d => d !== toggledStat)\n        : [...displayedStats, toggledStat],\n    });\n  }\n\n  render() {\n    return (\n      <EnergyMixChart\n        {...this.props}\n        {...this.state}\n        toggleStat={this.toggleStat}\n        setDisplayedStats={this.setDisplayedStats}\n      />\n    );\n  }\n}\n\nconst EnergyMixChartBuilded = buildChart({\n  perCapitaSwitch: true,\n  stackedSwitch: true,\n})(EnergyMixChartWithState);\n\nconst EnergyMixChartContainer = connect((state, { countryCode }) => ({\n  fuelConsumed: fuelConsumedCountrySelector(countryCode, state),\n}))(EnergyMixChartBuilded);\n\nexport default EnergyMixChartContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { sortBy } from 'ramda';\n\nimport { Select } from 'antd';\n\nimport { CountryType } from '../../../utils/types';\n\nfunction SettingsComponent(props) {\n  const { countries, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"SettingComponent\">\n      {'Compare to : '}\n      <Select\n        value={referenceCountryCode}\n        placeholder=\"Select a country or a zone\"\n        optionFilterProp=\"title\"\n        showSearch\n        style={{ width: '250px' }}\n        onSelect={countryCode => setReferenceCountry(countryCode)}\n      >\n        {sortBy(c => c.commonName, countries).map(country => (\n          <Select.Option\n            key={country.alpha2Code}\n            disabled={country.disabled}\n            title={`${country.commonName} (${country.alpha3Code})`}\n          >\n            {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n          </Select.Option>\n        ))}\n      </Select>\n    </div>\n  );\n}\n\nSettingsComponent.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default SettingsComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\nimport SettingsComponent from './SettingsComponent';\nimport { countriesAndAreasSelector } from '../../../store/otherSelectors';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nconst ConnectedSettingsComponent = connect(state => ({\n  countries: countriesAndAreasSelector(state),\n}))(SettingsComponent);\n\nfunction SummaryTab(props) {\n  const { countryCode, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <Row>\n        <Col md={24} sm={24}>\n          <ConnectedSettingsComponent\n            setReferenceCountry={setReferenceCountry}\n            referenceCountryCode={referenceCountryCode}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={24} sm={24}>\n          <EnergyMixChartContainer\n            title=\"Primary energy consumption\"\n            description=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            countryCode={countryCode}\n            mapOfCountryStatistics={primaryMap}\n            withReference={primaryReference}\n            referenceCountryCode={referenceCountryCode}\n            defaultPerCapita\n            defaultStacked\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={24} sm={24}>\n          <EnergyMixChartContainer\n            title=\"Electricity generation by fuels\"\n            description=\"ELECTRICITY_GENERATION_TWH\"\n            countryCode={countryCode}\n            mapOfCountryStatistics={electrictyMap}\n            withReference={electricityReference}\n            referenceCountryCode={referenceCountryCode}\n            defaultPerCapita\n            defaultStacked\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\nimport SettingsComponent from './SettingsComponent';\n\nimport { countriesAndAreasSelector } from '../../../store/otherSelectors';\n\nconst ConnectedSettingsComponent = connect(state => ({\n  countries: countriesAndAreasSelector(state),\n}))(SettingsComponent);\n\nfunction ClimateTab(props) {\n  const { countryCode, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row>\n        <Col md={24} sm={24}>\n          <ConnectedSettingsComponent\n            setReferenceCountry={setReferenceCountry}\n            referenceCountryCode={referenceCountryCode}\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"FOSSIL_CO2_EMISSIONS_MT\"\n            perCapita\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            perCapita\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_INTENSITY_OF_ENERGY\"\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\nimport { ReferenceLine } from 'recharts';\n\nimport { FuelIndicatorsType } from '../../../utils/types';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nfunction PeakReference(props) {\n  const { peak } = props;\n\n  return (\n    peak && (\n      <ReferenceLine\n        y={peak.value}\n        stroke=\"red\"\n        strokeDasharray=\"3 3\"\n        isFront\n      />\n    )\n  );\n}\n\nfunction PeakText(props) {\n  const { fuel, peak } = props;\n  return (\n    peak && (\n      <div style={{ textAlign: 'right' }}>\n        {`Peak ${fuel} ${peak.before && peak.sure ? 'before' : 'in'} ${\n          peak.year\n          // eslint-disable-next-line no-nested-ternary\n        }${peak.sure ? '' : peak.before ? ' (may be before)' : ' ?'}`}\n      </div>\n    )\n  );\n}\n\nfunction ReservesAndPeaksTab(props) {\n  const { countryCode, referenceCountryCode, fuelProduced, peaks } = props;\n  return (\n    <div className=\"ReservesAndPeaksTab\">\n      <Row gutter={20}>\n        <h2>Productions</h2>\n        {fuelProduced.coal && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"COAL_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n              peak={peaks.coal}\n              extra={PeakReference}\n            />\n            <PeakText fuel=\"coal\" peak={peaks.coal} />\n          </Col>\n        )}\n        {fuelProduced.oil && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"OIL_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n              peak={peaks.oil}\n              extra={PeakReference}\n            />\n            <PeakText fuel=\"oil\" peak={peaks.oil} />\n          </Col>\n        )}\n        {fuelProduced.gas && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"GAS_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n              peak={peaks.gas}\n              extra={PeakReference}\n            />\n            <PeakText fuel=\"gas\" peak={peaks.gas} />\n          </Col>\n        )}\n      </Row>\n      <Row gutter={20}>\n        <h2>Reserves</h2>\n        {fuelProduced.coal && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"COAL_RESERVES_GT\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n        {fuelProduced.oil && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"OIL_RESERVES_BB\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n        {fuelProduced.gas && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"GAS_RESERVES_BCM\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n      </Row>\n    </div>\n  );\n}\n\nconst PeakData = {\n  year: PropTypes.number,\n  value: PropTypes.number,\n  sure: PropTypes.bool,\n  before: PropTypes.bool,\n};\n\nReservesAndPeaksTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n  fuelProduced: FuelIndicatorsType.isRequired,\n  peaks: PropTypes.shape({\n    coal: PeakData,\n    oil: PeakData,\n    gas: PeakData,\n  }).isRequired,\n};\n\nexport default ReservesAndPeaksTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Card } from 'antd';\n\nimport {\n  fuelProducedOrConsumedCountrySelector,\n  fuelProducedCountrySelector,\n} from '../../../store/countries';\nimport { statisticPeakYearSelector } from '../../../store/statistics';\n\nimport { FuelIndicatorsType } from '../../../utils/types';\n\nimport IndependencyTab from './IndependencyTab';\nimport SummaryTab from './SummaryTab';\nimport ClimateTab from './ClimateTab';\nimport ReservesAndPeaksTab from './ReservesAndPeaksTab';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n  { key: 'reserves', tab: 'Reserves and peaks' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst ReservesAndPeaksTabContainer = connect((state, { countryCode }) => ({\n  fuelProduced: fuelProducedCountrySelector(countryCode, state),\n  peaks: {\n    coal: statisticPeakYearSelector(\n      {\n        countryCode,\n        statisticCode: 'COAL_PRODUCTION_MTOE',\n      },\n      state,\n    ),\n    oil: statisticPeakYearSelector(\n      {\n        countryCode,\n        statisticCode: 'OIL_PRODUCTION_MTOE',\n      },\n      state,\n    ),\n    gas: statisticPeakYearSelector(\n      {\n        countryCode,\n        statisticCode: 'GAS_PRODUCTION_MTOE',\n      },\n      state,\n    ),\n  },\n}))(ReservesAndPeaksTab);\n\nconst tabContents = {\n  summary: SummaryTab,\n  independency: IndependencyTabContainer,\n  climate: ClimateTab,\n  reserves: ReservesAndPeaksTabContainer,\n};\n\nfunction TabsComponent(props) {\n  const {\n    currentTab,\n    countryCode,\n    onTabChange,\n    setReferenceCountry,\n    referenceCountryCode,\n    fuelProduced,\n  } = props;\n  const TabComponent = tabContents[currentTab];\n  const hasProducedFossils =\n    fuelProduced.coal || fuelProduced.oil || fuelProduced.gas;\n  const tabs = hasProducedFossils\n    ? tabList\n    : tabList.filter(d => d.key !== 'reserves');\n\n  return (\n    <Card\n      key={currentTab}\n      tabList={tabs}\n      activeTabKey={currentTab}\n      onTabChange={onTabChange}\n    >\n      <TabComponent\n        countryCode={countryCode}\n        setReferenceCountry={setReferenceCountry}\n        referenceCountryCode={referenceCountryCode}\n      />\n    </Card>\n  );\n}\n\nTabsComponent.propTypes = {\n  currentTab: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  onTabChange: PropTypes.func.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n  fuelProduced: FuelIndicatorsType.isRequired,\n};\n\nexport default TabsComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { withState } from 'recompose';\nimport qs from 'qs';\n\nimport { Row, Col, Card } from 'antd';\n\nimport { fuelProducedCountrySelector } from '../../store/countries';\nimport { countryWithAreasSelector } from '../../store/otherSelectors';\n\nimport { CountryType, FuelIndicatorsType } from '../../utils/types';\nimport { isMobileOrTablet } from '../../utils';\n\nimport BasicChartContainer from './containers/BasicChartContainer';\n\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport ScrollToTop from '../../components/ScrollToTop';\nimport TabsComponent from './components/TabsComponent';\n\nconst TabsComponentWithState = withState(\n  'referenceCountryCode',\n  'setReferenceCountry',\n  props => props.referenceCountry,\n)(TabsComponent);\n\nfunction CountryView(props) {\n  const { country, goTo, currentTab, referenceCountry, fuelProduced } = props;\n\n  if (!country || country.disabled) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const countryCode = country.alpha2Code;\n  const flag = isMobileOrTablet() ? country.flagIcon : '';\n  return (\n    <div className=\"CountryView\">\n      <ScrollToTop countryCode={countryCode} />\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n            <div>{`Capital: ${country.capital}`}</div>\n            <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n            <div>\n              {`Member of: `}\n              {country.areas.map((area, i) => (\n                <Link key={area.code} to={`/area/${area.code}`}>\n                  {`${i > 0 ? ', ' : ''}${area.name}`}\n                </Link>\n              ))}\n            </div>\n            <Row style={{ marginTop: '20px' }} gutter={20}>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"POPULATION\"\n                  countryCode={countryCode}\n                  color=\"#2c82c9\"\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"GDP_2010_USD\"\n                  countryCode={countryCode}\n                  color=\"#f22613\"\n                  perCapita\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <img\n            key={countryCode}\n            style={{\n              width: '100%',\n              marginBottom: '20px',\n              maxHeight: '180px',\n            }}\n            src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n            alt={`Flag of ${country.commonName}`}\n          />\n          <GeoJSONMap geojson={country.geojson} center={country.latlng} />\n        </Col>\n      </Row>\n      <Row>\n        <TabsComponentWithState\n          countryCode={countryCode}\n          currentTab={currentTab}\n          onTabChange={tab => goTo(`/country/${countryCode}/${tab}`)}\n          referenceCountry={referenceCountry}\n          fuelProduced={fuelProduced}\n        />\n      </Row>\n    </div>\n  );\n}\n\nCountryView.propTypes = {\n  currentTab: PropTypes.string,\n  country: CountryType,\n  goTo: PropTypes.func.isRequired,\n  referenceCountry: PropTypes.string,\n  fuelProduced: FuelIndicatorsType.isRequired,\n};\nCountryView.defaultProps = {\n  currentTab: 'summary',\n  country: null,\n  referenceCountry: 'WORLD',\n};\n\nexport default connect((state, props) => ({\n  currentTab: props.match.params.tab,\n  goTo: url => props.history.push(url),\n  country: countryWithAreasSelector(props.match.params.countryCode, state),\n  referenceCountry: qs.parse(props.location.search.substr(1)).referenceCountry,\n  fuelProduced: fuelProducedCountrySelector(\n    props.match.params.countryCode,\n    state,\n  ),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { withState } from 'recompose';\nimport qs from 'qs';\n\nimport { Row, Col, Card } from 'antd';\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport ScrollToTop from '../../components/ScrollToTop';\n\nimport { fuelProducedCountrySelector } from '../../store/countries';\nimport { areaWithCountriesSelector } from '../../store/otherSelectors';\nimport { AreaType } from '../../utils/types';\n\nimport BasicChartContainer from '../CountryView/containers/BasicChartContainer';\nimport TabsComponent from '../CountryView/components/TabsComponent';\n\nconst TabsComponentWithState = withState(\n  'referenceCountryCode',\n  'setReferenceCountry',\n  props => props.referenceCountry,\n)(TabsComponent);\n\nfunction AreaView(props) {\n  const { area, currentTab, goTo, referenceCountry, fuelProduced } = props;\n  const latlng = [\n    area.countries.reduce((s, c) => c.latlng[0] + s, 0) / area.countries.length,\n    area.countries.reduce((s, c) => c.latlng[1] + s, 0) / area.countries.length,\n  ];\n\n  if (!area) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"AreaView\">\n      <ScrollToTop areaCode={area.code} />\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <Card title={<h2>{`${area.name}`}</h2>}>\n            {area.code !== 'WORLD' && (\n              <div>\n                {`Members : `}\n                {area.countries.map((country, i) => (\n                  <Link\n                    key={country.alpha2Code}\n                    to={`/country/${country.alpha2Code}`}\n                  >\n                    {`${i > 0 ? ', ' : ''}${country.commonName}`}\n                  </Link>\n                ))}\n              </div>\n            )}\n            <Row style={{ marginTop: '20px' }} gutter={10}>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"POPULATION\"\n                  countryCode={area.code}\n                  color=\"#2c82c9\"\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"GDP_2010_USD\"\n                  countryCode={area.code}\n                  color=\"#f22613\"\n                  perCapita\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <GeoJSONMap geojson={area.geojson} center={latlng} />\n        </Col>\n      </Row>\n      <Row>\n        <TabsComponentWithState\n          countryCode={area.code}\n          currentTab={currentTab}\n          onTabChange={tab => goTo(`/area/${area.code}/${tab}`)}\n          referenceCountry={referenceCountry}\n          fuelProduced={fuelProduced}\n        />\n      </Row>\n    </div>\n  );\n}\n\nAreaView.propTypes = {\n  area: AreaType.isRequired,\n  currentTab: PropTypes.string,\n  goTo: PropTypes.func.isRequired,\n  referenceCountry: PropTypes.string,\n};\n\nAreaView.defaultProps = {\n  currentTab: 'summary',\n  referenceCountry: 'WORLD',\n};\n\nexport default connect((state, props) => ({\n  currentTab: props.match.params.tab,\n  goTo: url => props.history.push(url),\n  area: areaWithCountriesSelector(props.match.params.areaCode, state),\n  referenceCountry: qs.parse(props.location.search.substr(1)).referenceCountry,\n  fuelProduced: fuelProducedCountrySelector(props.match.params.areaCode, state),\n}))(AreaView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType, AreaType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, areas, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Select a country\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.SubMenu title=\"Areas\">\n        {sortBy(a => a.name, areas).map(area => (\n          <Menu.Item key={area.code}>\n            <Link to={`/area/${area.code}`}>{area.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu.SubMenu>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  areas: PropTypes.arrayOf(AreaType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  Route, // as BaseRoute,\n  Switch,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\nimport AreaView from '../views/AreaView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\nimport {\n  loadAllAreas,\n  areasLoadedSelector,\n  areasSelector,\n} from '../store/areas';\nimport { LocationType } from '../utils/types';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\nconst AreasLoader = buildLoader(loadAllAreas);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    areas: areasSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction scrollToAnchor(location) {\n  const { hash } = location;\n\n  if (hash !== '') {\n    const id = hash.substr(1);\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'nearest',\n      });\n    }\n  }\n}\n\nclass AppLayout extends Component {\n  componentDidMount() {\n    const { location } = this.props;\n    window.onhashchange = () => scrollToAnchor(location);\n  }\n\n  componentDidUpdate() {\n    const { location } = this.props;\n    scrollToAnchor(location);\n  }\n\n  render() {\n    const { isLoaded } = this.props;\n    return (\n      <div className=\"AppLayout\">\n        <CountriesLoader />\n        <StatisticsLoader />\n        <AreasLoader />\n        <Spin size=\"large\" spinning={!isLoaded}>\n          <Layout>\n            <Layout.Header\n              style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n            >\n              <ConnectedHeaderMenu />\n            </Layout.Header>\n            <Layout.Content>\n              {!isLoaded && <div className=\"AppLayout__splash\" />}\n              {isLoaded && (\n                <Switch>\n                  <Route path=\"/home\" exact component={HomeView} />\n                  <Route\n                    path=\"/country/:countryCode/:tab?\"\n                    exact\n                    component={CountryView}\n                  />\n                  <Route\n                    path=\"/area/:areaCode/:tab?\"\n                    exact\n                    component={AreaView}\n                  />\n                  <Route path=\"/about\" exact component={AboutView} />\n                  <Route\n                    component={() => <Redirect to={{ pathname: '/home' }} />}\n                  />\n                </Switch>\n              )}\n            </Layout.Content>\n            <Layout.Footer>Sources: IEA, World Bank</Layout.Footer>\n          </Layout>\n        </Spin>\n      </div>\n    );\n  }\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n  location: LocationType.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded:\n      countriesLoadedSelector(state) &&\n      statisticsLoadedSelector(state) &&\n      areasLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { withRouter } from 'react-router-dom';\nimport { compose, withProps } from 'recompose';\n\nimport ga from 'react-ga';\n\nconst f = title => (...args) => console.log(title, ...args);\nconst mockGa = {\n  set: () => {},\n  pageview: f('tracker.pageview'),\n};\n\nconst isDev = process.env.NODE_ENV !== 'production';\nconst tracker = isDev ? mockGa : ga;\n\nif (!isDev) ga.initialize('UA-133488135-1', { siteSpeedSampleRate: 100 });\n\nclass AnalyticsComponent extends Component {\n  componentDidMount() {\n    this.trackPage();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { location } = this.props;\n\n    if (location !== prevProps.location) {\n      this.trackPage();\n    }\n  }\n\n  trackPage() {\n    const { location } = this.props;\n    tracker.set({ location });\n    tracker.pageview(location);\n  }\n\n  render() {\n    const { children } = this.props;\n    return <div>{children}</div>;\n  }\n}\n\nAnalyticsComponent.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  children: PropTypes.any.isRequired,\n  location: PropTypes.string.isRequired,\n};\n\nexport default compose(\n  withRouter,\n  withProps(props => ({\n    location: `${props.location.pathname}${props.location.search}`,\n  })),\n)(AnalyticsComponent);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\nimport AnalyticsComponent from './components/AnalyticsComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AnalyticsComponent>\n            <AppLayout />\n          </AnalyticsComponent>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}