{"version":3,"sources":["api/countries.js","store/countries.js","utils/index.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","api/areas.js","store/areas.js","store/index.js","components/ScrollToTop.jsx","utils/types.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/ControlledSlider.jsx","components/StatisticDetails.jsx","utils/copyToClipboard.js","components/ShareChartComponent.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","store/otherSelectors.js","HOC/components/ChartSettings.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","HOC/buildChart.jsx","views/CountryView/components/CustomTooltip.jsx","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.jsx","components/GeoJSONMap.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/GDPByEnergyChart.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SettingsComponent.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/components/ReservesAndPeaksTab.jsx","views/CountryView/components/TabsComponent.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","views/AreaView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["countryMapValues","country","worldTopo","a","objects","countries","geometries","find","c","id","numericCode","geojson","feature","bounds","L","geoJSON","getBounds","Object","objectSpread","_callee","_ref","_ref2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","map","p","then","res","json","sent","slicedToArray","abrupt","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","defaultIndicators","coal","oil","gas","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","countriesInBounds","boundsFilter","intersects","dependentCountriesSelector","countrySelector","countryCode","areas","fuelConsumedCountrySelector","hasConsumed","fuelProducedCountrySelector","hasProduced","fuelProducedOrConsumedCountrySelector","mapObjIndexed","v","k","countriesReducer","arguments","length","undefined","action","coordsToLatLng","coords","_coords","longitude","latitude","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","value","Number","isNaN","toPrecision","toLocaleString","tickFormatter","displayUnit","unit","perCapita","concat","base","main","parseMapOfStatistics","mapOfCountryStatistics","defaultCountry","statistics","statisticCode","addPopCountryStatistics","countryCodes","uniq","d","populations","mergeAll","defineProperty","clickHandlers","onClick","onDoubleClick","clicks","_len2","args","Array","_key2","setTimeout","apply","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","statistic","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref4","compiledCountryStatisticsSelector","_ref3","year","sources","objectWithoutProperties","isFinite","computeDerivedValueFromCompiled","statisticOfAllCountriesLoadedSelector","alpha2Code","fn","hashFunction","JSON","stringify","cacheSize","cache","_len","_key","hash","hashes","keys","memoize","_ref5","_ref9","baseMap","mapOfStatistic","_ref6","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","statisticValues","Math","min","toConsumableArray","endingYears","max","computeYearInterval","_computeYearInterval2","startingYear","endingYear","mapOfNamedStatisticValues","compileName","_ref7","allValues","allValuesByYear","groupBy","sort","compiledValue","popCompileName","population","factor","populationFactor","computeValue","omit","compiledStatisticForCountriesAndYear","_ref10","push","yearValue","statisticSourcesSelector","statisticCodes","reduce","statisticSources","code","fetchJSON","url","options","MTOE_UNIT","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","derivedStatistics","name","description","consumption","production","sourceAttribution","category","isIntensive","energy","gdp","co2","scale","geothSolarWindTide","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","countryStatistics","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","initialCountryStatistic","countryStatisticReducer","statisticsReducer","acc","WORLD","indexedCountries","indexBy","cca2","countriesData","computeGeojson","area","countryAlpha3Codes","ccn3","includes","merge","commonName","AREAS_LOAD_ACTION","AREAS_RECEIVE_ACTION","receiveAreasAction","areasLoadedSelector","areasSelector","areasReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","actionSanitizer","stateSanitizer","store","createStore","ScrollToTop","scrollTo","prevProps","equals","props","Component","CountryType","PropTypes","shape","string","isRequired","alpha3Code","capital","number","latlng","arrayOf","object","MAP_HEIGHT","bool","sourceUrl","sourceDescriptionUrl","pathname","search","NA_COLOR","BORDER_COLOR","LEGEND_COLORS_COUNT","LEGEND_WIDTH","interpolator","d3Colors","WorldMap","selectedCountries","dependentCountries","currentStatistic","currentYear","minZoom","onMapChange","selectedCountryByCode","selectedData","maxValue","colorValueMap","scaleString","minValue","valueMap","scaleLinear","scaleLog","domain","color","computeColorMap","react_default","createElement","className","Map","zoom","zoomSnap","zoomDelta","center","style","height","zIndex","dragging","onZoomend","onMoveend","countryData","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","range","i","width","background","backgroundColor","defaultProps","ControlledSlider","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","defaultValue","setState","nextProps","onChange","_this2","slider","assign","setValue","StatisticDetails","descriptionLines","split","popover","title","arrowPointAtCenter","overlayStyle","maxWidth","content","stat","href","target","rel","placement","es_button","size","icon","marginRight","copyTextToClipboard","text","element","clipboard","writeText","body","textArea","document","appendChild","focus","select","successful","execCommand","removeChild","resolve","reject","Error","err","fallbackCopyTextToClipboard","ShareChartComponent","chartRef","query","location","noHash","dropdown","overlay","menu","domElement","offsetHeight","padding","offsetWidth","classFiltered","classList","add","domToImage","toBlob","bgcolor","transform","blob","remove","chartToPngBlob","current","saveAs","message","error","compileNames","headers","dataLines","dataItem","csv","l","join","Blob","origin","link","copyToClipboard","success","Item","theme","withRouter","WITH_SCALE_SETTINGS","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","mapRef","setScale","countryByCode","formatedData","s","statisticByCategory","es_select","placeholder","optionFilterProp","showSearch","stats","OptGroup","label","sortBy","Option","components_ControlledSlider","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","e","Button","disabled","components_ShareChartComponent","replace","qs","components_StatisticDetails","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","defaultSortOrder","align","onRow","record","f","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","React","createRef","setFilterBounds","getZoom","_this$props","loadStatistic","_this$props2","parameters","_this$props3","goTo","newPerCapita","newParameters","_this$props4","_this$state","components_ScrollToTop","row","gutter","md","col","setParameters","queryObject","parse","path","history","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","countryWithAreasSelector","areasOfCountrySelector","areaWithCountriesSelector","areaCode","areaSelector","countriesAndAreasSelector","ChartSettings","perCapitaSwitch","stackedSwitch","stacked","setStacked","es_switch","checked","Loader","load","prevOtherProps","otherProps","buildLoader","loadFunction","StatisticsLoader","defaultSelector","mapStateToProps","mapOfCountryStatisticsInput","withReference","_props$referenceCount","referenceCountryCode","reference","parsedMapOfCountryStatistics","mapOfCountryStatisticsToLoad","countryStatisticsToLoad","countryStatitics","countryStatisticsLoadedSelector","referenceCountry","withCountryStatistics","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","spin","spinning","defaultHeight","buildChart","_options$perCapitaSwi","_options$stackedSwitc","hocs","hasSettings","withStateHandlers","_ref$defaultPerCapita","defaultPerCapita","_ref$defaultStacked","defaultStacked","WrappedChart","compose","_Component","ChartWrapper","buttonRef","inherits","createClass","_this$props$perCapita","_this$props$stacked","statisticList","finalHeight","toLowerCase","descriptionStatistic","finalDescription","boxShadow","data-html2canvas-ignore","components_ChartSettings","CustomTooltip","active","separator","payload","withTotal","displayFilter","totalFilter","units","filteredPayload","_payload$","_payload$$formatter","formatter","total","sum","totalUnit","_p$formatter","dataKey","BasicChart","withComparison","ResponsiveContainer","LineChart","Line","stroke","strokeWidth","dot","CartesianGrid","opacity","XAxis","interval","YAxis","component_Tooltip","props2","components_CustomTooltip","Legend","iconType","CustomGeoJSON","createGeoJSON","leaflet","addTo","flyToBounds","withLeaflet","GeoJSONMap","boxZoom","doubleClickZoom","scrollWheelZoom","zoomControl","TileLayer","attribution","GeoJSONMap_GeoJSON","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","console","warn","dataWithImportAndExport","diff","toFixed","export","import","ComposedChart","Area","stackId","activeDot","fill","strokeOpacity","GDPByEnergyChart","ScatterChart","bottom","Scatter","cx","cy","r","line","dataMin","floor","dataMax","ceil","position","top","0","1","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","GDPByEnergyChartContainer","IndependencyTab","fuelProducedOrConsumed","sm","BasicChartContainer","REFERENCE_DATAKEY","defaultLineAreaProps","isAnimationActive","lineAreaPropsMap","legendPayload","inactive","alpha","cssa","getLegendPayload","fuelConsumed","displayedStats","EnergyMixChart","toggleStat","setDisplayedStats","coalUnit","LineArea","lineAreaProps","some","fuelProps","displayedFuels","chartMax","ticks","getNiceTickValues","pop","getTicksAndDomain","EnergyMixChartWithState","bind","assertThisInitialized","initDone","init","newProps","toggledStat","components_EnergyMixChart","EnergyMixChartBuilded","EnergyMixChartContainer","SettingsComponent","setReferenceCountry","onSelect","primaryMap","primaryReference","electrictyMap","electricityReference","ConnectedSettingsComponent","SummaryTab","containers_EnergyMixChartContainer","ClimateTab","ClimateTab_ConnectedSettingsComponent","ReservesAndPeaksTab","fuelProduced","tabList","tab","tabContents","summary","independency","climate","reserves","TabsComponent","currentTab","onTabChange","TabComponent","card","activeTabKey","TabsComponentWithState","withState","CountryView","Redirect","to","flag","flagIcon","xs","Link","marginTop","lg","maxHeight","src","alt","components_GeoJSONMap","match","params","AboutView","AreaView","AreaView_TabsComponentWithState","GitHubLink","HeaderMenu","mode","selectable","lineHeight","SubMenu","components_GitHubLink","CountriesLoader","prop","AreasLoader","_getAreas","getAllAreas","ConnectedHeaderMenu","scrollToAnchor","getElementById","scrollIntoView","behavior","block","inline","AppLayout","onhashchange","AppLayout_StatisticsLoader","layout","Header","Content","Switch","Route","exact","component","Footer","App","es","HashRouter","components_AppLayout","Boolean","hostname","ReactDOM","src_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9bcfaba4.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport L from 'leaflet';\n\nfunction countryMapValues(country, worldTopo) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  const geojson = a && feature(worldTopo, a);\n  const bounds = a && L.geoJSON(geojson).getBounds();\n  return {\n    ...country,\n    geojson,\n    bounds,\n  };\n}\n\nasync function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [fetch('/data/countries.json'), fetch('/data/worldTopo.json')].map(p =>\n      p.then(res => res.json()),\n    ),\n  );\n  return countries.map(country => countryMapValues(country, worldTopo));\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop, mapObjIndexed } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nconst defaultIndicators = {\n  // for areas\n  coal: true,\n  oil: true,\n  gas: true,\n  hydro: true,\n  nuclear: true,\n  biofuelsWaste: true,\n  solarWindTideGeoth: true,\n};\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function countriesInBounds(boundsFilter, state) {\n  const countries = countriesSelector(state);\n\n  return boundsFilter\n    ? countries.filter(\n        country => country.bounds && boundsFilter.intersects(country.bounds),\n      )\n    : countries;\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode] || state.areas.data[countryCode];\n}\n\nexport function fuelConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasConsumed : defaultIndicators;\n}\n\nexport function fuelProducedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasProduced : defaultIndicators;\n}\n\nexport function fuelProducedOrConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country\n    ? mapObjIndexed((v, k) => v || country.hasConsumed[k], country.hasProduced)\n    : defaultIndicators;\n}\n\nexport default countriesReducer;\n","import L from 'leaflet';\nimport { map, uniq, values, mergeAll } from 'ramda';\nimport domToImage from 'dom-to-image';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n\nexport function parseMapOfStatistics(mapOfCountryStatistics, defaultCountry) {\n  return map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n}\n\nexport function addPopCountryStatistics(mapOfCountryStatistics, perCapita) {\n  if (!perCapita) {\n    return mapOfCountryStatistics;\n  }\n\n  const countryCodes = uniq(\n    values(mapOfCountryStatistics).map(d => d.countryCode),\n  );\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...populations,\n    ...mapOfCountryStatistics,\n  };\n}\n\nexport function chartToPngBlob(domElement, scale) {\n  const padding = 10;\n  const height = domElement.offsetHeight + padding * 2;\n  const width = domElement.offsetWidth + padding * 2;\n  const classFiltered = [\n    'ChartWrapper__header__right',\n    'leaflet-control-container',\n  ];\n  domElement.classList.add('transformingToPng');\n  return domToImage\n    .toBlob(domElement, {\n      filter: element => !classFiltered.includes(element.className),\n      bgcolor: 'white',\n      style: {\n        padding: `${padding}px`,\n        transform: `scale(${scale}) translate(${width / 2 / scale}px, ${height /\n          2 /\n          scale}px)`,\n      },\n      height: height * scale,\n      width: width * scale,\n    })\n    .then(blob => {\n      domElement.classList.remove('transformingToPng');\n      return blob;\n    });\n}\n\nexport function memoize(\n  fn,\n  hashFunction = args => JSON.stringify(args),\n  cacheSize = 30,\n) {\n  const cache = {};\n  return function memoizedFun(...args) {\n    const hash = hashFunction(args);\n    if (cache[hash]) {\n      return cache[hash];\n    }\n    const res = fn(...args);\n\n    cache[hash] = res;\n\n    const hashes = Object.keys(cache);\n    if (hashes.length > cacheSize) {\n      delete cache[hashes[0]];\n    }\n\n    return res;\n  };\n}\n\nexport function clickHandlers({ onClick, onDoubleClick }) {\n  let clicks = 0;\n  return function clickHandler(...args) {\n    clicks += 1;\n    if (clicks < 2) {\n      setTimeout(() => {\n        if (clicks < 2) {\n          onClick(...args);\n        } else {\n          onDoubleClick(...args);\n        }\n        clicks = 0;\n      }, 300);\n    }\n  };\n}\n","import { values, mapObjIndexed, mergeAll, groupBy, map, omit } from 'ramda';\nimport { countriesSelector } from '../countries';\nimport {\n  parseMapOfStatistics,\n  addPopCountryStatistics,\n  memoize,\n} from '../../utils';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, value: null }\n      : { year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(countryStatitics, state) {\n  return countryStatitics.every(countryStatistic =>\n    countryStatisticLoadedSelector(countryStatistic, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (perCapita && !population)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction compiledCountryStatisticsSelectorFn(\n  { mapOfCountryStatistics: baseMap, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    baseMap,\n    countryCode,\n  );\n  const mapOfCountryStatistics = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    mapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    mapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .map(year => Number(year))\n    .filter(year => startingYear <= year && year <= endingYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          mapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\nexport const compiledCountryStatisticsSelector = memoize(\n  compiledCountryStatisticsSelectorFn,\n  args => JSON.stringify(args[0]),\n);\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function statisticSourcesSelector(statisticCodes, state) {\n  return statisticCodes.reduce((statisticSources, statisticCode) => {\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sources = values(statistic.source).map(code =>\n        statisticSelector(code, state),\n      );\n      return statisticSources.concat(sources);\n    }\n\n    return statisticSources.concat([statistic]);\n  }, []);\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","const PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description:\n      'This indicator made up by dividing primary energy consumption by primary energy production, gives an indication on the level of self-sufficiency (or dependency) of a country.',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description:\n      'Measures the mass of CO2 by unit of energy that is emitted by the country.',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'FOSSIL_CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    scale: 'linear',\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: 'Includes hydroelectricity, solar, wind and tide productions.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description:\n      'Includes renewables and nuclear productions. Excludes biofuels at the moment.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      const countryStatistics = sourceCodes.map(sourceCode => ({\n        statisticCode: sourceCode,\n        countryCode,\n      }));\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics(countryStatistics),\n      );\n      return;\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics(countryStatistics) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      countryStatistics.map(countryStatistic =>\n        dispatch(loadCountryStatistic(countryStatistic)),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import worldTopo from 'world-atlas/world/110m.json';\nimport countriesData from 'world-countries/countries';\nimport { merge } from 'topojson-client';\nimport { indexBy } from 'ramda';\n\nconst indexedCountries = indexBy(c => c.cca2, countriesData);\n\nfunction computeGeojson(area) {\n  const countryAlpha3Codes = area.countryCodes.map(\n    countryCode => indexedCountries[countryCode].ccn3,\n  );\n  const geometries = worldTopo.objects.countries.geometries.filter(c =>\n    countryAlpha3Codes.includes(c.id),\n  );\n  return merge(worldTopo, geometries);\n}\n\nexport default async function getAreas() {\n  const res = await fetch('/data/areas.json');\n  const data = await res.json();\n\n  return data.map(area => ({\n    ...area,\n    alpha2Code: area.code,\n    commonName: area.name,\n    geojson: area.countryCodes ? computeGeojson(area) : null,\n  }));\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllAreas from '../api/areas';\n\nexport const AREAS_LOAD_ACTION = 'AREAS_LOAD_ACTION';\nexport const AREAS_RECEIVE_ACTION = 'AREAS_RECEIVE_ACTION';\n\nfunction loadAreasAction() {\n  return { type: AREAS_LOAD_ACTION };\n}\n\nfunction receiveAreasAction({ data, errors }) {\n  return { type: AREAS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllAreas() {\n  return function dispatchLoadAllAreas(dispatch) {\n    dispatch(loadAreasAction());\n    return getAllAreas()\n      .then(data =>\n        dispatch(\n          receiveAreasAction({\n            data: indexBy(prop('code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveAreasAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction areasReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case AREAS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case AREAS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function areasLoadedSelector(state) {\n  return state.areas.loaded;\n}\n\nexport function areasSelector(state) {\n  return values(state.areas.data);\n}\n\nexport function areaSelector(areaCode, state) {\n  return state.areas.data[areaCode];\n}\n\nexport function areasOfCountrySelector(countryCode, state) {\n  return values(state.areas.data).filter(\n    area => area.countryCodes && area.countryCodes.includes(countryCode),\n  );\n}\n\nexport default areasReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\nimport { map } from 'ramda';\n\nimport countriesReducer from './countries';\nimport statisticsReducer, {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n} from './statistics';\nimport areasReducer from './areas';\n\nfunction actionSanitizer(action) {\n  if (\n    (action.type === COUNTRY_STATISTIC_RECEIVE_ACTION ||\n      action.type === STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION) &&\n    action.data\n  ) {\n    return { ...action, data: 'DATA' };\n  }\n  return action;\n}\n\nfunction stateSanitizer(state) {\n  return {\n    ...state,\n    countries: map(\n      country => ({ ...country, geojson: country.geojson && 'GEOJSON' }),\n      state.countries.data,\n    ),\n    areas: map(\n      area => ({ ...area, geojson: area.geojson && 'GEOJSON' }),\n      state.areas.data,\n    ),\n    statistics: map(\n      statistic => ({\n        ...statistic,\n        values: map(\n          country => ({\n            ...country,\n            values: country.values && `[${country.values.length}]`,\n          }),\n          statistic.values,\n        ),\n      }),\n      state.statistics.data,\n    ),\n  };\n}\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n  areas: areasReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  actionSanitizer,\n  stateSanitizer,\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import { Component } from 'react';\nimport { equals } from 'ramda';\n\nclass ScrollToTop extends Component {\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!equals(this.props, prevProps)) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default ScrollToTop;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n  category: PropTypes.string.isRequired,\n  sourceAttribution: PropTypes.string,\n  sourceUrl: PropTypes.string,\n  sourceDescriptionUrl: PropTypes.string,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n\nexport const AreaType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  countries: PropTypes.arrayOf(CountryType),\n});\n\nexport const LocationType = PropTypes.shape({\n  hash: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map, range } from 'ramda';\nimport { scaleLog, scaleLinear } from 'd3-scale';\nimport * as d3Colors from 'd3-scale-chromatic';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst NA_COLOR = '#888';\nconst BORDER_COLOR = 'black';\nconst LEGEND_COLORS_COUNT = 4;\nconst LEGEND_WIDTH = 300; // px\nconst COLORS_SCHEME = 'YlGnBu';\n\nconst interpolator = d3Colors[`interpolate${COLORS_SCHEME}`];\n\nfunction computeColorMap(data, scaleString) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n  const scaleType = scaleString === 'linear' ? scaleLinear() : scaleLog();\n  const scale = scaleType.domain([minValue, maxValue]);\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: interpolator(0), value };\n    }\n    return {\n      color: interpolator(scale(value)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    selectedCountries,\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    scale,\n    minZoom,\n    onMapChange,\n  } = props;\n  const selectedCountryByCode = indexBy(c => c.alpha2Code, selectedCountries);\n  const selectedData = data.filter(\n    d => d.countryCode !== 'WORLD' && selectedCountryByCode[d.countryCode],\n  );\n  const maxValue = Math.max(...selectedData.map(d => d.value));\n  const colorValueMap = computeColorMap(\n    selectedData,\n    currentStatistic.scale || scale,\n  );\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        minZoom={minZoom}\n        zoom={minZoom}\n        zoomSnap={0.1}\n        zoomDelta={0.5}\n        center={[20, 30]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        dragging={!isMobileOrTablet()}\n        onZoomend={onMapChange}\n        onMoveend={onMapChange}\n      >\n        {countries.map(country => {\n          const countryData = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: BORDER_COLOR,\n                  weight: 0.5,\n                  fillColor: countryData ? countryData.color : NA_COLOR,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(\n                  countryData && countryData.value,\n                )}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          <div>\n            {`${currentStatistic.name} (${displayUnit(\n              currentStatistic.unit,\n              perCapita,\n            )})`}\n          </div>\n          <div className=\"WorldMap__legend__colors\">\n            <div>\n              <div className=\"WorldMap__legend__gradient\">\n                {range(0, LEGEND_COLORS_COUNT).map(i => (\n                  <div\n                    key={i}\n                    className=\"WorldMap__legend__gradient__item\"\n                    style={{\n                      width: LEGEND_WIDTH / LEGEND_COLORS_COUNT,\n                      background: `linear-gradient(to right, ${interpolator(\n                        i / LEGEND_COLORS_COUNT,\n                      )}, ${interpolator((i + 1) / LEGEND_COLORS_COUNT)}`,\n                    }}\n                  />\n                ))}\n              </div>\n              <div className=\"WorldMap__legend__gradientRange\">\n                <div>0</div>\n                <div>{formatNumber(maxValue)}</div>\n              </div>\n            </div>\n            <div>\n              <div\n                className=\"WorldMap__legend__NA__square\"\n                style={{ backgroundColor: NA_COLOR }}\n              />\n              <div>NA</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"WorldMap__sources toPng\">\n        From http://worldenergydata.tk - Sources: IEA, World Bank\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  selectedCountries: PropTypes.arrayOf(CountryType).isRequired,\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  scale: PropTypes.string,\n  minZoom: PropTypes.number,\n  onMapChange: PropTypes.func.isRequired,\n};\n\nWorldMap.defaultProps = {\n  scale: null,\n  minZoom: 1.8,\n};\n\nexport default WorldMap;\n","import React, { Component } from 'react';\nimport { Slider } from 'antd';\n\nclass ControlledSlider extends Component {\n  constructor() {\n    super();\n    this.state = { value: undefined };\n  }\n\n  componentDidMount() {\n    const { defaultValue } = this.props;\n    this.setState({\n      value: defaultValue,\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { defaultValue } = this.props;\n    if (defaultValue !== nextProps.defaultValue) {\n      this.setState({ value: nextProps.defaultValue });\n    }\n  }\n\n  setValue(value) {\n    const { onChange } = this.props;\n    this.setState({ value });\n    onChange(value);\n  }\n\n  render() {\n    const { value } = this.state;\n    return (\n      <Slider {...this.props} value={value} onChange={v => this.setValue(v)} />\n    );\n  }\n}\n\nexport default ControlledSlider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Popover, Button } from 'antd';\n\nimport { StatisticType } from '../utils/types';\n\nfunction StatisticDetails(props) {\n  const { statisticSources, description } = props;\n  const descriptionLines = description && description.split('\\n');\n\n  return (\n    <div className=\"StatisticDetails\">\n      <Popover\n        title=\"Details\"\n        arrowPointAtCenter\n        overlayStyle={{ maxWidth: '300px' }}\n        content={\n          // eslint-disable-next-line react/jsx-wrap-multilines\n          <div>\n            {description && (\n              <div>\n                <strong>Description : </strong>\n                {`${descriptionLines[0]}`}\n              </div>\n            )}\n            <div>\n              <strong>\n                {`Source${statisticSources.length > 1 ? 's' : ''}`}\n              </strong>\n              <ul className=\"StatisticDetails__sources\">\n                {statisticSources.map(stat => (\n                  <li key={stat.code}>\n                    <a\n                      href={stat.sourceUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {`${stat.name} (${stat.sourceAttribution})`}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        }\n        placement=\"bottomRight\"\n      >\n        <Button\n          size=\"small\"\n          icon=\"info-circle\"\n          style={{ marginRight: '5px' }}\n        />\n      </Popover>\n    </div>\n  );\n}\n\nStatisticDetails.propTypes = {\n  description: PropTypes.string,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n};\n\nStatisticDetails.defaultProps = {\n  description: null,\n};\n\nexport default StatisticDetails;\n","function fallbackCopyTextToClipboard(text, element = window.body) {\n  const textArea = document.createElement('textarea');\n  textArea.value = text;\n  element.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    const successful = document.execCommand('copy');\n    element.removeChild(textArea);\n    return successful\n      ? Promise.resolve()\n      : Promise.reject(new Error('fallbackCopyTextToClipboard error'));\n  } catch (err) {\n    element.removeChild(textArea);\n    throw Promise.reject(err);\n  }\n}\nfunction copyTextToClipboard(text, element) {\n  return navigator.clipboard\n    ? navigator.clipboard.writeText(text)\n    : fallbackCopyTextToClipboard(text, element);\n}\n\nexport default copyTextToClipboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { saveAs } from 'file-saver';\nimport { withRouter } from 'react-router-dom';\n\nimport { Button, Dropdown, Menu, Icon, message } from 'antd';\nimport { chartToPngBlob } from '../utils';\nimport copyToClipboard from '../utils/copyToClipboard';\nimport { LocationType } from '../utils/types';\n\nfunction ShareChartComponent(props) {\n  const { id, chartRef, query, location, noHash } = props;\n  return (\n    <div className=\"ShareChartComponent\">\n      <Dropdown\n        overlay={\n          // eslint-disable-next-line\n          <Menu\n            onClick={({ key }) => {\n              if (key === 'png') {\n                chartToPngBlob(chartRef.current, 2)\n                  .then(blob => saveAs(blob, `${id}.png`))\n                  .catch(() => message.error('An error occured !'));\n              } else if (key === 'csv') {\n                const { data, statistics } = props;\n                const compileNames = Object.keys(statistics);\n                const headers = compileNames.map(\n                  compileName => statistics[compileName].code,\n                );\n                const dataLines = data.map(dataItem =>\n                  compileNames.map(compileName => dataItem[compileName]),\n                );\n                const lines = [headers, ...dataLines];\n                const csv = lines.map(l => l.join(',')).join('\\n');\n                const blob = new Blob([csv], {\n                  type: 'text/plain;charset=utf-8',\n                });\n                saveAs(blob, `${id}.csv`);\n              } else if (key === 'link') {\n                const { origin } = window.location;\n                const { pathname } = location;\n\n                const link = `${origin}#${pathname}${query}${\n                  noHash ? '' : `#${id}`\n                }`;\n                copyToClipboard(link, chartRef.current)\n                  .then(() => message.success('Copied !'))\n                  .catch(() => message.error('An error occured !'));\n              }\n            }}\n          >\n            <Menu.Item key=\"link\">\n              <Icon type=\"copy\" theme=\"filled\" />\n              Copy link\n            </Menu.Item>\n            <Menu.Item key=\"png\">\n              <Icon type=\"picture\" theme=\"filled\" />\n              .png\n            </Menu.Item>\n            <Menu.Item key=\"csv\">\n              <Icon type=\"file-text\" theme=\"filled\" />\n              .csv\n            </Menu.Item>\n          </Menu>\n        }\n      >\n        <Button size=\"small\" icon=\"share-alt\" style={{ marginRight: '5px' }} />\n      </Dropdown>\n    </div>\n  );\n}\n\nShareChartComponent.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  chartRef: PropTypes.any.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  statistics: PropTypes.object.isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  id: PropTypes.string.isRequired,\n  query: PropTypes.string,\n  location: LocationType.isRequired,\n  noHash: PropTypes.bool,\n};\n\nShareChartComponent.defaultProps = {\n  query: '',\n  noHash: false,\n};\n\nexport default withRouter(ShareChartComponent);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Radio, Popover, Button, Icon } from 'antd';\nimport debounce from 'lodash.debounce';\nimport qs from 'qs';\n\nimport { sortBy, groupBy, indexBy } from 'ramda';\n\nimport Slider from './ControlledSlider';\nimport StatisticDetails from '../../../components/StatisticDetails';\nimport ShareChartComponent from '../../../components/ShareChartComponent';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nconst WITH_SCALE_SETTINGS = false;\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    statisticSources,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n    mapRef,\n    scale,\n    setScale,\n  } = props;\n\n  const countryByCode = indexBy(c => c.alpha2Code, countries);\n  const formatedData = data\n    .filter(s => s.value !== null && countryByCode[s.countryCode])\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countryByCode[s.countryCode].commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  if (currentStatistic.isIntensive && perCapita) {\n    setPerCapita(false);\n  }\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <div className=\"StatisticExplorer__options\">\n        <Radio.Group\n          style={{ marginBottom: '10px' }}\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button\n            value\n            disabled={\n              currentStatistic.code === 'POPULATION' ||\n              currentStatistic.isIntensive\n            }\n          >\n            Per capita\n          </Radio.Button>\n        </Radio.Group>\n        <div className=\"StatisticExplorer__options__right\">\n          <ShareChartComponent\n            id={currentStatistic.name.replace(/ /g, '_')}\n            chartRef={mapRef}\n            statistics={{\n              countryCode: { code: 'COUNTRY_CODE' },\n              value: currentStatistic,\n            }}\n            data={data}\n            query={`?${qs.stringify({\n              statisticCode: currentStatistic.code,\n              perCapita,\n              currentYear,\n            })}`}\n            noHash\n          />\n          <StatisticDetails\n            statisticSources={statisticSources}\n            description={currentStatistic.description}\n          />\n          {WITH_SCALE_SETTINGS && (\n            <Popover\n              title=\"Settings\"\n              arrowPointAtCenter\n              content={\n                // eslint-disable-next-line react/jsx-wrap-multilines\n                <div>\n                  {'Scale '}\n                  <Radio.Group\n                    buttonStyle=\"solid\"\n                    size=\"small\"\n                    value={scale}\n                    onChange={e => setScale(e.target.value)}\n                  >\n                    <Radio.Button value=\"log\">Log</Radio.Button>\n                    <Radio.Button value=\"linear\">Linear</Radio.Button>\n                  </Radio.Group>\n                </div>\n              }\n              placement=\"bottomRight\"\n            >\n              <Button size=\"small\">\n                <Icon type=\"setting\" theme=\"filled\" />\n              </Button>\n            </Popover>\n          )}\n        </div>\n      </div>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  mapRef: PropTypes.object.isRequired,\n  scale: PropTypes.string,\n  setScale: PropTypes.func.isRequired,\n};\n\nStatisticExplorer.defaultProps = {\n  scale: null,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport qs from 'qs';\n\nimport { Row, Col } from 'antd';\nimport ScrollToTop from '../../components/ScrollToTop';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  countriesInBounds,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../store/statistics';\n\nfunction f(statisticCode, perCapita) {\n  // TODO\n  return perCapita ? [statisticCode, 'POPULATION'] : [statisticCode];\n}\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    selectedCountries: countriesInBounds(boundsFilter, state),\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    countries: countriesInBounds(boundsFilter, state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    statisticSources: statisticSourcesSelector(\n      f(statisticCode, perCapita),\n      state,\n    ),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nconst MIN_ZOOM = 2;\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      scale: null,\n      boundsFilter: null,\n    };\n    this.mapRef = React.createRef();\n    this.onMapChange = e =>\n      this.setFilterBounds(e.target.getBounds(), e.target.getZoom());\n  }\n\n  componentDidMount() {\n    const { loadStatistic, statisticCode, perCapita } = this.props;\n\n    loadStatistic(statisticCode);\n\n    if (perCapita) {\n      loadStatistic('POPULATION');\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { loadStatistic, statisticCode, perCapita } = this.props;\n    if (statisticCode !== prevProps.statisticCode) {\n      loadStatistic(statisticCode);\n    }\n    if (perCapita !== prevProps.perCapita && perCapita) {\n      loadStatistic('POPULATION');\n    }\n  }\n\n  setParameters(parameters) {\n    const { statisticCode, perCapita, currentYear, goTo } = this.props;\n    const newPerCapita =\n      parameters.perCapita === undefined ? perCapita : parameters.perCapita;\n\n    const newParameters = {\n      statisticCode,\n      currentYear,\n      ...parameters,\n      perCapita: newPerCapita && parameters.statisticCode !== 'POPULATION',\n    };\n    goTo(`?${qs.stringify(newParameters)}`);\n  }\n\n  setFilterBounds(bounds, zoom) {\n    this.setState({ boundsFilter: zoom === MIN_ZOOM ? null : bounds });\n  }\n\n  setScale(scale) {\n    this.setState({ scale });\n  }\n\n  render() {\n    const { goTo, currentYear, statisticCode, perCapita } = this.props;\n    const { scale, boundsFilter } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <ScrollToTop />\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <div ref={this.mapRef}>\n              <ConnectedWorldMap\n                statisticCode={statisticCode}\n                currentYear={currentYear}\n                perCapita={perCapita}\n                scale={scale}\n                minZoom={MIN_ZOOM}\n                onMapChange={this.onMapChange}\n                boundsFilter={boundsFilter}\n              />\n            </div>\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => goTo(`country/${record.countryCode}`)}\n              setYear={year => this.setParameters({ currentYear: year })}\n              setStatistic={value =>\n                this.setParameters({ statisticCode: value })\n              }\n              setPerCapita={value => this.setParameters({ perCapita: value })}\n              mapRef={this.mapRef}\n              scale={scale}\n              setScale={value => this.setScale(value)}\n              boundsFilter={boundsFilter}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  loadStatistic: PropTypes.func.isRequired,\n  statisticCode: PropTypes.string,\n  perCapita: PropTypes.bool.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nHomeView.defaultProps = {\n  statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n};\n\nexport default connect(\n  (state, props) => {\n    const { search } = props.location;\n    const queryObject = search ? qs.parse(search.substr(1)) : {};\n    return {\n      goTo(path) {\n        props.history.push(path);\n      },\n      currentYear: Number(queryObject.currentYear) || 2010,\n      perCapita: queryObject.perCapita === 'true',\n      statisticCode: queryObject.statisticCode,\n    };\n  },\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import { countrySelector, countriesSelector } from './countries';\nimport { areaSelector, areasOfCountrySelector, areasSelector } from './areas';\n\nexport function countryWithAreasSelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  const areas = areasOfCountrySelector(countryCode, state);\n\n  return {\n    ...country,\n    areas,\n  };\n}\n\nexport function areaWithCountriesSelector(areaCode, state) {\n  const area = areaSelector(areaCode, state);\n  const countries = area.countryCodes\n    ? area.countryCodes\n        .map(countryCode => countrySelector(countryCode, state))\n        .filter(c => !!c)\n    : countriesSelector(state);\n  return {\n    ...area,\n    countries,\n  };\n}\n\nexport function countriesAndAreasSelector(state) {\n  return [\n    ...countriesSelector(state).filter(c => !c.disabled),\n    ...areasSelector(state),\n  ];\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Switch } from 'antd';\n\nfunction ChartSettings(props) {\n  const {\n    perCapitaSwitch,\n    stackedSwitch,\n    perCapita,\n    stacked,\n    setPerCapita,\n    setStacked,\n  } = props;\n\n  return (\n    <div className=\"ChartSettings\">\n      {perCapitaSwitch && (\n        <div>\n          {'Per capita '}\n          <Switch size=\"small\" checked={perCapita} onChange={setPerCapita} />\n        </div>\n      )}\n      {stackedSwitch && (\n        <div>\n          {'Stacked '}\n          <Switch size=\"small\" checked={stacked} onChange={setStacked} />\n        </div>\n      )}\n    </div>\n  );\n}\nChartSettings.propTypes = {\n  perCapitaSwitch: PropTypes.bool.isRequired,\n  stackedSwitch: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  setStacked: PropTypes.func.isRequired,\n};\n\nexport default ChartSettings;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values, uniq } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n  statisticSourcesSelector,\n} from '../store/statistics';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../utils';\nimport { countrySelector } from '../store/countries';\n\nconst StatisticsLoader = buildLoader(({ countryStatistics }) =>\n  loadCountryStatistics(countryStatistics),\n);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction mapStateToProps(state, props) {\n  const {\n    perCapita,\n    statisticCode,\n    mapOfCountryStatistics: mapOfCountryStatisticsInput,\n    countryCode,\n    withReference,\n    referenceCountryCode = 'WORLD',\n  } = props;\n  const isIntensive =\n    statisticCode && statisticSelector(statisticCode, state).isIntensive;\n  const mapOfCountryStatistics =\n    (perCapita || isIntensive) && withReference\n      ? {\n          ...mapOfCountryStatisticsInput,\n          reference: {\n            countryCode: referenceCountryCode,\n            statisticCode:\n              typeof withReference === 'boolean'\n                ? statisticCode\n                : withReference,\n          },\n        }\n      : mapOfCountryStatisticsInput;\n\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n  );\n  const mapOfCountryStatisticsToLoad = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const countryStatisticsToLoad = values(mapOfCountryStatisticsToLoad);\n  const statisticCodes = uniq(\n    countryStatisticsToLoad.map(c => c.statisticCode),\n  );\n  const isLoaded = countryStatisticsLoadedSelector(\n    countryStatisticsToLoad,\n    state,\n  );\n  const data = isLoaded\n    ? compiledCountryStatisticsSelector(\n        {\n          mapOfCountryStatistics,\n          countryCode: props.countryCode,\n          perCapita: props.perCapita,\n        },\n        state,\n      )\n    : [];\n\n  return {\n    data,\n    statistics: map(\n      ({ statisticCode: code }) => statisticSelector(code, state),\n      parsedMapOfCountryStatistics,\n    ),\n    statisticSources: statisticSourcesSelector(statisticCodes, state),\n    isLoaded,\n    countryStatisticsToLoad,\n    country: countrySelector(countryCode, state),\n    referenceCountry: countrySelector(referenceCountryCode, state),\n  };\n}\n\nfunction withCountryStatistics(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) =>\n      mapStateToProps(state, {\n        mapOfCountryStatistics: mapOfCountryStatisticsSelector(state, props),\n        ...props,\n      }),\n    )(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader countryStatistics={props.countryStatisticsToLoad} />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistics;\n","import React, { Component } from 'react';\nimport { values } from 'ramda';\nimport { withStateHandlers, compose } from 'recompose';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\n\nimport { Icon, Popover, Button } from 'antd';\n\nimport { displayUnit } from '../utils';\nimport StatisticDetails from '../components/StatisticDetails';\n\nimport ChartSettings from './components/ChartSettings';\nimport ShareChartComponent from '../components/ShareChartComponent';\nimport withCountryStatistics from './withCountryStatistics';\n\nconst defaultHeight = 200;\n\nfunction buildChart(options = {}) {\n  const {\n    mapOfCountryStatisticsSelector,\n    perCapitaSwitch = false,\n    stackedSwitch = false,\n  } = options;\n  const hocs = [withRouter];\n  const hasSettings = perCapitaSwitch || stackedSwitch;\n\n  if (hasSettings) {\n    hocs.push(\n      withStateHandlers(\n        ({ defaultPerCapita = false, defaultStacked = false }) => ({\n          perCapita: defaultPerCapita,\n          stacked: defaultStacked,\n        }),\n        {\n          setPerCapita: () => perCapita => ({ perCapita }),\n          setStacked: () => stacked => ({ stacked }),\n        },\n      ),\n    );\n  }\n  hocs.push(withCountryStatistics(mapOfCountryStatisticsSelector));\n\n  return function buildChartWrapper(WrappedChart) {\n    return compose(...hocs)(\n      class ChartWrapper extends Component {\n        constructor() {\n          super();\n          this.chartRef = React.createRef();\n          this.buttonRef = React.createRef();\n        }\n\n        render() {\n          const {\n            title,\n            description,\n            statistics,\n            statisticSources,\n            height,\n            perCapita = false,\n            stacked = false,\n            setPerCapita,\n            setStacked,\n            data,\n            withReference,\n            referenceCountryCode,\n            location,\n          } = this.props;\n          const statisticList = values(statistics);\n          const statistic = statisticList[0];\n          const finalHeight = options.height || height || defaultHeight;\n          const id = (title\n            ? title.replace(/ /g, '_')\n            : statistic.name.replace(/ /g, '_')\n          ).toLowerCase();\n\n          const descriptionStatistic = statisticList.find(\n            s => s.code === description,\n          );\n          const finalDescription =\n            statisticList.length < 2\n              ? description || statistic.description\n              : (descriptionStatistic && descriptionStatistic.description) ||\n                description;\n          const hash = location.hash.substr(1);\n          const style =\n            hash === id\n              ? {\n                  boxShadow: '0px 0px 10px 1px rgba(0,0,0,0.5)',\n                }\n              : {};\n\n          return (\n            <div\n              id={id}\n              className=\"ChartWrapper\"\n              ref={this.chartRef}\n              style={style}\n            >\n              <div className=\"ChartWrapper__header\">\n                <div className=\"ChartWrapper__header__left\">\n                  <span className=\"ChartWrapper__title\">\n                    {title || statistic.name}\n                  </span>\n                  <span className=\"ChartWrapper__title__unit\">\n                    {` (${displayUnit(statistic.unit, perCapita)})`}\n                  </span>\n                </div>\n                <div\n                  className=\"ChartWrapper__header__right\"\n                  data-html2canvas-ignore\n                >\n                  <ShareChartComponent\n                    id={id}\n                    chartRef={this.chartRef}\n                    statistics={{ year: { code: 'YEAR' }, ...statistics }}\n                    data={data}\n                    {...(withReference\n                      ? {\n                          query: `?${qs.stringify({\n                            referenceCountry: referenceCountryCode,\n                          })}`,\n                        }\n                      : {})}\n                  />\n                  <StatisticDetails\n                    statisticSources={statisticSources}\n                    description={finalDescription}\n                  />\n                  {hasSettings && (\n                    <div>\n                      <Popover\n                        title=\"Settings\"\n                        arrowPointAtCenter\n                        content={\n                          // eslint-disable-next-line react/jsx-wrap-multilines\n                          <ChartSettings\n                            perCapitaSwitch={perCapitaSwitch}\n                            stackedSwitch={stackedSwitch}\n                            stacked={stacked}\n                            perCapita={perCapita}\n                            setPerCapita={setPerCapita}\n                            setStacked={setStacked}\n                          />\n                        }\n                        placement=\"bottomRight\"\n                      >\n                        <Button size=\"small\">\n                          <Icon type=\"setting\" theme=\"filled\" />\n                        </Button>\n                      </Popover>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <WrappedChart\n                {...this.props}\n                height={finalHeight}\n                perCapita={perCapita}\n                stacked={stacked}\n              />\n              <div className=\"ChartWrapper__footer toPng\">\n                From http://worldenergydata.tk - Sources: IEA, World Bank\n              </div>\n            </div>\n          );\n        }\n      },\n    );\n  };\n}\n\nexport default buildChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label, displayFilter, totalFilter, units } = props;\n    const filteredPayload = payload.filter(displayFilter);\n\n    if (filteredPayload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload\n      .filter(totalFilter)\n      .reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = filteredPayload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {filteredPayload.map((p, i) => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey || name} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit || units[i]}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  withTotal: PropTypes.bool,\n  displayFilter: PropTypes.func,\n  totalFilter: PropTypes.func,\n  units: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  withTotal: false,\n  displayFilter: i => i,\n  totalFilter: i => i,\n  units: {},\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  Legend,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const {\n    data,\n    statistics,\n    color,\n    perCapita,\n    height,\n    country,\n    referenceCountry,\n    withReference,\n  } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n  const withComparison = withReference && (perCapita || statistic.isIntensive);\n\n  return (\n    <div className=\"BasicChart\">\n      <ResponsiveContainer height={height}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={country.commonName}\n            unit={` ${unit}`}\n          />\n          {withComparison && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reference\"\n              stroke=\"red\"\n              strokeWidth={3}\n              dot={false}\n              name={referenceCountry.commonName}\n              unit={` ${unit}`}\n            />\n          )}\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={props2 => <CustomTooltip {...props2} />} />\n          {withComparison && <Legend iconType=\"circle\" />}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n  withReference: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  country: CountryType.isRequired,\n  referenceCountry: CountryType.isRequired,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n  withReference: false,\n};\n\nexport default BasicChart;\n","import buildChart from '../../../HOC/buildChart';\nimport BasicChart from '../components/BasicChart';\n\nexport default buildChart()(BasicChart);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction GeoJSONMap(props) {\n  const { geojson, center } = props;\n\n  return (\n    <div className=\"GeoJSONMap\">\n      <Map\n        center={center}\n        zoom={2}\n        zoomDelta={0}\n        zoomSnap={0}\n        boxZoom={false}\n        doubleClickZoom={false}\n        scrollWheelZoom={false}\n        zoomControl={false}\n        dragging={false}\n        style={{ height: '300px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {geojson && <GeoJSON data={geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nGeoJSONMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  geojson: PropTypes.object.isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default GeoJSONMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data, height } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={dataWithImportAndExport}>\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                displayFilter={p => p.name !== 'base'}\n              />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\n\nfunction GDPByEnergyChart(props) {\n  const { data, color, statistics } = props;\n  // const statistic = statistics.value;\n  // const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"GDPByEnergyChart\">\n      <ResponsiveContainer height={300}>\n        <ScatterChart data={data} margin={{ bottom: 50 }}>\n          <Scatter\n            fill={color}\n            shape={props2 => (\n              <circle cx={props2.cx} cy={props2.cy} r={3} fill={color} />\n            )}\n            line\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"energy\"\n            name={statistics.energy.name}\n            type=\"number\"\n            domain={[\n              dataMin => Math.floor(0.95 * dataMin),\n              dataMax => Math.ceil(1.05 * dataMax),\n            ]}\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.energy.name} (${\n                statistics.energy.unit.main\n              })`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"gdp\"\n            name={statistics.gdp.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.year\n                }\n                units={{\n                  '0': statistics.energy.unit.main,\n                  '1': statistics.gdp.unit.main,\n                }}\n              />\n            )}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nGDPByEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      gdp: PropTypes.number,\n      energy: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    gdp: StatisticType,\n    energy: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  color: PropTypes.string,\n};\n\nGDPByEnergyChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default GDPByEnergyChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport buildChart from '../../../HOC/buildChart';\nimport ProdConsoChart from './ProdConsoChart';\nimport GDPByEnergyChart from './GDPByEnergyChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst ProdConsoChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: (state, props) => ({\n    prod: props.prodStatisticCode,\n    conso: props.consoStatisticCode,\n  }),\n})(ProdConsoChart);\n\nconst GDPByEnergyChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    gdp: 'GDP_2010_USD',\n    energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n  },\n})(GDPByEnergyChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode, fuelProducedOrConsumed } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <h3>Imports/Exports</h3>\n        {fuelProducedOrConsumed.coal && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n              fuel=\"Coal\"\n              title=\"Coal Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.oil && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n              fuel=\"Oil\"\n              title=\"Oil Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.gas && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n              consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n              fuel=\"Gas\"\n              title=\"Gas Trade\"\n            />\n          </Col>\n        )}\n      </Row>\n      <Row>\n        <h3>Energy/GDP coupling</h3>\n        <Col md={16} sm={24}>\n          <GDPByEnergyChartContainer\n            countryCode={countryCode}\n            title=\"GDP according to primary energy\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  fuelProducedOrConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { values, mapObjIndexed } from 'ramda';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport color from 'onecolor';\n\nimport { getNiceTickValues } from 'recharts-scale';\nimport { tickFormatter, displayUnit, clickHandlers } from '../../../utils';\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nconst FILL_OPACITY = 0.7;\nconst REFERENCE_DATAKEY = 'reference'; // TODO in selectors\nconst defaultLineAreaProps = {\n  type: 'monotone',\n  dot: false,\n  activeDot: false,\n  fillOpacity: FILL_OPACITY,\n  isAnimationActive: false,\n};\n\nconst lineAreaPropsMap = {\n  coal: { name: 'Coal', color: 'black' },\n  oil: { name: 'Oil', color: 'grey' },\n  gas: { name: 'Gas', color: 'orange' },\n  nuclear: { name: 'Nuclear', color: 'purple' },\n  hydro: { name: 'Hydroelectricity', color: 'blue' },\n  biofuelsWaste: { name: 'Biofuels & Waste', color: 'saddlebrown' },\n  solarWindTideGeoth: { name: 'Geothermy, Wind, Solar & Tide', color: 'green' },\n};\n\nconst legendPayload = values(\n  mapObjIndexed((p, key) => ({ ...p, dataKey: key }), lineAreaPropsMap),\n).map(props => ({\n  dataKey: props.dataKey,\n  value: props.name,\n  type: 'circle',\n  inactive: false,\n  color: color(props.color)\n    .alpha(FILL_OPACITY)\n    .cssa(),\n}));\n\nfunction getLegendPayload({\n  fuelConsumed,\n  displayedStats,\n  perCapita,\n  referenceCountry,\n}) {\n  return legendPayload\n    .filter(payload => fuelConsumed[payload.dataKey])\n    .map(payload => ({\n      ...payload,\n      inactive: !displayedStats.includes(payload.dataKey),\n    }))\n    .concat(\n      perCapita\n        ? [\n            {\n              dataKey: REFERENCE_DATAKEY,\n              value: referenceCountry.commonName,\n              color: 'red',\n              type: 'circle',\n              inactive: !displayedStats.includes(REFERENCE_DATAKEY),\n            },\n          ]\n        : [],\n    );\n}\n\nfunction getTicksAndDomain({ data, perCapita, displayedStats, stacked }) {\n  const displayedFuels = displayedStats.filter(s => s !== REFERENCE_DATAKEY);\n  const withReference = perCapita && displayedStats.includes(REFERENCE_DATAKEY);\n  const max = Math.max(\n    ...(stacked\n      ? data.map(d => displayedFuels.reduce((sum, k) => sum + d[k], 0))\n      : data.map(d => Math.max(...displayedFuels.map(k => d[k])))),\n    ...(withReference ? data.map(d => d.reference) : []),\n  );\n\n  const chartMax = max * 1.05;\n  const ticks = getNiceTickValues([0, chartMax], 5, true);\n\n  if (ticks[3] > chartMax) {\n    ticks.pop();\n  }\n  const domain = [0, ticks[ticks.length - 1]];\n  return { domain, ticks };\n}\n\nfunction EnergyMixChart(props) {\n  const {\n    data,\n    stacked,\n    perCapita,\n    fuelConsumed,\n    statistics,\n    referenceCountry,\n    displayedStats,\n    toggleStat,\n    setDisplayedStats,\n  } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n  const lineAreaProps = stacked\n    ? { stackId: '1', unit, ...defaultLineAreaProps }\n    : { strokeWidth: 2, unit, ...defaultLineAreaProps };\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart data={data}>\n          {displayedStats\n            .filter(s => s !== REFERENCE_DATAKEY)\n            .map(fuel => {\n              const fuelProps = lineAreaPropsMap[fuel];\n              return (\n                <LineArea\n                  key={fuel}\n                  {...lineAreaProps}\n                  dataKey={fuel}\n                  name={fuelProps.name}\n                  stroke={fuelProps.color}\n                  fill={fuelProps.color}\n                />\n              );\n            })}\n          {perCapita && displayedStats.includes(REFERENCE_DATAKEY) && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reference\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n              name={referenceCountry.commonName}\n              stroke=\"red\"\n              unit={unit}\n              isAnimationActive={false}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            tickFormatter={tickFormatter}\n            {...getTicksAndDomain({\n              data,\n              perCapita,\n              displayedStats,\n              stacked,\n            })}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={p => p.dataKey !== REFERENCE_DATAKEY}\n              />\n            )}\n          />\n          <Legend\n            iconType=\"circle\"\n            onClick={clickHandlers({\n              onClick: ({ dataKey }) => toggleStat(dataKey),\n              onDoubleClick: ({ dataKey }) => setDisplayedStats([dataKey]),\n            })}\n            payload={getLegendPayload({\n              fuelConsumed,\n              displayedStats,\n              perCapita,\n              referenceCountry,\n            })}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  fuelConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  referenceCountry: CountryType.isRequired,\n  toggleStat: PropTypes.func.isRequired,\n  setDisplayedStats: PropTypes.func.isRequired,\n  displayedStats: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default EnergyMixChart;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { sortBy } from 'ramda';\n\nimport buildChart from '../../../HOC/buildChart';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport { fuelConsumedCountrySelector } from '../../../store/countries';\n\nclass EnergyMixChartWithState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      displayedStats: [],\n    };\n    this.toggleStat = this.toggleStat.bind(this);\n    this.setDisplayedStats = this.setDisplayedStats.bind(this);\n    this.initDone = false;\n  }\n\n  componentDidMount() {\n    this.init(this.props);\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { countryCode, data } = this.props;\n    if (\n      newProps.countryCode !== countryCode ||\n      (data.length !== newProps.data.length && !this.initDone)\n    ) {\n      this.init(newProps);\n    }\n  }\n\n  setDisplayedStats(displayedStats) {\n    this.setState({\n      displayedStats,\n    });\n  }\n\n  init({ data, fuelConsumed }) {\n    this.initDone = true;\n    this.setState({\n      displayedStats: sortBy(\n        fuel => -Math.max(...data.map(d => d[fuel])),\n        Object.keys(fuelConsumed).filter(fuel => fuelConsumed[fuel]),\n      ).concat(['reference']),\n    });\n  }\n\n  toggleStat(toggledStat) {\n    const { displayedStats } = this.state;\n    this.setState({\n      displayedStats: displayedStats.includes(toggledStat)\n        ? displayedStats.filter(d => d !== toggledStat)\n        : [...displayedStats, toggledStat],\n    });\n  }\n\n  render() {\n    return (\n      <EnergyMixChart\n        {...this.props}\n        {...this.state}\n        toggleStat={this.toggleStat}\n        setDisplayedStats={this.setDisplayedStats}\n      />\n    );\n  }\n}\n\nconst EnergyMixChartBuilded = buildChart({\n  perCapitaSwitch: true,\n  stackedSwitch: true,\n})(EnergyMixChartWithState);\n\nconst EnergyMixChartContainer = connect((state, { countryCode }) => ({\n  fuelConsumed: fuelConsumedCountrySelector(countryCode, state),\n}))(EnergyMixChartBuilded);\n\nexport default EnergyMixChartContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { sortBy } from 'ramda';\n\nimport { Select } from 'antd';\n\nimport { CountryType } from '../../../utils/types';\n\nfunction SettingsComponent(props) {\n  const { countries, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"SettingComponent\">\n      {'Compare to : '}\n      <Select\n        value={referenceCountryCode}\n        placeholder=\"Select a country or a zone\"\n        optionFilterProp=\"title\"\n        showSearch\n        style={{ width: '250px' }}\n        onSelect={countryCode => setReferenceCountry(countryCode)}\n      >\n        {sortBy(c => c.commonName, countries).map(country => (\n          <Select.Option\n            key={country.alpha2Code}\n            disabled={country.disabled}\n            title={`${country.commonName} (${country.alpha3Code})`}\n          >\n            {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n          </Select.Option>\n        ))}\n      </Select>\n    </div>\n  );\n}\n\nSettingsComponent.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default SettingsComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\nimport SettingsComponent from './SettingsComponent';\nimport { countriesAndAreasSelector } from '../../../store/otherSelectors';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nconst ConnectedSettingsComponent = connect(state => ({\n  countries: countriesAndAreasSelector(state),\n}))(SettingsComponent);\n\nfunction SummaryTab(props) {\n  const { countryCode, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <Row>\n        <Col md={24} sm={24}>\n          <ConnectedSettingsComponent\n            setReferenceCountry={setReferenceCountry}\n            referenceCountryCode={referenceCountryCode}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={24} sm={24}>\n          <EnergyMixChartContainer\n            title=\"Primary energy consumption\"\n            description=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            countryCode={countryCode}\n            mapOfCountryStatistics={primaryMap}\n            withReference={primaryReference}\n            referenceCountryCode={referenceCountryCode}\n            defaultPerCapita\n            defaultStacked\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={24} sm={24}>\n          <EnergyMixChartContainer\n            title=\"Electricity generation by fuels\"\n            description=\"ELECTRICITY_GENERATION_TWH\"\n            countryCode={countryCode}\n            mapOfCountryStatistics={electrictyMap}\n            withReference={electricityReference}\n            referenceCountryCode={referenceCountryCode}\n            defaultPerCapita\n            defaultStacked\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\nimport SettingsComponent from './SettingsComponent';\n\nimport { countriesAndAreasSelector } from '../../../store/otherSelectors';\n\nconst ConnectedSettingsComponent = connect(state => ({\n  countries: countriesAndAreasSelector(state),\n}))(SettingsComponent);\n\nfunction ClimateTab(props) {\n  const { countryCode, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row>\n        <Col md={24} sm={24}>\n          <ConnectedSettingsComponent\n            setReferenceCountry={setReferenceCountry}\n            referenceCountryCode={referenceCountryCode}\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"FOSSIL_CO2_EMISSIONS_MT\"\n            perCapita\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            perCapita\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_INTENSITY_OF_ENERGY\"\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nfunction ReservesAndPeaksTab(props) {\n  const { countryCode, referenceCountryCode, fuelProduced } = props;\n  return (\n    <div className=\"ReservesAndPeaksTab\">\n      <Row gutter={20}>\n        <h2>Productions</h2>\n        {fuelProduced.coal && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"COAL_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n        {fuelProduced.oil && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"OIL_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n        {fuelProduced.gas && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"GAS_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n      </Row>\n      <Row gutter={20}>\n        <h2>Reserves</h2>\n        {fuelProduced.coal && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"COAL_RESERVES_GT\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n        {fuelProduced.oil && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"OIL_RESERVES_BB\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n        {fuelProduced.gas && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"GAS_RESERVES_BCM\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n      </Row>\n    </div>\n  );\n}\n\nReservesAndPeaksTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n  fuelProduced: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default ReservesAndPeaksTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Card } from 'antd';\n\nimport {\n  fuelProducedOrConsumedCountrySelector,\n  fuelProducedCountrySelector,\n} from '../../../store/countries';\n\nimport IndependencyTab from './IndependencyTab';\nimport SummaryTab from './SummaryTab';\nimport ClimateTab from './ClimateTab';\nimport ReservesAndPeaksTab from './ReservesAndPeaksTab';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n  { key: 'reserves', tab: 'Reserves and peaks' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst ReservesAndPeaksTabContainer = connect((state, props) => ({\n  fuelProduced: fuelProducedCountrySelector(props.countryCode, state),\n}))(ReservesAndPeaksTab);\n\nconst tabContents = {\n  summary: SummaryTab,\n  independency: IndependencyTabContainer,\n  climate: ClimateTab,\n  reserves: ReservesAndPeaksTabContainer,\n};\n\nfunction TabsComponent(props) {\n  const {\n    currentTab,\n    countryCode,\n    onTabChange,\n    setReferenceCountry,\n    referenceCountryCode,\n  } = props;\n  const TabComponent = tabContents[currentTab];\n  return (\n    <Card\n      key={currentTab}\n      tabList={tabList}\n      activeTabKey={currentTab}\n      onTabChange={onTabChange}\n    >\n      <TabComponent\n        countryCode={countryCode}\n        setReferenceCountry={setReferenceCountry}\n        referenceCountryCode={referenceCountryCode}\n      />\n    </Card>\n  );\n}\n\nTabsComponent.propTypes = {\n  currentTab: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  onTabChange: PropTypes.func.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default TabsComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { withState } from 'recompose';\nimport qs from 'qs';\n\nimport { Row, Col, Card } from 'antd';\n\nimport { countryWithAreasSelector } from '../../store/otherSelectors';\n\nimport { CountryType } from '../../utils/types';\nimport { isMobileOrTablet } from '../../utils';\n\nimport BasicChartContainer from './containers/BasicChartContainer';\n\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport ScrollToTop from '../../components/ScrollToTop';\nimport TabsComponent from './components/TabsComponent';\n\nconst TabsComponentWithState = withState(\n  'referenceCountryCode',\n  'setReferenceCountry',\n  props => props.referenceCountry,\n)(TabsComponent);\n\nfunction CountryView(props) {\n  const { country, goTo, currentTab, referenceCountry } = props;\n\n  if (!country || country.disabled) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const countryCode = country.alpha2Code;\n  const flag = isMobileOrTablet() ? country.flagIcon : '';\n  return (\n    <div className=\"CountryView\">\n      <ScrollToTop countryCode={countryCode} />\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n            <div>{`Capital: ${country.capital}`}</div>\n            <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n            <div>\n              {`Member of: `}\n              {country.areas.map((area, i) => (\n                <Link key={area.code} to={`/area/${area.code}`}>\n                  {`${i > 0 ? ', ' : ''}${area.name}`}\n                </Link>\n              ))}\n            </div>\n            <Row style={{ marginTop: '20px' }} gutter={20}>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"POPULATION\"\n                  countryCode={countryCode}\n                  color=\"#2c82c9\"\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"GDP_2010_USD\"\n                  countryCode={countryCode}\n                  color=\"#f22613\"\n                  perCapita\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <img\n            key={countryCode}\n            style={{\n              width: '100%',\n              marginBottom: '20px',\n              maxHeight: '180px',\n            }}\n            src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n            alt={`Flag of ${country.commonName}`}\n          />\n          <GeoJSONMap geojson={country.geojson} center={country.latlng} />\n        </Col>\n      </Row>\n      <Row>\n        <TabsComponentWithState\n          countryCode={countryCode}\n          currentTab={currentTab}\n          onTabChange={tab => goTo(`/country/${countryCode}/${tab}`)}\n          referenceCountry={referenceCountry}\n        />\n      </Row>\n    </div>\n  );\n}\n\nCountryView.propTypes = {\n  currentTab: PropTypes.string,\n  country: CountryType,\n  goTo: PropTypes.func.isRequired,\n  referenceCountry: PropTypes.string,\n};\nCountryView.defaultProps = {\n  currentTab: 'summary',\n  country: null,\n  referenceCountry: 'WORLD',\n};\n\nexport default connect((state, props) => ({\n  currentTab: props.match.params.tab,\n  goTo: url => props.history.push(url),\n  country: countryWithAreasSelector(props.match.params.countryCode, state),\n  referenceCountry: qs.parse(props.location.search.substr(1)).referenceCountry,\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { withState } from 'recompose';\nimport qs from 'qs';\n\nimport { Row, Col, Card } from 'antd';\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport ScrollToTop from '../../components/ScrollToTop';\n\nimport { areaWithCountriesSelector } from '../../store/otherSelectors';\nimport { AreaType } from '../../utils/types';\n\nimport BasicChartContainer from '../CountryView/containers/BasicChartContainer';\nimport TabsComponent from '../CountryView/components/TabsComponent';\n\nconst TabsComponentWithState = withState(\n  'referenceCountryCode',\n  'setReferenceCountry',\n  props => props.referenceCountry,\n)(TabsComponent);\n\nfunction AreaView(props) {\n  const { area, currentTab, goTo, referenceCountry } = props;\n  const latlng = [\n    area.countries.reduce((s, c) => c.latlng[0] + s, 0) / area.countries.length,\n    area.countries.reduce((s, c) => c.latlng[1] + s, 0) / area.countries.length,\n  ];\n\n  if (!area) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"AreaView\">\n      <ScrollToTop areaCode={area.code} />\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <Card title={<h2>{`${area.name}`}</h2>}>\n            {area.code !== 'WORLD' && (\n              <div>\n                {`Members : `}\n                {area.countries.map((country, i) => (\n                  <Link\n                    key={country.alpha2Code}\n                    to={`/country/${country.alpha2Code}`}\n                  >\n                    {`${i > 0 ? ', ' : ''}${country.commonName}`}\n                  </Link>\n                ))}\n              </div>\n            )}\n            <Row style={{ marginTop: '20px' }} gutter={10}>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"POPULATION\"\n                  countryCode={area.code}\n                  color=\"#2c82c9\"\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"GDP_2010_USD\"\n                  countryCode={area.code}\n                  color=\"#f22613\"\n                  perCapita\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <GeoJSONMap geojson={area.geojson} center={latlng} />\n        </Col>\n      </Row>\n      <Row>\n        <TabsComponentWithState\n          countryCode={area.code}\n          currentTab={currentTab}\n          onTabChange={tab => goTo(`/area/${area.code}/${tab}`)}\n          referenceCountry={referenceCountry}\n        />\n      </Row>\n    </div>\n  );\n}\n\nAreaView.propTypes = {\n  area: AreaType.isRequired,\n  currentTab: PropTypes.string,\n  goTo: PropTypes.func.isRequired,\n  referenceCountry: PropTypes.string,\n};\n\nAreaView.defaultProps = {\n  currentTab: 'summary',\n  referenceCountry: 'WORLD',\n};\n\nexport default connect((state, props) => ({\n  currentTab: props.match.params.tab,\n  goTo: url => props.history.push(url),\n  area: areaWithCountriesSelector(props.match.params.areaCode, state),\n  referenceCountry: qs.parse(props.location.search.substr(1)).referenceCountry,\n}))(AreaView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType, AreaType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, areas, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Select a country\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.SubMenu title=\"Areas\">\n        {sortBy(a => a.name, areas).map(area => (\n          <Menu.Item key={area.code}>\n            <Link to={`/area/${area.code}`}>{area.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu.SubMenu>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  areas: PropTypes.arrayOf(AreaType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  Route, // as BaseRoute,\n  Switch,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\nimport AreaView from '../views/AreaView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\nimport {\n  loadAllAreas,\n  areasLoadedSelector,\n  areasSelector,\n} from '../store/areas';\nimport { LocationType } from '../utils/types';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\nconst AreasLoader = buildLoader(loadAllAreas);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    areas: areasSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction scrollToAnchor(location) {\n  const { hash } = location;\n\n  if (hash !== '') {\n    const id = hash.substr(1);\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'nearest',\n      });\n    }\n  }\n}\n\nclass AppLayout extends Component {\n  componentDidMount() {\n    const { location } = this.props;\n    window.onhashchange = () => scrollToAnchor(location);\n  }\n\n  componentDidUpdate() {\n    const { location } = this.props;\n    scrollToAnchor(location);\n  }\n\n  render() {\n    const { isLoaded } = this.props;\n    return (\n      <div className=\"AppLayout\">\n        <CountriesLoader />\n        <StatisticsLoader />\n        <AreasLoader />\n        <Spin size=\"large\" spinning={!isLoaded}>\n          <Layout>\n            <Layout.Header\n              style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n            >\n              <ConnectedHeaderMenu />\n            </Layout.Header>\n            <Layout.Content>\n              {!isLoaded && <div className=\"AppLayout__splash\" />}\n              {isLoaded && (\n                <Switch>\n                  <Route path=\"/home\" exact component={HomeView} />\n                  <Route\n                    path=\"/country/:countryCode/:tab?\"\n                    exact\n                    component={CountryView}\n                  />\n                  <Route\n                    path=\"/area/:areaCode/:tab?\"\n                    exact\n                    component={AreaView}\n                  />\n                  <Route path=\"/about\" exact component={AboutView} />\n                  <Route\n                    component={() => <Redirect to={{ pathname: '/home' }} />}\n                  />\n                </Switch>\n              )}\n            </Layout.Content>\n            <Layout.Footer>Sources: IEA, World Bank</Layout.Footer>\n          </Layout>\n        </Spin>\n      </div>\n    );\n  }\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n  location: LocationType.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded:\n      countriesLoadedSelector(state) &&\n      statisticsLoadedSelector(state) &&\n      areasLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}