{"version":3,"sources":["api/countries.js","store/countries.js","api/helpers.js","api/statistics.js","store/statistics.js","store/index.js","utils/types.js","utils/index.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","utils/chartHelpers.js","views/CountryView/components/PrimaryEnergyChart.jsx","views/CountryView/containers/PrimaryEnergyChartContainer.jsx","views/CountryView/components/CountryMap.jsx","views/CountryView/components/BasicChart.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["countryMapValues","country","a","worldTopo","objects","countries","geometries","find","c","id","numericCode","Object","objectSpread","geojson","feature","_callee","res","regenerator_default","wrap","_context","prev","next","fetch","sent","json","abrupt","map","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","receiveCountriesAction","_ref","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","dependentCountriesSelector","countrySelector","countryCode","countriesReducer","arguments","length","undefined","action","fetchJSON","url","options","then","derivedStatistics","code","name","description","unit","main","base","factor","source","consumption","production","startingYear","endingYear","sourceAttribution","isIntensive","compute","energy","gdp","_ref2","Math","pow","co2","_ref3","derivedCodes","d","computeDerivedValueFromCompiled","statistic","_ref4","year","sources","objectWithoutProperties","value","Number","isNaN","isFinite","statisticCode","_ref7","sourceNames","statisticValues","mapOfNamedStatisticValues","allValues","allValuesByYear","derivedStatisticValues","stat","keys","Promise","all","sourceName","getStatisticOfCountry","index","_ref5","defineProperty","concat","apply","toConsumableArray","groupBy","sort","mergeAll","includes","getDerivedStatisticOfCountry","_callee2","_ref10","allValuesByYearAndCountry","_context2","getStatisticOfAllCountries","_ref8","countryYearValues","getDerivedStatisticOfAllCountries","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","initialCountryStatistic","countryStatisticReducer","countryStatistic","omit","statisticsLoadedSelector","statistics","allStatisticsSelector","statisticSelector","countryStatisticSelector","countryStatisticLoadedSelector","countryStatisticsLoadedSelector","statisticCodes","every","statisticOfAllCountriesLoadedSelector","alpha2Code","compiledCountryStatisticsSelector","_ref9","_ref13","mapOfCountryStatistics","perCapita","parsedMapOfCountryStatistics","defaultCountry","parsed","countryCodes","uniq","populations","parseMapOfStatistics","mapOfStatistic","mapOfStatisticValues","_ref6","countryStatisticValuesSelector","_computeYearInterval","arrayOfStatisticValues","startingYears","min","v","endingYears","max","computeYearInterval","_computeYearInterval2","slicedToArray","mapObjIndexed","compileName","_ref11","compiledValue","popCompileName","population","populationFactor","computeValue","compiledStatisticForCountriesAndYear","_ref14","push","yearValue","loadCountryStatistic","_ref15","dispatch","getState","loadCountryStatisticAction","statisticValue","catch","loadCountryStatistics","_ref16","statisticsReducer","reduce","acc","WORLD","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","area","number","latlng","arrayOf","object","bool","coordsToLatLng","coords","_coords","longitude","latitude","L","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","toPrecision","toLocaleString","MAP_HEIGHT","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","dependentCountries","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","indexBy","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","dragging","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","background","backgroundColor","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","formatedData","s","es_select","width","placeholder","optionFilterProp","showSearch","onChange","sortBy","Option","title","slider","defaultValue","onAfterChange","debounce","included","marks","label","margin","left","right","es_radio","Group","marginBottom","buttonStyle","size","e","target","Button","disabled","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","href","defaultSortOrder","align","onRow","record","onClick","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","loadStatisticOfCountriesAction","tickFormatter","CustomTooltip","active","payload","payloadWithoutWorld","p","dataKey","worldPrimary","total","sum","lineHeight","defaultProps","PrimaryEnergyChart","stacked","setStacked","dataWithTotal","coal","oil","gas","hydro","nuclear","renewables","toFixed","hasCoal","some","hasOil","hasGas","hasNuclear","hasHydro","hasRenewables","LineArea","Area","Line","marginRight","ResponsiveContainer","ComposedChart","top","bottom","dot","activeDot","stroke","fill","stackId","CartesianGrid","opacity","XAxis","interval","YAxis","angle","position","component_Tooltip","content","Legend","iconType","mapOfStatistics","worldReferences","ConnectedPrimaryEnergyChart","PrimaryEnergyChartContainer","_this$props","loadStatistics","prevProps","_this$props2","_this$props3","spin","spinning","containers_PrimaryEnergyChartContainer","CustomGeoJSON","createGeoJSON","remove","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","CountryMap","TileLayer","attribution","CountryMap_GeoJSON","BasicChart","LineChart","strokeWidth","padding","Loader","load","prevOtherProps","otherProps","equals","buildLoader","loadFunction","StatisticsLoader","withCountryStatistic","mapOfCountryStatisticsSelector","WrappedComponent","withCountryStatistics","PopulationChart","GDPChart","SelfSufficiencyChart","CO2EmissionChart","SummaryTab","sm","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","console","warn","dataWithImportAndExport","l","diff","export","import","strokeOpacity","offset","props2","ProdConsoChart_CustomTooltip","assign","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","IndependencyTab","ClimateTab","StatisticContainer","tabList","tab","tabContent","summary","components_SummaryTab","independency","components_IndependencyTab","climate","components_ClimateTab","CountryView","currentTab","tabKey","Redirect","to","xs","card","maxHeight","src","toLowerCase","alt","components_CountryMap","activeTabKey","onTabChange","setTab","match","params","AboutView","rel","GitHubLink","icon","theme","HeaderMenu","goTo","menu","mode","selectable","Item","Link","onSelect","components_GitHubLink","CountriesLoader","prop","ConnectedHeaderMenu","withRouter","AppLayout_StatisticsLoader","layout","Header","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12a50387.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport worldTopo from 'world-atlas/world/110m.json';\n\nfunction countryMapValues(country) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  return {\n    ...country,\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nasync function getAllCountries() {\n  const res = await fetch('/data/countries.json');\n  const countries = await res.json();\n  return countries.map(countryMapValues);\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport default countriesReducer;\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","import { values, groupBy, mergeAll } from 'ramda';\nimport { fetchJSON } from './helpers';\n\nconst PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\n// const MTOE_UNIT = {\n//   main: 'Mtoe',\n//   base: 'toe',\n//   factor: 10 ** 6,\n// };\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description: '',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description: '',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    isIntensive: true,\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  // ...['COAL', 'OIL', 'GAS'].map(fuel => ({ TODO bicolors\n  //   code: `${fuel}_TRADE`,\n  //   name: `Trade of ${fuel.toLowerCase()}`,\n  //   description: '',\n  //   unit: MTOE_UNIT,\n  //   source: {\n  //     prod: `${fuel}_PRODUCTION_MTOE`,\n  //     conso: `${fuel}_CONSUMPTION_MTOE`,\n  //   },\n  //   startingYear: 1973,\n  //   endingYear: 2016,\n  //   sourceAttribution: 'IEA, World Bank',\n  //   isIntensive: true,\n  //   compute({ prod, conso }) {\n  //     return conso - prod;\n  //   },\n  // })),\n];\nconst derivedCodes = derivedStatistics.map(d => d.code);\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, countryCode, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, countryCode, value: null }\n      : { year, countryCode, value };\n  };\n}\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nasync function getDerivedStatisticOfCountry(statisticCode, countryCode) {\n  const statistic = derivedStatistics.find(stat => stat.code === statisticCode);\n  const sourceNames = Object.keys(statistic.source);\n\n  const statisticValues = await Promise.all(\n    sourceNames.map(sourceName =>\n      // eslint-disable-next-line no-use-before-define\n      getStatisticOfCountry(statistic.source[sourceName], countryCode),\n    ),\n  );\n\n  const mapOfNamedStatisticValues = sourceNames.map((sourceName, index) =>\n    statisticValues[index].map(({ year, value }) => ({\n      year,\n      [sourceName]: value,\n    })),\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const derivedStatisticValues = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(computeDerivedValueFromCompiled(statistic));\n\n  return derivedStatisticValues;\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  if (derivedCodes.includes(statisticCode)) {\n    return getDerivedStatisticOfCountry(statisticCode, countryCode);\n  }\n\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nasync function getDerivedStatisticOfAllCountries(statisticCode) {\n  const statistic = derivedStatistics.find(stat => stat.code === statisticCode);\n  const sourceNames = Object.keys(statistic.source);\n\n  const statisticValues = await Promise.all(\n    sourceNames.map(sourceName =>\n      // eslint-disable-next-line no-use-before-define\n      getStatisticOfAllCountries(statistic.source[sourceName]),\n    ),\n  );\n\n  const mapOfNamedStatisticValues = sourceNames.map((sourceName, index) =>\n    statisticValues[index].map(({ year, value, countryCode }) => ({\n      year,\n      countryCode,\n      [sourceName]: value,\n    })),\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYearAndCountry = groupBy(\n    value => `${value.countryCode}${value.year}`,\n    allValues,\n  );\n\n  const derivedStatisticValues = values(allValuesByYearAndCountry)\n    .map(countryYearValues => mergeAll(countryYearValues))\n    .map(computeDerivedValueFromCompiled(statistic));\n\n  return derivedStatisticValues;\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  if (derivedCodes.includes(statisticCode)) {\n    return getDerivedStatisticOfAllCountries(statisticCode);\n  }\n\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import {\n  values,\n  indexBy,\n  prop,\n  mapObjIndexed,\n  mergeAll,\n  groupBy,\n  map,\n  omit,\n  uniq,\n} from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfCountry,\n  getStatisticOfAllCountries,\n} from '../api/statistics';\nimport { countriesSelector } from './countries';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(\n  { statisticCodes, countryCode },\n  state,\n) {\n  return statisticCodes.every(statisticCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (!value || (!population && perCapita)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction parseMapOfStatistics(\n  mapOfCountryStatistics,\n  defaultCountry,\n  perCapita,\n) {\n  const parsed = map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n  const countryCodes = uniq(values(parsed).map(d => d.countryCode));\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...(perCapita ? populations : {}),\n    ...parsed,\n  };\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfCountryStatistics, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    parsedMapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    parsedMapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .filter(value => startingYear <= value.year && value.year <= endingYear)\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          parsedMapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year', 'pop'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics({ statisticCodes, countryCode }) {\n  return function dispatchloadCountryStatistics(dispatch, getState) {\n    return Promise.all(\n      statisticCodes.map(statisticCode =>\n        loadCountryStatistic({ statisticCode, countryCode })(\n          dispatch,\n          getState,\n        ),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const countries = countriesSelector(getState());\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        getState(),\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n\nexport default statisticsReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n","import L from 'leaflet';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { coordsToLatLng, isMobileOrTablet, formatNumber } from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value: 'NA' };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value: 0 };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n  } = props;\n  const maxValue = Math.max(\n    ...data.filter(d => d.countryCode !== 'WORLD').map(d => d.value),\n  );\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: 'white',\n                  weight: 0.5,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(value)}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div className=\"WorldMap__legend__gradient\">\n          <div>\n            {`${currentStatistic.name} (${\n              perCapita\n                ? `${currentStatistic.unit.base}/capita`\n                : currentStatistic.unit.main\n            })`}\n          </div>\n          <div\n            className=\"WorldMap__legend__gradientColor\"\n            style={{\n              background: colorGradient,\n            }}\n          />\n          <div className=\"WorldMap__legend__gradientRange\">\n            <div>0</div>\n            <div>{formatNumber(maxValue)}</div>\n          </div>\n        </div>\n        <div>\n          <div>{' '}</div>\n          <div\n            className=\"WorldMap__legend__NA__square\"\n            style={{ backgroundColor: NA_COLOR }}\n          />\n          <div>NA</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy } from 'ramda';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber } from '../../../utils';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet}\n        onChange={value => setStatistic(value)}\n      >\n        {sortBy(s => s.name, statistics).map(statistic => (\n          <Select.Option key={statistic.code} title={statistic.name}>\n            {`${statistic.name}`}\n          </Select.Option>\n        ))}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <Radio.Group\n        style={{ marginBottom: '10px' }}\n        buttonStyle=\"solid\"\n        size=\"small\"\n        value={perCapita}\n        onChange={e => setPerCapita(e.target.value)}\n      >\n        <Radio.Button value={false}>Absolute</Radio.Button>\n        <Radio.Button\n          value\n          disabled={\n            currentStatistic.code === 'POPULATION' ||\n            currentStatistic.isIntensive\n          }\n        >\n          Per capita\n        </Radio.Button>\n      </Radio.Group>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: perCapita\n              ? `${currentStatistic.unit.base}/capita`\n              : currentStatistic.unit.main,\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n} from '../../store/statistics';\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","// eslint-disable-next-line\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { Radio } from 'antd';\nimport { tickFormatter } from '../../../utils/chartHelpers';\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, payload } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label } = props;\n    const { unit } = payload[0];\n    const payloadWithoutWorld = payload\n      ? payload.filter(p => p.dataKey !== 'worldPrimary')\n      : [];\n    const worldPrimary = payload\n      ? payload.find(p => p.dataKey === 'worldPrimary')\n      : [];\n    const total = payloadWithoutWorld.reduce(\n      (sum, { value }) => sum + value,\n      0,\n    );\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payloadWithoutWorld.map(p => (\n            <div key={p.dataKey} style={{ lineHeight: '22px', color: p.color }}>\n              {`${p.name} : ${formatNumber(p.value)} ${p.unit}`}\n            </div>\n          ))}\n          <hr size={1} />\n          <div key=\"total\" style={{ lineHeight: '22px', color: 'black' }}>\n            {`Total : ${formatNumber(total)} ${unit}`}\n          </div>\n          {worldPrimary && (\n            <div\n              key=\"primaryWorld\"\n              style={{ lineHeight: '22px', color: 'red' }}\n            >\n              {`World : ${formatNumber(worldPrimary.value)} ${unit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n};\n\nfunction PrimaryEnergyChart(props) {\n  const { data, stacked, setStacked, perCapita, setPerCapita } = props;\n  const unit = perCapita ? ' toe/capita' : ' Mtoe';\n\n  const dataWithTotal = data.map(v => ({\n    ...v,\n    total: Number(\n      (v.coal + v.oil + v.gas + v.hydro + v.nuclear + v.renewables).toFixed(2),\n    ),\n  }));\n\n  // TODO\n  const hasCoal = data.some(v => v.coal >= 0.01);\n  const hasOil = data.some(v => v.oil >= 0.01);\n  const hasGas = data.some(v => v.gas >= 0.01);\n  const hasNuclear = data.some(v => v.nuclear >= 0.01);\n  const hasHydro = data.some(v => v.hydro >= 0.01);\n  const hasRenewables = data.some(v => v.renewables >= 0.01);\n\n  const LineArea = stacked ? Area : Line;\n\n  return (\n    <div className=\"PrimaryEnergyChart\">\n      <h3 className=\"PrimaryEnergyChart__title\">Primary Energy Consumption</h3>\n      <div>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={stacked}\n          onChange={e => setStacked(e.target.value)}\n          style={{ marginRight: '10px' }}\n        >\n          <Radio.Button value>Stacked</Radio.Button>\n          <Radio.Button value={false}>Split</Radio.Button>\n        </Radio.Group>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button value>Per capita</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ResponsiveContainer height={300} width=\"100%\">\n        <ComposedChart\n          data={dataWithTotal}\n          margin={{ top: 10, right: 0, bottom: 10, left: 0 }}\n        >\n          {hasCoal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasOil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasGas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasNuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasHydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasRenewables && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"renewables\"\n              dot={false}\n              activeDot={false}\n              name=\"Other renewables & waste\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"worldPrimary\"\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            tickFormatter={tickFormatter}\n            label={{\n              value: unit,\n              angle: -90,\n              position: 'insideLeft',\n            }}\n          />\n          <Tooltip content={CustomTooltip} />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nPrimaryEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      renewables: PropTypes.number,\n      worldPrimary: PropTypes.number,\n      total: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default PrimaryEnergyChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport PrimaryEnergyChart from '../components/PrimaryEnergyChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst WORLD = 'WORLD';\n\nconst mapOfStatistics = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_CONSUMPTION_MTOE',\n  nuclear: 'NUCLEAR_CONSUMPTION_MTOE',\n  renewables: 'NON_HYDRO_RENEWABLES_CONSUMPTION_MTOE',\n};\nconst statisticCodes = values(mapOfStatistics).concat(['POPULATION']);\nconst worldReferences = ['POPULATION', 'PRIMARY_ENERGY_CONSUMPTION_MTOE'];\n\nconst ConnectedPrimaryEnergyChart = connect(\n  (state, { countryCode, perCapita }) => ({\n    data: compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: {\n          ...mapOfStatistics,\n          worldPrimary: {\n            statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n            countryCode: WORLD,\n          },\n        },\n        countryCode,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(PrimaryEnergyChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stacked: true,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { countryCode, loadStatistics } = this.props;\n\n    loadStatistics({ statisticCodes, countryCode });\n    loadStatistics({\n      statisticCodes: worldReferences,\n      countryCode: WORLD,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistics } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  setStacked(stacked) {\n    this.setState({ stacked });\n  }\n\n  setPerCapita(perCapita) {\n    this.setState({ perCapita });\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n    const { stacked, perCapita } = this.state;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedPrimaryEnergyChart\n          countryCode={countryCode}\n          setStacked={value => this.setStacked(value)}\n          setPerCapita={value => this.setPerCapita(value)}\n          stacked={stacked}\n          perCapita={perCapita}\n        />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded:\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes,\n          countryCode: props.countryCode,\n        },\n        state,\n      ) &&\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes: worldReferences,\n          countryCode: WORLD,\n        },\n        state,\n      ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(PrimaryEnergyChartContainer);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../../../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction CountryMap(props) {\n  const { country } = props;\n\n  return (\n    <div className=\"CountryMap\">\n      <Map\n        center={country.latlng}\n        zoom={2}\n        style={{ height: '300px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {country.geojson && <GeoJSON data={country.geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nCountryMap.propTypes = {\n  country: PropTypes.shape({\n    latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n    area: PropTypes.number.isRequired,\n    geojson: PropTypes.object.isRequired,\n  }).isRequired,\n};\n\nexport default CountryMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils/chartHelpers';\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active } = props;\n\n  if (active) {\n    const { payload, label } = props;\n    return (\n      <div className=\"CustomTooltip\">\n        {payload[0] && (\n          <div style={{ lineHeight: '22px', color: payload[0].color }}>\n            {`${label} : ${formatNumber(payload[0].value)} ${payload[0].unit}`}\n          </div>\n        )}\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n};\n\nfunction BasicChart(props) {\n  const { data, statistics, color } = props;\n  const statistic = statistics.value;\n\n  return (\n    <div className=\"SelfSufficiency\">\n      <strong>{`${statistic.name} (${statistic.unit.main})`}</strong>\n      <ResponsiveContainer height={200}>\n        <LineChart data={data} margin={{ left: 20, top: 10 }}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={statistic.name}\n            unit={` ${statistic.unit.main}`}\n          />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={CustomTooltip} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  color: PropTypes.string,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default BasicChart;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n} from '../store/statistics';\n\nconst StatisticsLoader = buildLoader(loadCountryStatistics);\n\nfunction withCountryStatistic(mapOfCountryStatisticsSelector) {\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) => {\n      const mapOfCountryStatistics =\n        typeof mapOfCountryStatisticsSelector === 'object'\n          ? mapOfCountryStatisticsSelector\n          : mapOfCountryStatisticsSelector(state, props);\n      const statisticCodes = values(mapOfCountryStatistics);\n      return {\n        data: compiledCountryStatisticsSelector(\n          {\n            mapOfCountryStatistics,\n            countryCode: props.countryCode,\n            perCapita: props.perCapita,\n          },\n          state,\n        ),\n        statistics: map(\n          statisticCode => statisticSelector(statisticCode, state),\n          mapOfCountryStatistics,\n        ),\n        isLoaded: countryStatisticsLoadedSelector(\n          {\n            statisticCodes,\n            countryCode: props.countryCode,\n          },\n          state,\n        ),\n        statisticCodes,\n      };\n    })(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader\n          statisticCodes={props.statisticCodes}\n          countryCode={props.countryCode}\n        />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistic;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChart from './BasicChart';\nimport withCountryStatistics from '../../../HOC/withCountryStatistics';\n\nconst statisticCodes = [\n  'POPULATION',\n  'GDP_2010_USD',\n  'ENERGY_SELF_SUFFICIENCY',\n  'CO2_EMISSIONS_MT',\n];\n\nconst [\n  PopulationChart,\n  GDPChart,\n  SelfSufficiencyChart,\n  CO2EmissionChart,\n] = statisticCodes.map(statisticCode =>\n  withCountryStatistics({\n    value: statisticCode,\n  })(BasicChart),\n);\n\nfunction SummaryTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <Row gutter={20}>\n        <Col md={12} sm={24}>\n          <PopulationChart countryCode={countryCode} color=\"#2c82c9\" />\n        </Col>\n        <Col md={12} sm={24}>\n          <GDPChart countryCode={countryCode} color=\"#f22613\" />\n        </Col>\n        <Col md={12} sm={24}>\n          <SelfSufficiencyChart countryCode={countryCode} color=\"#f15a22\" />\n        </Col>\n        <Col md={12} sm={24}>\n          <CO2EmissionChart countryCode={countryCode} color=\"#6c7a89\" />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils/chartHelpers';\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active } = props;\n\n  if (active) {\n    const { payload, label, filter } = props;\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.filter(filter).map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${formatNumber(p.value)} ${p.unit}`}\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n  filter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  filter: i => i,\n};\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <h3>{fuel}</h3>\n      <ResponsiveContainer height={250} width=\"100%\">\n        <ComposedChart\n          data={dataWithImportAndExport}\n          margin={{ top: 30, right: 20, bottom: 5, left: 20 }}\n        >\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis\n            label={{ value: unit, position: 'insideTopLeft', offset: -20 }}\n          />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip {...props2} filter={p => p.name !== 'base'} />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport withCountryStatistics from '../../../HOC/withCountryStatistics';\nimport ProdConsoChart from './ProdConsoChart';\n\nconst ProdConsoChartContainer = withCountryStatistics((state, props) => ({\n  prod: props.prodStatisticCode,\n  conso: props.consoStatisticCode,\n}))(ProdConsoChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <h3>Imports/Exports</h3>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n            fuel=\"Coal\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n            fuel=\"Oil\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n            consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n            fuel=\"Gas\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChart from './BasicChart';\nimport withCountryStatistics from '../../../HOC/withCountryStatistics';\n\nconst statisticCodes = [\n  'CO2_INTENSITY_OF_ENERGY',\n  'ENERGY_INTENSITY',\n  // 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n];\n\nfunction ClimateTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row gutter={20}>\n        {statisticCodes.map(statisticCode => {\n          const StatisticContainer = withCountryStatistics({\n            value: statisticCode,\n          })(BasicChart);\n\n          return (\n            <Col md={12} sm={24}>\n              <StatisticContainer countryCode={countryCode} />\n            </Col>\n          );\n        })}\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\n\nimport { countrySelector } from '../../store/countries';\n\nimport PrimaryEnergyChartContainer from './containers/PrimaryEnergyChartContainer';\nimport CountryMap from './components/CountryMap';\nimport SummaryTab from './components/SummaryTab';\nimport IndependencyTab from './components/IndependencyTab';\nimport ClimateTab from './components/ClimateTab';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst tabContent = {\n  summary: countryCode => <SummaryTab countryCode={countryCode} />,\n  independency: countryCode => <IndependencyTab countryCode={countryCode} />,\n  climate: countryCode => <ClimateTab countryCode={countryCode} />,\n};\n\nclass CountryView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { country } = this.props;\n    const { currentTab } = this.state;\n\n    if (!country || country.disabled) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const countryCode = country.alpha2Code;\n    return (\n      <div className=\"CountryView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{country.commonName}</h2>}>\n              <div>{`Capital: ${country.capital}`}</div>\n              <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n              <PrimaryEnergyChartContainer countryCode={country.alpha2Code} />\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <img\n              style={{\n                width: '100%',\n                marginBottom: '20px',\n                maxHeight: '180px',\n              }}\n              src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n              alt={`Flag of ${country.commonName}`}\n            />\n            <CountryMap country={country} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](countryCode)}\n          </Card>\n        </Row>\n\n        {/*  */}\n        {/* <Row>\n        <Col md={8} sm={24}>\n          <SelfSufficiencyContainer countryCode={countryCode} />\n        </Col>\n        <Col md={8} sm={24}>\n          <PopulationContainer countryCode={countryCode} />\n        </Col>\n        <Col md={8} sm={24}>\n          <GrossDomesticProductContainer countryCode={countryCode} />\n        </Col>\n        <Col md={8} sm={24}>\n          <CO2EmissionContainer countryCode={countryCode} />\n        </Col>\n        <Col md={8} sm={24}>\n          <PrimaryEnergyContainer countryCode={countryCode} />\n        </Col>\n      </Row> */}\n      </div>\n    );\n  }\n}\n\nCountryView.propTypes = {\n  country: PropTypes.shape({\n    alpha2Code: PropTypes.string.isRequired,\n    commonName: PropTypes.string.isRequired,\n  }),\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countrySelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isLoaded } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      <Spin size=\"large\" spinning={!isLoaded}>\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            {!isLoaded && <div className=\"AppLayout__splash\" />}\n            {isLoaded && (\n              <Switch>\n                <Route path=\"/home\" exact component={HomeView} />\n                <Route\n                  path=\"/country/:countryCode\"\n                  exact\n                  component={CountryView}\n                />\n                <Route path=\"/about\" exact component={AboutView} />\n                <Route\n                  component={() => <Redirect to={{ pathname: '/home' }} />}\n                />\n              </Switch>\n            )}\n          </Layout.Content>\n          <Layout.Footer>Sources: IEA, EIA, World Data Bank</Layout.Footer>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded: countriesLoadedSelector(state) && statisticsLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}