{"version":3,"sources":["api/countries.js","store/countries.js","utils/index.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","api/areas.js","store/areas.js","store/index.js","utils/types.js","views/HomeView/components/WorldMap.jsx","components/StatisticSources.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","store/otherSelectors.js","components/GeoJSONMap.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","HOC/buildChart.jsx","views/CountryView/components/CustomTooltip.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","views/AreaView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["countryMapValues","country","worldTopo","a","objects","countries","geometries","find","c","id","numericCode","Object","objectSpread","geojson","feature","_callee","_ref","_ref2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","map","p","then","res","json","sent","slicedToArray","abrupt","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","dependentCountriesSelector","countrySelector","countryCode","countriesReducer","arguments","length","undefined","action","coordsToLatLng","coords","_coords","longitude","latitude","L","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","value","Number","isNaN","toPrecision","toLocaleString","tickFormatter","displayUnit","unit","perCapita","concat","base","main","parseMapOfStatistics","mapOfCountryStatistics","defaultCountry","statistics","statisticCode","addPopCountryStatistics","countryCodes","uniq","d","populations","mergeAll","defineProperty","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","statistic","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref4","compiledCountryStatisticsSelector","_ref3","year","sources","objectWithoutProperties","isFinite","computeDerivedValueFromCompiled","countryStatisticsLoadedSelector","countryStatitics","statisticOfAllCountriesLoadedSelector","alpha2Code","_ref5","_ref9","baseMap","mapOfStatistic","_ref6","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","statisticValues","Math","min","apply","toConsumableArray","v","endingYears","max","computeYearInterval","_computeYearInterval2","startingYear","endingYear","mapOfNamedStatisticValues","mapObjIndexed","compileName","_ref7","allValues","allValuesByYear","groupBy","keys","sort","compiledValue","popCompileName","population","factor","populationFactor","computeValue","omit","energySourceCountryConsumedSelector","some","coal","gas","oil","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","compiledStatisticForCountriesAndYear","_ref10","push","yearValue","statisticSourcesSelector","statisticCodes","reduce","statisticSources","code","fetchJSON","url","options","MTOE_UNIT","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","derivedStatistics","name","description","consumption","production","sourceAttribution","category","isIntensive","energy","gdp","co2","geothSolarWindTide","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","countryStatistics","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","initialCountryStatistic","countryStatisticReducer","statisticsReducer","acc","WORLD","indexedCountries","indexBy","cca2","countriesData","computeGeojson","area","countryAlpha3Codes","ccn3","includes","merge","AREAS_LOAD_ACTION","AREAS_RECEIVE_ACTION","receiveAreasAction","areasLoadedSelector","areas","areasSelector","areasReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","CountryType","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","number","latlng","arrayOf","object","MAP_HEIGHT","bool","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","dependentCountries","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","dragging","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","background","backgroundColor","StatisticSources","popover","title","arrowPointAtCenter","content","stat","href","sourceUrl","target","rel","placement","es_button","size","icon","marginRight","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","formatedData","s","statisticByCategory","es_select","width","placeholder","optionFilterProp","showSearch","onChange","stats","OptGroup","label","sortBy","Option","slider","defaultValue","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","e","Button","disabled","components_StatisticSources","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","defaultSortOrder","align","onRow","record","onClick","f","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","countryWithAreasSelector","areasOfCountrySelector","areaWithCountriesSelector","areaCode","areaSelector","CustomGeoJSON","createGeoJSON","prevProps","remove","_this$props","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","GeoJSONMap","TileLayer","attribution","GeoJSONMap_GeoJSON","Loader","load","prevOtherProps","_this$props2","otherProps","equals","buildLoader","loadFunction","StatisticsLoader","defaultSelector","withCountryStatistics","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","worldReference","mapOfCountryStatisticsInput","world","parsedMapOfCountryStatistics","mapOfCountryStatisticsToLoad","countryStatisticsToLoad","mapStateToProps","spin","spinning","defaultHeight","ChartSettings","perCapitaSwitch","stackedSwitch","stacked","setStacked","es_switch","checked","buildChart","_options$perCapitaSwi","_options$stackedSwitc","hocs","hasSettings","withStateHandlers","_ref$defaultPerCapita","defaultPerCapita","_ref$defaultStacked","defaultStacked","WrappedChart","compose","_Component","ChartWrapper","chartRef","React","createRef","buttonRef","inherits","createClass","finalHeight","file","replace","data-html2canvas-ignore","domElement","scale","current","domToImage","toBlob","element","bgcolor","transform","offsetWidth","offsetHeight","blob","saveAs","err","console","theme","assign","CustomTooltip","active","separator","payload","withTotal","displayFilter","totalFilter","filteredPayload","_payload$","_payload$$formatter","formatter","total","sum","totalUnit","_p$formatter","dataKey","defaultProps","EnergyMixChart","sourceConsumed","coalUnit","LineArea","Area","Line","warn","ResponsiveContainer","ComposedChart","dot","activeDot","stroke","fill","stackId","strokeWidth","CartesianGrid","opacity","XAxis","interval","YAxis","component_Tooltip","props2","components_CustomTooltip","Legend","iconType","EnergyMixChartBuilded","EnergyMixChartContainer","primaryMap","primaryReference","electrictyMap","electricityReference","SummaryTab","containers_EnergyMixChartContainer","marginTop","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","dataWithImportAndExport","l","diff","toFixed","export","import","strokeOpacity","BasicChart","LineChart","padding","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","IndependencyTab","sm","BasicChartContainer","ClimateTab","tabList","tab","tabContent","summary","components_SummaryTab","independency","components_IndependencyTab","climate","components_ClimateTab","CountryView","currentTab","tabKey","Redirect","to","flag","flagIcon","xs","card","Link","lg","maxHeight","src","toLowerCase","alt","components_GeoJSONMap","activeTabKey","onTabChange","setTab","match","params","AboutView","AreaView","GitHubLink","HeaderMenu","goTo","menu","mode","selectable","lineHeight","Item","onSelect","SubMenu","components_GitHubLink","CountriesLoader","prop","AreasLoader","_getAreas","getAllAreas","ConnectedHeaderMenu","withRouter","AppLayout_StatisticsLoader","layout","Header","position","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f62e76d.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\n\nfunction countryMapValues(country, worldTopo) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  return {\n    ...country,\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nasync function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [fetch('/data/countries.json'), fetch('/data/worldTopo.json')].map(p =>\n      p.then(res => res.json()),\n    ),\n  );\n  return countries.map(country => countryMapValues(country, worldTopo));\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport default countriesReducer;\n","import L from 'leaflet';\nimport { map, uniq, values, mergeAll } from 'ramda';\nimport domToImage from 'dom-to-image';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n\nexport function parseMapOfStatistics(mapOfCountryStatistics, defaultCountry) {\n  return map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n}\n\nexport function addPopCountryStatistics(mapOfCountryStatistics, perCapita) {\n  if (!perCapita) {\n    return mapOfCountryStatistics;\n  }\n\n  const countryCodes = uniq(\n    values(mapOfCountryStatistics).map(d => d.countryCode),\n  );\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...populations,\n    ...mapOfCountryStatistics,\n  };\n}\n\nexport function chartToPngBlob(domElement, scale) {\n  return domToImage.toBlob(domElement, {\n    filter: element => element.className !== 'ChartWrapper__header__right',\n    bgcolor: 'white',\n    style: {\n      transform: `scale(${scale}) translate(${domElement.offsetWidth /\n        2 /\n        scale}px, ${domElement.offsetHeight / 2 / scale}px)`,\n    },\n    height: domElement.offsetHeight * scale,\n    width: domElement.offsetWidth * scale,\n  });\n}\n","import { values, mapObjIndexed, mergeAll, groupBy, map, omit } from 'ramda';\nimport { countriesSelector } from '../countries';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../../utils';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, value: null }\n      : { year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(countryStatitics, state) {\n  return countryStatitics.every(countryStatistic =>\n    countryStatisticLoadedSelector(countryStatistic, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (perCapita && !population)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfCountryStatistics: baseMap, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    baseMap,\n    countryCode,\n  );\n  const mapOfCountryStatistics = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    mapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    mapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .map(year => Number(year))\n    .filter(year => startingYear <= year && year <= endingYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          mapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\n\nexport function energySourceCountryConsumedSelector(countryCode, state) {\n  const check = d => d.value > 0.01;\n  const statisticCodeMap = {\n    coal: 'COAL_CONSUMPTION_MTOE',\n    gas: 'GAS_CONSUMPTION_MTOE',\n    oil: 'OIL_CONSUMPTION_MTOE',\n    hydro: 'HYDRO_PRODUCTION_MTOE',\n    nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n    solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n  };\n  return map(\n    statisticCode =>\n      countryStatisticValuesSelector(\n        { statisticCode, countryCode },\n        state,\n      ).some(check),\n    statisticCodeMap,\n  );\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function statisticSourcesSelector(statisticCodes, state) {\n  return statisticCodes.reduce((statisticSources, statisticCode) => {\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sources = values(statistic.source).map(code =>\n        statisticSelector(code, state),\n      );\n      return statisticSources.concat(sources);\n    }\n\n    return statisticSources.concat([statistic]);\n  }, []);\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","const PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description: '',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description: '',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: '',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description: '',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      const countryStatistics = sourceCodes.map(sourceCode => ({\n        statisticCode: sourceCode,\n        countryCode,\n      }));\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics(countryStatistics),\n      );\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics(countryStatistics) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      countryStatistics.map(countryStatistic =>\n        dispatch(loadCountryStatistic(countryStatistic)),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import worldTopo from 'world-atlas/world/110m.json';\nimport countriesData from 'world-countries/countries';\nimport { merge } from 'topojson-client';\nimport { indexBy } from 'ramda';\n\nconst indexedCountries = indexBy(c => c.cca2, countriesData);\n\nfunction computeGeojson(area) {\n  const countryAlpha3Codes = area.countryCodes.map(\n    countryCode => indexedCountries[countryCode].ccn3,\n  );\n  const geometries = worldTopo.objects.countries.geometries.filter(c =>\n    countryAlpha3Codes.includes(c.id),\n  );\n  return merge(worldTopo, geometries);\n}\n\nexport default async function getAreas() {\n  const res = await fetch('/data/areas.json');\n  const data = await res.json();\n\n  return data.map(area => ({\n    ...area,\n    geojson: area.countryCodes ? computeGeojson(area) : null,\n  }));\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllAreas from '../api/areas';\n\nexport const AREAS_LOAD_ACTION = 'AREAS_LOAD_ACTION';\nexport const AREAS_RECEIVE_ACTION = 'AREAS_RECEIVE_ACTION';\n\nfunction loadAreasAction() {\n  return { type: AREAS_LOAD_ACTION };\n}\n\nfunction receiveAreasAction({ data, errors }) {\n  return { type: AREAS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllAreas() {\n  return function dispatchLoadAllAreas(dispatch) {\n    dispatch(loadAreasAction());\n    return getAllAreas()\n      .then(data =>\n        dispatch(\n          receiveAreasAction({\n            data: indexBy(prop('code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveAreasAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction areasReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case AREAS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case AREAS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function areasLoadedSelector(state) {\n  return state.areas.loaded;\n}\n\nexport function areasSelector(state) {\n  return values(state.areas.data);\n}\n\nexport function areaSelector(areaCode, state) {\n  return state.areas.data[areaCode];\n}\n\nexport function areasOfCountrySelector(countryCode, state) {\n  return values(state.areas.data).filter(\n    area => area.countryCodes && area.countryCodes.includes(countryCode),\n  );\n}\n\nexport default areasReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\nimport areasReducer from './areas';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n  areas: areasReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n\nexport const AreaType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  countries: PropTypes.arrayOf(CountryType),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n  } = props;\n  const maxValue = Math.max(\n    ...data.filter(d => d.countryCode !== 'WORLD').map(d => d.value),\n  );\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: 'white',\n                  weight: 0.5,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(value)}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          <div>\n            {`${currentStatistic.name} (${displayUnit(\n              currentStatistic.unit,\n              perCapita,\n            )})`}\n          </div>\n          <div className=\"WorldMap__legend__colors\">\n            <div>\n              <div\n                className=\"WorldMap__legend__gradient\"\n                style={{\n                  background: colorGradient,\n                }}\n              />\n              <div className=\"WorldMap__legend__gradientRange\">\n                <div>0</div>\n                <div>{formatNumber(maxValue)}</div>\n              </div>\n            </div>\n            <div>\n              <div\n                className=\"WorldMap__legend__NA__square\"\n                style={{ backgroundColor: NA_COLOR }}\n              />\n              <div>NA</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Popover, Button } from 'antd';\n\nimport { StatisticType } from '../utils/types';\n\nfunction StatisticSources(props) {\n  const { statisticSources } = props;\n  return (\n    <div className=\"StatisticSources\">\n      <Popover\n        title={`Source${statisticSources.length > 1 ? 's' : ''}`}\n        arrowPointAtCenter\n        content={\n          // eslint-disable-next-line react/jsx-wrap-multilines\n          <ul className=\"StatisticSources__list\">\n            {statisticSources.map(stat => (\n              <li key={stat.code}>\n                <a\n                  href={stat.sourceUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {`${stat.name} (${stat.sourceAttribution})`}\n                </a>\n              </li>\n            ))}\n          </ul>\n        }\n        placement=\"bottomRight\"\n      >\n        <Button size=\"small\" icon=\"bars\" style={{ marginRight: '5px' }} />\n      </Popover>\n    </div>\n  );\n}\n\nStatisticSources.propTypes = {\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n};\n\nexport default StatisticSources;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy, groupBy } from 'ramda';\n\nimport StatisticSources from '../../../components/StatisticSources';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    statisticSources,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <div className=\"StatisticExplorer__options\">\n        <Radio.Group\n          style={{ marginBottom: '10px' }}\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button\n            value\n            disabled={\n              currentStatistic.code === 'POPULATION' ||\n              currentStatistic.isIntensive\n            }\n          >\n            Per capita\n          </Radio.Button>\n        </Radio.Group>\n        <StatisticSources statisticSources={statisticSources} />\n      </div>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../store/statistics';\n\nfunction f(statisticCode, perCapita) {\n  // TODO\n  return perCapita ? [statisticCode, 'POPULATION'] : [statisticCode];\n}\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    statisticSources: statisticSourcesSelector(\n      f(statisticCode, perCapita),\n      state,\n    ),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import { countrySelector, countriesSelector } from './countries';\nimport { areaSelector, areasOfCountrySelector } from './areas';\n\nexport function countryWithAreasSelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  const areas = areasOfCountrySelector(countryCode, state);\n\n  return {\n    ...country,\n    areas,\n  };\n}\n\nexport function areaWithCountriesSelector(areaCode, state) {\n  const area = areaSelector(areaCode, state);\n  const countries = area.countryCodes\n    ? area.countryCodes\n        .map(countryCode => countrySelector(countryCode, state))\n        .filter(c => !!c)\n    : countriesSelector(state);\n  return {\n    ...area,\n    countries,\n  };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction GeoJSONMap(props) {\n  const { geojson, center } = props;\n\n  return (\n    <div className=\"GeoJSONMap\">\n      <Map center={center} zoom={2} style={{ height: '300px', zIndex: 0 }}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {geojson && <GeoJSON data={geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nGeoJSONMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  geojson: PropTypes.object.isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default GeoJSONMap;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values, uniq } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n  statisticSourcesSelector,\n} from '../store/statistics';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../utils';\n\nconst StatisticsLoader = buildLoader(({ countryStatistics }) =>\n  loadCountryStatistics(countryStatistics),\n);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction mapStateToProps(state, props) {\n  const {\n    perCapita,\n    worldReference,\n    mapOfCountryStatistics: mapOfCountryStatisticsInput,\n    countryCode,\n  } = props;\n  const mapOfCountryStatistics =\n    perCapita && worldReference\n      ? {\n          ...mapOfCountryStatisticsInput,\n          world: {\n            countryCode: 'WORLD',\n            statisticCode: worldReference,\n          },\n        }\n      : mapOfCountryStatisticsInput;\n\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n  );\n  const mapOfCountryStatisticsToLoad = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const countryStatisticsToLoad = values(mapOfCountryStatisticsToLoad);\n  const statisticCodes = uniq(\n    countryStatisticsToLoad.map(c => c.statisticCode),\n  );\n\n  return {\n    data: compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics,\n        countryCode: props.countryCode,\n        perCapita: props.perCapita,\n      },\n      state,\n    ),\n    statistics: map(\n      ({ statisticCode }) => statisticSelector(statisticCode, state),\n      parsedMapOfCountryStatistics,\n    ),\n    statisticSources: statisticSourcesSelector(statisticCodes, state),\n    isLoaded: countryStatisticsLoadedSelector(countryStatisticsToLoad, state),\n    countryStatisticsToLoad,\n    perCapita: props.perCapita || false,\n  };\n}\n\nfunction withCountryStatistics(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) =>\n      mapStateToProps(state, {\n        mapOfCountryStatistics: mapOfCountryStatisticsSelector(state, props),\n        ...props,\n      }),\n    )(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader countryStatistics={props.countryStatisticsToLoad} />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistics;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { values } from 'ramda';\nimport { withStateHandlers, compose } from 'recompose';\nimport { saveAs } from 'file-saver';\n\nimport { Icon, Popover, Switch, Button } from 'antd';\n\nimport withCountryStatistics from './withCountryStatistics';\nimport { displayUnit, chartToPngBlob } from '../utils';\nimport StatisticSources from '../components/StatisticSources';\n\nconst defaultHeight = 200;\n\nfunction ChartSettings(props) {\n  const {\n    perCapitaSwitch,\n    stackedSwitch,\n    perCapita,\n    stacked,\n    setPerCapita,\n    setStacked,\n  } = props;\n\n  return (\n    <div className=\"ChartSettings\">\n      {perCapitaSwitch && (\n        <div>\n          {'Per capita '}\n          <Switch size=\"small\" checked={perCapita} onChange={setPerCapita} />\n        </div>\n      )}\n      {stackedSwitch && (\n        <div>\n          {'Stacked '}\n          <Switch size=\"small\" checked={stacked} onChange={setStacked} />\n        </div>\n      )}\n    </div>\n  );\n}\nChartSettings.propTypes = {\n  perCapitaSwitch: PropTypes.bool.isRequired,\n  stackedSwitch: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  setStacked: PropTypes.func.isRequired,\n};\n\nfunction buildChart(options = {}) {\n  const {\n    mapOfCountryStatisticsSelector,\n    perCapitaSwitch = false,\n    stackedSwitch = false,\n  } = options;\n  const hocs = [];\n  const hasSettings = perCapitaSwitch || stackedSwitch;\n\n  if (hasSettings) {\n    hocs.push(\n      withStateHandlers(\n        ({ defaultPerCapita = false, defaultStacked = false }) => ({\n          perCapita: defaultPerCapita,\n          stacked: defaultStacked,\n        }),\n        {\n          setPerCapita: () => perCapita => ({ perCapita }),\n          setStacked: () => stacked => ({ stacked }),\n        },\n      ),\n    );\n  }\n  hocs.push(withCountryStatistics(mapOfCountryStatisticsSelector));\n\n  return function buildChartWrapper(WrappedChart) {\n    return compose(...hocs)(\n      class ChartWrapper extends Component {\n        constructor() {\n          super();\n          this.chartRef = React.createRef();\n          this.buttonRef = React.createRef();\n        }\n\n        render() {\n          const {\n            title,\n            statistics,\n            statisticSources,\n            height,\n            perCapita,\n            stacked,\n            setPerCapita,\n            setStacked,\n          } = this.props;\n\n          const statistic = values(statistics)[0];\n          const finalHeight = options.height || height || defaultHeight;\n          const file = title\n            ? title.replace(/ /g, '_')\n            : statistic.name.replace(/ /g, '_');\n\n          return (\n            <div className=\"ChartWrapper\" ref={this.chartRef}>\n              <div className=\"ChartWrapper__header\">\n                <div className=\"ChartWrapper__header__left\">\n                  <span className=\"ChartWrapper__title\">\n                    {title || statistic.name}\n                  </span>\n                  <span className=\"ChartWrapper__title__unit\">\n                    {` (${displayUnit(statistic.unit, perCapita)})`}\n                  </span>\n                </div>\n                <div\n                  className=\"ChartWrapper__header__right\"\n                  data-html2canvas-ignore\n                >\n                  <div style={{ marginRight: '5px' }}>\n                    <Button\n                      icon=\"download\"\n                      size=\"small\"\n                      onClick={() => {\n                        chartToPngBlob(this.chartRef.current, 2)\n                          .then(blob => saveAs(blob, `${file}.png`))\n                          .catch(err => console.err(err));\n                      }}\n                    />\n                  </div>\n                  <StatisticSources statisticSources={statisticSources} />\n                  {hasSettings && (\n                    <div>\n                      <Popover\n                        title=\"Settings\"\n                        arrowPointAtCenter\n                        content={\n                          // eslint-disable-next-line react/jsx-wrap-multilines\n                          <ChartSettings\n                            perCapitaSwitch={perCapitaSwitch}\n                            stackedSwitch={stackedSwitch}\n                            stacked={stacked}\n                            perCapita={perCapita}\n                            setPerCapita={setPerCapita}\n                            setStacked={setStacked}\n                          />\n                        }\n                        placement=\"bottomRight\"\n                      >\n                        <Button size=\"small\">\n                          <Icon type=\"setting\" theme=\"filled\" />\n                        </Button>\n                      </Popover>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <WrappedChart\n                {...this.props}\n                height={finalHeight}\n                perCapita={perCapita}\n                stacked={stacked}\n              />\n              <div className=\"ChartWrapper__footer\" />\n            </div>\n          );\n        }\n      },\n    );\n  };\n}\n\nexport default buildChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label, displayFilter, totalFilter } = props;\n    const filteredPayload = payload.filter(displayFilter);\n\n    if (filteredPayload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload\n      .filter(totalFilter)\n      .reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = filteredPayload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {filteredPayload.map(p => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  withTotal: PropTypes.bool,\n  displayFilter: PropTypes.func,\n  totalFilter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  withTotal: false,\n  displayFilter: i => i,\n  totalFilter: i => i,\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { values } from 'ramda';\n\nimport { tickFormatter, displayUnit } from '../../../utils';\nimport { StatisticType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nfunction EnergyMixChart(props) {\n  const { data, stacked, perCapita, sourceConsumed, statistics } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart data={data}>\n          {sourceConsumed.coal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.oil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.gas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.nuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.hydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.biofuelsWaste && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"biofuelsWaste\"\n              dot={false}\n              activeDot={false}\n              name=\"Biofuels & Waste\"\n              stroke=\"saddlebrown\"\n              fill=\"saddlebrown\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.solarWindTideGeoth && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"solarWindTideGeoth\"\n              dot={false}\n              activeDot={false}\n              name=\"Geothermy, Wind, Solar & Tide\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={p => p.name !== 'World'}\n              />\n            )}\n          />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  sourceConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default EnergyMixChart;\n","import { connect } from 'react-redux';\n\nimport buildChart from '../../../HOC/buildChart';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport { energySourceCountryConsumedSelector } from '../../../store/statistics';\n\nconst EnergyMixChartBuilded = buildChart({\n  perCapitaSwitch: true,\n  stackedSwitch: true,\n})(EnergyMixChart);\n\nconst EnergyMixChartContainer = connect((state, { countryCode }) => ({\n  sourceConsumed: energySourceCountryConsumedSelector(countryCode, state),\n}))(EnergyMixChartBuilded);\n\nexport default EnergyMixChartContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nfunction SummaryTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <div>\n        <EnergyMixChartContainer\n          title=\"Primary energy consumption\"\n          countryCode={countryCode}\n          mapOfCountryStatistics={primaryMap}\n          worldReference={primaryReference}\n          defaultPerCapita\n          defaultStacked\n        />\n      </div>\n      <div id=\"test\" style={{ marginTop: '20px' }}>\n        <EnergyMixChartContainer\n          title=\"Electricity generation by fuels\"\n          countryCode={countryCode}\n          mapOfCountryStatistics={electrictyMap}\n          worldReference={electricityReference}\n          defaultPerCapita\n          defaultStacked\n        />\n      </div>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data, height } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={dataWithImportAndExport}>\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                displayFilter={p => p.name !== 'base'}\n              />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const { data, statistics, color, perCapita, height } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"BasicChart\">\n      <ResponsiveContainer height={height}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={statistic.name}\n            unit={` ${unit}`}\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={props2 => <CustomTooltip {...props2} />} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default BasicChart;\n","import buildChart from '../../../HOC/buildChart';\nimport BasicChart from '../components/BasicChart';\n\nexport default buildChart()(BasicChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport buildChart from '../../../HOC/buildChart';\nimport ProdConsoChart from './ProdConsoChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst ProdConsoChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: (state, props) => ({\n    prod: props.prodStatisticCode,\n    conso: props.consoStatisticCode,\n  }),\n})(ProdConsoChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <h3>Imports/Exports</h3>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n            fuel=\"Coal\"\n            title=\"Coal Trade\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n            fuel=\"Oil\"\n            title=\"Oil Trade\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n            consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n            fuel=\"Gas\"\n            title=\"Gas Trade\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nfunction ClimateTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_EMISSIONS_MT\"\n            perCapita\n            countryCode={countryCode}\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            perCapita\n            countryCode={countryCode}\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_INTENSITY_OF_ENERGY\"\n            countryCode={countryCode}\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\n\n// import { countrySelector } from '../../store/countries';\nimport { countryWithAreasSelector } from '../../store/otherSelectors';\nimport { CountryType } from '../../utils/types';\n\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport SummaryTab from './components/SummaryTab';\nimport IndependencyTab from './components/IndependencyTab';\nimport ClimateTab from './components/ClimateTab';\n\nimport BasicChartContainer from './containers/BasicChartContainer';\nimport { isMobileOrTablet } from '../../utils';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst tabContent = {\n  summary: countryCode => <SummaryTab countryCode={countryCode} />,\n  independency: countryCode => <IndependencyTab countryCode={countryCode} />,\n  climate: countryCode => <ClimateTab countryCode={countryCode} />,\n};\n\nclass CountryView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { country } = this.props;\n    const { currentTab } = this.state;\n\n    if (!country || country.disabled) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const countryCode = country.alpha2Code;\n    const flag = isMobileOrTablet() ? country.flagIcon : '';\n    return (\n      <div className=\"CountryView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n              <div>{`Capital: ${country.capital}`}</div>\n              <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n              <div>\n                {`Member of: `}\n                {country.areas.map((area, i) => (\n                  <Link key={area.code} to={`/area/${area.code}`}>\n                    {`${i > 0 ? ', ' : ''}${area.name}`}\n                  </Link>\n                ))}\n              </div>\n              <Row style={{ marginTop: '20px' }} gutter={20}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"POPULATION\"\n                    countryCode={countryCode}\n                    color=\"#2c82c9\"\n                  />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"GDP_2010_USD\"\n                    countryCode={countryCode}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <img\n              style={{\n                width: '100%',\n                marginBottom: '20px',\n                maxHeight: '180px',\n              }}\n              src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n              alt={`Flag of ${country.commonName}`}\n            />\n            <GeoJSONMap geojson={country.geojson} center={country.latlng} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](countryCode)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nCountryView.propTypes = {\n  country: CountryType,\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countryWithAreasSelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\nimport GeoJSONMap from '../../components/GeoJSONMap';\n\nimport { areaWithCountriesSelector } from '../../store/otherSelectors';\nimport { AreaType } from '../../utils/types';\n\nimport SummaryTab from '../CountryView/components/SummaryTab';\nimport IndependencyTab from '../CountryView/components/IndependencyTab';\nimport ClimateTab from '../CountryView/components/ClimateTab';\nimport BasicChartContainer from '../CountryView/containers/BasicChartContainer';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst tabContent = {\n  summary: areaCode => <SummaryTab countryCode={areaCode} />,\n  independency: areaCode => <IndependencyTab countryCode={areaCode} />,\n  climate: areaCode => <ClimateTab countryCode={areaCode} />,\n};\n\nclass AreaView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { area } = this.props;\n    const { currentTab } = this.state;\n    const latlng = [\n      area.countries.reduce((s, c) => c.latlng[0] + s, 0) /\n        area.countries.length,\n      area.countries.reduce((s, c) => c.latlng[1] + s, 0) /\n        area.countries.length,\n    ];\n\n    if (!area) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div className=\"AreaView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${area.name}`}</h2>}>\n              {area.code !== 'WORLD' && (\n                <div>\n                  {`Members : `}\n                  {area.countries.map((country, i) => (\n                    <Link\n                      key={country.alpha2Code}\n                      to={`/country/${country.alpha2Code}`}\n                    >\n                      {`${i > 0 ? ', ' : ''}${country.commonName}`}\n                    </Link>\n                  ))}\n                </div>\n              )}\n              <Row style={{ marginTop: '20px' }} gutter={10}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"POPULATION\"\n                    countryCode={area.code}\n                    color=\"#2c82c9\"\n                  />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"GDP_2010_USD\"\n                    countryCode={area.code}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <GeoJSONMap geojson={area.geojson} center={latlng} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](area.code)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nAreaView.propTypes = {\n  area: AreaType.isRequired,\n};\n\nexport default connect((state, props) => ({\n  area: areaWithCountriesSelector(props.match.params.areaCode, state),\n}))(AreaView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType, AreaType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, areas, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.SubMenu title=\"Areas\">\n        {sortBy(a => a.name, areas).map(area => (\n          <Menu.Item key={area.code}>\n            <Link to={`/area/${area.code}`}>{area.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu.SubMenu>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  areas: PropTypes.arrayOf(AreaType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\nimport AreaView from '../views/AreaView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\nimport {\n  loadAllAreas,\n  areasLoadedSelector,\n  areasSelector,\n} from '../store/areas';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\nconst AreasLoader = buildLoader(loadAllAreas);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    areas: areasSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isLoaded } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      <AreasLoader />\n      <Spin size=\"large\" spinning={!isLoaded}>\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            {!isLoaded && <div className=\"AppLayout__splash\" />}\n            {isLoaded && (\n              <Switch>\n                <Route path=\"/home\" exact component={HomeView} />\n                <Route\n                  path=\"/country/:countryCode\"\n                  exact\n                  component={CountryView}\n                />\n                <Route path=\"/area/:areaCode\" exact component={AreaView} />\n                <Route path=\"/about\" exact component={AboutView} />\n                <Route\n                  component={() => <Redirect to={{ pathname: '/home' }} />}\n                />\n              </Switch>\n            )}\n          </Layout.Content>\n          <Layout.Footer>{' '}</Layout.Footer>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded:\n      countriesLoadedSelector(state) &&\n      statisticsLoadedSelector(state) &&\n      areasLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}