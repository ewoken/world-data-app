{"version":3,"sources":["api/country.js","store/countries.js","api/helpers.js","api/statistics/eiaApi.js","api/statistics/ieaApi.js","api/statistics/worldBankApi.js","api/statistics/converters.js","api/statistics/statistics.js","api/statistics/index.js","store/statistics.js","store/index.js","utils/types.js","utils/index.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","views/CountryView/components/PrimaryEnergyChart.jsx","views/CountryView/containers/PrimaryEnergyChartContainer.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/containers/ProdConsoCharContainer.jsx","views/CountryView/components/CountryMap.jsx","views/CountryView/index.jsx","components/HeaderMenu.jsx","loaders/index.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["noData","countryMapValues","country","a","worldTopo","objects","countries","geometries","find","c","id","ccn3","Number","alpha2Code","cca2","commonName","name","common","alpha3Code","cca3","numericCode","region","subregion","isIndependent","independent","area","capital","latlng","disabled","includes","geojson","feature","getAllCountries","Promise","resolve","countriesData","filter","map","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","receiveCountriesAction","_ref","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","countrySelector","countryCode","countriesReducer","arguments","length","undefined","action","Object","objectSpread","retryFetch","url","options","retryCount","fetch","then","res","json","catch","error","reject","setTimeout","require","EIA_API_KEY","EIA_API","parseValue","value","isNaN","_callee","statistic","seriesId","regenerator_default","wrap","_context","prev","next","seriesOfCountry","concat","sent","startsWith","abrupt","series","d","year","unitConverter","stop","this","IEA_API","cache","WORLD_BANK_API","worldBankCode","object","statisticCode","code","date","convert_TWh_to_Mtoe","twh","generationToConsumption","statistics","description","startingYear","endingYear","unit","sources","api","toFixed","ieaId","getStatisticOfCountry","_x","_x2","_fetchStatisticFromEIA","apply","fetchStatisticFromEIA","datasets","years","keys","reduce","map1","countriesOfYear","countryAlpha3Code","item","push","countryValues","fetchStatisticFromIEA","_fetchStatisticFromWorldBank","fetchStatisticFromWorldBank","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","_ref2","receiveStatisticOfCountriesAction","_ref3","initialCountryStatistic","countryStatisticReducer","countryStatistic","omit","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","_ref4","countryStatisticLoadedSelector","_ref5","countryStatisticValuesSelector","_ref6","countryStatisticsLoadedSelector","_ref7","statisticCodes","every","compiledCountryStatisticsSelector","_ref8","_ref11","mapOfStatisticCodes","mapOfStatisticValues","arrayOfStatisticValues","startingYears","statisticValues","Math","min","toConsumableArray","v","endingYears","max","mapOfNamedStatisticValues","mapObjIndexed","compileName","_ref9","defineProperty","allValues","allValuesByYear","groupBy","sort","valuesOfYear","mergeAll","compiledStatisticForCountriesAndYear","_ref12","_ref13","yearValue","loadCountryStatistic","_ref14","dispatch","getState","loadCountryStatisticAction","statisticValue","loadCountryStatistics","_ref15","all","loadStatisticOfCountries","loadStatisticOfCountriesAction","getStatisticOfAllCountries","statisticsReducer","acc","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","PropTypes","shape","string","isRequired","number","arrayOf","coordsToLatLng","coords","_coords","slicedToArray","longitude","latitude","L","latLng","dependentCountries","MAP_HEIGHT","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","indexBy","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","fillColor","fillOpacity","Tooltip","sticky","toLocaleString","stroke","background","backgroundColor","StatisticExplorer","onRowClick","setStatistic","setYear","formatedData","s","es_select","width","placeholder","optionFilterProp","showSearch","onChange","sortBy","Option","title","slider","included","marks","label","margin","left","right","table","rowKey","size","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","href","defaultSortOrder","align","onRow","record","onClick","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","setState","_this2","history","_this$state","row","gutter","col","span","Component","CustomTooltip","active","payload","total","sum","p","dataKey","lineHeight","defaultProps","PrimaryEnergyChart","stacked","setStacked","perCapita","setPerCapita","dataWithTotal","coal","oil","gas","hydro","nuclear","renewables","finalData","w","pow","population","hasCoal","some","hasOil","hasGas","hasNuclear","hasHydro","hasRenewables","LineArea","Area","Line","es_radio","Group","buttonStyle","e","target","marginRight","Button","ResponsiveContainer","ComposedChart","top","bottom","dot","activeDot","fill","stackId","CartesianGrid","opacity","XAxis","interval","YAxis","angle","position","component_Tooltip","content","Legend","iconType","ConnectedPrimaryEnergyChart","PrimaryEnergyChartContainer","_this$props","loadStatistics","prevProps","_this$props2","_this$props3","isLoaded","spin","spinning","ProdConsoChart","fuel","prodStatistic","consoStatistic","console","warn","dataWithImportAndExport","l","diff","prod","conso","export","import","base","strokeOpacity","strokeWidth","offset","props2","ProdConsoChart_CustomTooltip","assign","ConnectedProdConsoChart","prodStatisticCode","consoStatisticCode","ProdConsoChartContainer","CustomGeoJSON","createGeoJSON","remove","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","CountryMap","TileLayer","attribution","CountryMap_GeoJSON","CountryView","Redirect","to","marginBottom","sm","md","containers_PrimaryEnergyChartContainer","src","toLowerCase","alt","components_CountryMap","ProdConsoCharContainer","match","params","HeaderMenu","goTo","menu","mode","theme","selectable","Item","Link","onSelect","withLoader","config","loadFunctions","_config$isLoadedSelec","isLoadedSelector","_config$mapStateToPro","mapStateToProps","loadAll","loadFunction","WrappedComponent","ConnectedWrappedComponent","load","_Component","LoaderComponent","inherits","createClass","objectWithoutProperties","otherProps","CountriesLoader","prop","StatisticsLoader","ConnectedHeaderMenu","withRouter","isReady","layout","Header","Content","padding","marginTop","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9807923.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport countriesData from 'world-countries/countries';\nimport worldTopo from 'world-atlas/world/110m.json';\n\nconst noData = ['AD', 'LI', 'MH', 'FM', 'MC', 'PW', 'SM', 'TV', 'VA'];\n\nfunction countryMapValues(country) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.ccn3,\n  );\n  return {\n    id: Number(country.ccn3),\n    alpha2Code: country.cca2,\n    commonName: country.name.common,\n    alpha3Code: country.cca3,\n    numericCode: country.ccn3,\n    region: country.region,\n    subregion: country.subregion,\n    isIndependent: country.independent,\n    area: country.area,\n    capital: country.capital[0], // TODO\n    latlng: country.latlng,\n    disabled: noData.includes(country.cca2),\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nexport function getDependentCountries() {\n  return countriesData.filter(c => !c.independent).map(countryMapValues);\n}\n\nfunction getAllCountries() {\n  return Promise.resolve(\n    countriesData.filter(c => c.independent).map(countryMapValues),\n  );\n}\n\n// getAllCountries().then(data => console.log(data.filter(c => !c.geojson)));\n\nexport default getAllCountries;\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllCountries from '../api/country';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport default countriesReducer;\n","require('isomorphic-fetch');\n\n// eslint-disable-next-line import/prefer-default-export\nexport function retryFetch(url, options, retryCount = 0) {\n  return fetch(url, options)\n    .then(res => res.json())\n    .catch(error => {\n      if (retryCount > 3) {\n        throw error;\n      }\n\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          retryFetch(url, options, retryCount + 1)\n            .then(resolve)\n            .catch(reject);\n        }, 3000);\n      });\n    });\n}\n","import { retryFetch } from '../helpers';\n\nconst EIA_API_KEY = '20cf4469dcd5b4da5fc7cb448d9d934e';\nexport const EIA_API = 'EIA_API';\n\nfunction parseValue(value) {\n  if (value === '(s)') {\n    return 0;\n  }\n  // eslint-disable-next-line no-restricted-globals\n  if (isNaN(value)) {\n    return null;\n  }\n  return value;\n}\n\nexport async function fetchStatisticFromEIA(statistic, country) {\n  const seriesId = statistic.seriesOfCountry(country);\n  const data = await retryFetch(\n    `http://api.eia.gov/series/?api_key=${EIA_API_KEY}&series_id=${seriesId}`,\n  );\n\n  if (\n    data.data &&\n    data.data.error &&\n    data.data.error.startsWith('invalid series_id')\n  ) {\n    return [];\n  }\n\n  return data.series[0].data.map(d => {\n    const value = parseValue(d[1]);\n    return {\n      year: Number(d[0]),\n      value: value !== null ? statistic.unitConverter(value) : null,\n    };\n  });\n}\n","import { retryFetch } from '../helpers';\n\nexport const IEA_API = 'IEA_API';\nconst cache = {};\n\nexport function fetchStatisticFromIEA(statistic, country) {\n  const { ieaId } = statistic;\n\n  if (!cache[ieaId]) {\n    cache[ieaId] = retryFetch(\n      `http://energyatlas.iea.org/DataServlet?edition=WORLD&lang=en&datasets=${ieaId}&cmd=getdatavalues`,\n    )\n      .then(data => data.datasets[ieaId].values)\n      .then(years =>\n        Object.keys(years).reduce((map1, year) => {\n          const countriesOfYear = years[year];\n\n          return Object.keys(countriesOfYear).reduce(\n            (map, countryAlpha3Code) => {\n              const { value } = countriesOfYear[countryAlpha3Code];\n              const item = { year: Number(year), value };\n\n              if (map[countryAlpha3Code]) {\n                map[countryAlpha3Code].push(item);\n              } else {\n                // eslint-disable-next-line no-param-reassign\n                map[countryAlpha3Code] = [item];\n              }\n              return map;\n            },\n            map1,\n          );\n        }, {}),\n      );\n  }\n\n  return cache[ieaId].then(\n    countryValues => countryValues[country.alpha3Code] || [],\n  );\n}\n","import { retryFetch } from '../helpers';\n\nexport const WORLD_BANK_API = 'WORLD_BANK_API';\n\nexport async function fetchStatisticFromWorldBank(statistic, country) {\n  const { worldBankCode } = statistic;\n\n  const data = await retryFetch(\n    `http://api.worldbank.org/v2/countries/${\n      country.alpha2Code\n    }/indicators/${worldBankCode}?format=json&per_page=100`,\n  );\n\n  if (!data[1]) {\n    return [];\n  }\n\n  return data[1].map(object => ({\n    statisticCode: statistic.code,\n    countryCode: country.alpha2Code,\n    year: Number(object.date),\n    value: object.value,\n  }));\n}\n","// eslint-disable-next-line camelcase\nexport function convert_TWh_to_Mtoe(twh) {\n  return twh / 11.63;\n}\n\n// eslint-disable-next-line camelcase\nexport function generationToConsumption(value) {\n  return value / 0.38;\n}\n","import { EIA_API } from './eiaApi';\nimport { IEA_API } from './ieaApi';\nimport { WORLD_BANK_API } from './worldBankApi';\n\n// eslint-disable-next-line camelcase\nimport { convert_TWh_to_Mtoe, generationToConsumption } from './converters';\n\nconst statistics = [\n  {\n    code: 'COAL_PRODUCTION_MTOE',\n    name: 'Coal production',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2016, // TODO\n    unit: 'Mtoe',\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.7-1-${country.alpha3Code}-MTOE.A`,\n    unitConverter: value => Number(value.toFixed(2)),\n  },\n  {\n    code: 'COAL_CONSUMPTION_MTOE',\n    name: 'Coal consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2016, // TODO\n    unit: 'Mtoe',\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.7-2-${country.alpha3Code}-MTOE.A`,\n    unitConverter: value => Number(value.toFixed(2)),\n  },\n  {\n    code: 'GAS_PRODUCTION_MTOE',\n    name: 'Gas production',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2017,\n    unit: 'Mtoe',\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.26-1-${country.alpha3Code}-MTOE.A`,\n    unitConverter: value => Number(value.toFixed(2)),\n  },\n  {\n    code: 'GAS_CONSUMPTION_MTOE',\n    name: 'Gas consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2017,\n    unit: 'Mtoe',\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.26-2-${country.alpha3Code}-MTOE.A`,\n    unitConverter: value => Number(value.toFixed(2)),\n  },\n  {\n    code: 'OIL_PRODUCTION_MTOE',\n    name: 'Oil production',\n    description: '',\n    startingYear: 1973,\n    endingYear: 2014,\n    unit: 'Mtoe',\n    sources: 'IEA',\n    api: IEA_API,\n    ieaId: '-21319742',\n  },\n  {\n    code: 'OIL_CONSUMPTION_MTOE',\n    name: 'Oil consumption',\n    description: '',\n    startingYear: 1973,\n    endingYear: 2014,\n    unit: 'Mtoe',\n    sources: 'IEA',\n    api: IEA_API,\n    ieaId: '642753284',\n  },\n  {\n    code: 'HYDRO_CONSUMPTION_MTOE',\n    name: 'Hydroelectricity consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2016,\n    unit: 'Mtoe',\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.33-12-${country.alpha3Code}-BKWH.A`,\n    unitConverter: value =>\n      Number(generationToConsumption(convert_TWh_to_Mtoe(value)).toFixed(2)),\n  },\n  {\n    code: 'NUCLEAR_CONSUMPTION_MTOE',\n    name: 'Nuclear consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2016,\n    unit: 'Mtoe',\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.27-12-${country.alpha3Code}-BKWH.A`,\n    unitConverter: value =>\n      Number(generationToConsumption(convert_TWh_to_Mtoe(value)).toFixed(2)),\n  },\n  {\n    code: 'NON_HYDRO_RENEWABLES_CONSUMPTION_MTOE',\n    name: 'Non-Hydroelectric renewables consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2016,\n    unit: 'Mtoe',\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.34-12-${country.alpha3Code}-BKWH.A`,\n    unitConverter: value =>\n      Number(generationToConsumption(convert_TWh_to_Mtoe(value)).toFixed(2)),\n  },\n  {\n    code: 'WASTE_BIOMASS_CONSUMPTION_MTOE',\n    name: 'Waste and biomass consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2016,\n    unit: 'Mtoe',\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.38-12-${country.alpha3Code}-BKWH.A`,\n    unitConverter: value =>\n      Number(generationToConsumption(convert_TWh_to_Mtoe(value)).toFixed(2)),\n  },\n  {\n    code: 'PRIMARY_ENERGY_MTOE',\n    name: 'Primary energy consumption',\n    description: '',\n    startingYear: 1980,\n    endingYear: 2013,\n    unit: 'Mtoe',\n    sources: 'EIA, U.S. Energy Information Administration',\n    api: EIA_API,\n    seriesOfCountry: country => `INTL.44-2-${country.alpha3Code}-MTOE.A`,\n    unitConverter: value => Number(value.toFixed(2)),\n  },\n  {\n    code: 'POPULATION',\n    name: 'Population',\n    description: '',\n    startingYear: 1960,\n    endingYear: 2017,\n    unit: 'capita',\n    sources: 'World Bank',\n    api: WORLD_BANK_API,\n    worldBankCode: 'SP.POP.TOTL',\n  },\n];\n\nexport default statistics;\n","import { retryFetch } from '../helpers';\n\nimport { EIA_API, fetchStatisticFromEIA } from './eiaApi';\nimport { IEA_API, fetchStatisticFromIEA } from './ieaApi';\nimport { WORLD_BANK_API, fetchStatisticFromWorldBank } from './worldBankApi';\nimport statistics from './statistics';\n\nexport function getAllStatistics() {\n  return Promise.resolve(statistics);\n}\n\n// TODO statisticCode ?\nexport function getStatisticOfCountry(statistic, country) {\n  switch (statistic.api) {\n    case EIA_API:\n      return fetchStatisticFromEIA(statistic, country);\n    case IEA_API:\n      return fetchStatisticFromIEA(statistic, country);\n    case WORLD_BANK_API:\n      return fetchStatisticFromWorldBank(statistic, country);\n    default:\n      return Promise.resolve([]);\n  }\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return retryFetch(`data/${statisticCode}.json`).then(res => res.json());\n}\n","import {\n  values,\n  indexBy,\n  prop,\n  mapObjIndexed,\n  mergeAll,\n  groupBy,\n  map,\n  omit,\n} from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfCountry,\n  getStatisticOfAllCountries,\n} from '../api/statistics';\nimport { countrySelector, countriesSelector } from './countries';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(\n  { statisticCodes, countryCode },\n  state,\n) {\n  return statisticCodes.every(statisticCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }),\n  );\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfStatisticCodes, countryCode },\n  state,\n) {\n  const mapOfStatisticValues = map(\n    statisticCode =>\n      countryStatisticValuesSelector({ statisticCode, countryCode }, state),\n    mapOfStatisticCodes,\n  );\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => {\n      const valuesOfYear = allValuesByYear[year];\n\n      return mergeAll(valuesOfYear);\n    })\n    .filter(value => startingYear <= value.year && value.year <= endingYear);\n\n  return compiledStatistics;\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year },\n  state,\n) {\n  const countries = countriesSelector(state);\n\n  return countries.map(({ alpha2Code: countryCode }) => {\n    const countryStatisticValues = countryStatisticValuesSelector(\n      { statisticCode, countryCode },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n    return {\n      countryCode,\n      value: (yearValue && yearValue.value) || null,\n    };\n  });\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n    const country = countrySelector(countryCode, state);\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statistic, country)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics({ statisticCodes, countryCode }) {\n  return function dispatchloadCountryStatistics(dispatch, getState) {\n    return Promise.all(\n      statisticCodes.map(statisticCode =>\n        loadCountryStatistic({ statisticCode, countryCode })(\n          dispatch,\n          getState,\n        ),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const countries = countriesSelector(getState());\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    return getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n\nexport default statisticsReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.string.isRequired,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n","import L from 'leaflet';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\n// function bindEvent(countries, onCountryClick) {\n//   return function onEachFeature(feature, layer) {\n//     const country = countries.find(c => c.numericCode === feature.id);\n//     layer.on({\n//       click: () => onCountryClick(country),\n//     });\n//   };\n// }\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { getDependentCountries } from '../../../api/country';\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { coordsToLatLng } from '../../../utils';\n\nconst dependentCountries = getDependentCountries();\n\nconst MAP_HEIGHT = '500px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value: 'NA' };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const { countries, data, currentStatistic, currentYear } = props;\n  const maxValue = Math.max(...data.map(d => d.value));\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${value.toLocaleString()}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              stroke: false,\n              fillColor: NA_COLOR,\n              color: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div className=\"WorldMap__legend__gradient\">\n          <div>{`${currentStatistic.name} (${currentStatistic.unit})`}</div>\n          <div\n            className=\"WorldMap__legend__gradientColor\"\n            style={{\n              background: colorGradient,\n            }}\n          />\n          <div className=\"WorldMap__legend__gradientRange\">\n            <div>0</div>\n            <div>{maxValue.toLocaleString()}</div>\n          </div>\n        </div>\n        <div>\n          <div>{' '}</div>\n          <div\n            className=\"WorldMap__legend__NA__square\"\n            style={{ backgroundColor: NA_COLOR }}\n          />\n          <div>NA</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider } from 'antd';\n\nimport { sortBy } from 'ramda';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    currentYear,\n    onRowClick,\n    setStatistic,\n    setYear,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country: countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch\n        onChange={value => setStatistic(value)}\n      >\n        {sortBy(s => s.name, statistics).map(statistic => (\n          <Select.Option key={statistic.code} title={statistic.name}>\n            {`${statistic.name} (${statistic.unit})`}\n          </Select.Option>\n        ))}\n      </Select>\n      <Slider\n        value={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onChange={year => setYear(year)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <Table\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n          render: text => <a href=\"javascript:;\">{text}</a>, // eslint-disable-line\n          },\n          {\n            title: currentStatistic.unit,\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: value => value.toLocaleString(),\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport { countriesSelector } from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n} from '../../store/statistics';\n\nconst ConnectedWorldMap = connect((state, { statisticCode, currentYear }) => ({\n  countries: countriesSelector(state),\n  currentStatistic: statisticSelector(statisticCode, state),\n  data: compiledStatisticForCountriesAndYear(\n    {\n      statisticCode,\n      year: currentYear,\n    },\n    state,\n  ),\n}))(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_MTOE',\n      currentYear: 2010,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    this.setState({ statisticCode });\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row gutter={20}>\n          <Col span={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n            />\n          </Col>\n          <Col span={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { map, omit } from 'ramda';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { Radio } from 'antd';\n\nfunction CustomTooltip(props) {\n  const { active, payload } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label } = props;\n    const { unit } = payload[0];\n    const total = payload.reduce((sum, { value }) => sum + value, 0);\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${p.value.toLocaleString()} ${p.unit}`}\n              </div>\n            ))}\n          <div key=\"total\" style={{ lineHeight: '22px', color: 'red' }}>\n            {`Total : ${Number(total.toFixed(2)).toLocaleString()} ${unit}`}\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n};\n\nfunction PrimaryEnergyChart(props) {\n  const { data, stacked, setStacked, perCapita, setPerCapita } = props;\n  const unit = perCapita ? ' toe/capita' : ' Mtoe';\n\n  const dataWithTotal = data.map(v => ({\n    ...v,\n    total: Number(\n      (v.coal + v.oil + v.gas + v.hydro + v.nuclear + v.renewables).toFixed(2),\n    ),\n  }));\n  const finalData = perCapita\n    ? dataWithTotal.map(v => ({\n        ...v,\n        ...map(\n          w => Number(((w * 10 ** 6) / v.population).toFixed(2)),\n          omit(['year', 'population'], v),\n        ),\n      }))\n    : dataWithTotal;\n\n  const hasCoal = data.some(v => v.coal >= 0.01);\n  const hasOil = data.some(v => v.oil >= 0.01);\n  const hasGas = data.some(v => v.gas >= 0.01);\n  const hasNuclear = data.some(v => v.nuclear >= 0.01);\n  const hasHydro = data.some(v => v.hydro >= 0.01);\n  const hasRenewables = data.some(v => v.renewables >= 0.01);\n\n  const LineArea = stacked ? Area : Line;\n\n  return (\n    <div className=\"PrimaryEnergyChart\">\n      <h3 className=\"PrimaryEnergyChart__title\">Primary Energy Consumption</h3>\n      <div>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={stacked}\n          onChange={e => setStacked(e.target.value)}\n          style={{ marginRight: '10px' }}\n        >\n          <Radio.Button value>Stacked</Radio.Button>\n          <Radio.Button value={false}>Split</Radio.Button>\n        </Radio.Group>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button value>Per capita</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ResponsiveContainer height={300} width=\"100%\">\n        <ComposedChart\n          data={finalData}\n          margin={{ top: 10, right: 0, bottom: 10, left: 0 }}\n        >\n          {hasCoal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasOil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasGas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasNuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasHydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasRenewables && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"renewables\"\n              dot={false}\n              activeDot={false}\n              name=\"Other renewables\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            label={{\n              value: unit,\n              angle: -90,\n              position: 'insideLeft',\n            }}\n          />\n          <Tooltip content={CustomTooltip} />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nPrimaryEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      renewables: PropTypes.number,\n      total: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default PrimaryEnergyChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport PrimaryEnergyChart from '../components/PrimaryEnergyChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst mapOfStatisticCodes = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_CONSUMPTION_MTOE',\n  nuclear: 'NUCLEAR_CONSUMPTION_MTOE',\n  renewables: 'NON_HYDRO_RENEWABLES_CONSUMPTION_MTOE',\n  population: 'POPULATION',\n};\nconst statisticCodes = values(mapOfStatisticCodes);\n\nconst ConnectedPrimaryEnergyChart = connect((state, { countryCode }) => ({\n  data: compiledCountryStatisticsSelector(\n    {\n      mapOfStatisticCodes,\n      countryCode,\n    },\n    state,\n  ),\n}))(PrimaryEnergyChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stacked: true,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { countryCode, loadStatistics } = this.props;\n\n    loadStatistics({ statisticCodes, countryCode });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistics } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  setStacked(stacked) {\n    this.setState({ stacked });\n  }\n\n  setPerCapita(perCapita) {\n    this.setState({ perCapita });\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n    const { stacked, perCapita } = this.state;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedPrimaryEnergyChart\n          countryCode={countryCode}\n          setStacked={value => this.setStacked(value)}\n          setPerCapita={value => this.setPerCapita(value)}\n          stacked={stacked}\n          perCapita={perCapita}\n        />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded: countryStatisticsLoadedSelector(\n      {\n        statisticCodes,\n        countryCode: props.countryCode,\n      },\n      state,\n    ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(PrimaryEnergyChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\n\nfunction CustomTooltip(props) {\n  const { active } = props;\n\n  if (active) {\n    const { payload, label, filter } = props;\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.filter(filter).map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${p.value.toLocaleString()} ${p.unit}`}\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n  filter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  filter: i => i,\n};\n\nfunction ProdConsoChart(props) {\n  const {\n    fuel,\n    prodStatistic,\n    consoStatistic,\n    // reservesStatistic,\n    data,\n  } = props;\n\n  if (consoStatistic.unit !== prodStatistic.unit) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const { unit } = consoStatistic;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <h3>{fuel}</h3>\n      <ResponsiveContainer height={250} width=\"100%\">\n        <ComposedChart\n          data={dataWithImportAndExport}\n          margin={{ top: 30, right: 20, bottom: 5, left: 20 }}\n        >\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={1}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={1}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#880000\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          {/* {reservesStatisticCode && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reserves\"\n              dot={false}\n              unit={reservesStatistic.unit}\n              stroke=\"blue\"\n              strokeWidth={3}\n              strokeOpacity={0.7}\n              name={reservesStatistic.name}\n              yAxisId=\"1\"\n            />\n          )} */}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis\n            label={{ value: unit, position: 'insideTopLeft', offset: -20 }}\n          />\n          {/* {reservesStatisticCode && (\n            <YAxis\n              orientation=\"right\"\n              label={{\n                value: reservesStatistic.unit,\n                position: 'insideTopRight',\n                offset: -20,\n              }}\n              yAxisId=\"1\"\n            />\n          )} */}\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip {...props2} filter={p => p.name !== 'base'} />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nconst Statistic = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.string.isRequired,\n});\n\nProdConsoChart.propTypes = {\n  prodStatistic: Statistic.isRequired,\n  consoStatistic: Statistic.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Spin } from 'antd';\n\nimport ProdConsoChart from '../components/ProdConsoChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst ConnectedProdConsoChart = connect((state, props) => ({\n  prodStatistic: statisticSelector(props.prodStatisticCode, state),\n  consoStatistic: statisticSelector(props.consoStatisticCode, state),\n  data: compiledCountryStatisticsSelector(\n    {\n      mapOfStatisticCodes: {\n        prod: props.prodStatisticCode,\n        conso: props.consoStatisticCode,\n      },\n      countryCode: props.countryCode,\n    },\n    state,\n  ),\n}))(ProdConsoChart);\n\nclass ProdConsoChartContainer extends Component {\n  componentDidMount() {\n    const {\n      consoStatisticCode,\n      prodStatisticCode,\n      countryCode,\n      loadStatistics,\n    } = this.props;\n    const statisticCodes = [consoStatisticCode, prodStatisticCode];\n    loadStatistics({ statisticCodes, countryCode });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      countryCode,\n      loadStatistics,\n      consoStatisticCode,\n      prodStatisticCode,\n    } = this.props;\n    const statisticCodes = [consoStatisticCode, prodStatisticCode];\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  render() {\n    const {\n      isLoaded,\n      fuel,\n      consoStatisticCode,\n      prodStatisticCode,\n      countryCode,\n    } = this.props;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedProdConsoChart\n          fuel={fuel}\n          consoStatisticCode={consoStatisticCode}\n          prodStatisticCode={prodStatisticCode}\n          countryCode={countryCode}\n        />\n      </Spin>\n    );\n  }\n}\n\nProdConsoChartContainer.propTypes = {\n  prodStatisticCode: PropTypes.string.isRequired,\n  consoStatisticCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  fuel: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded: countryStatisticsLoadedSelector(\n      {\n        statisticCodes: [props.prodStatisticCode, props.consoStatisticCode],\n        countryCode: props.countryCode,\n      },\n      state,\n    ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(ProdConsoChartContainer);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../../../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction CountryMap(props) {\n  const { country } = props;\n\n  return (\n    <div className=\"CountryMap\">\n      <Map\n        center={country.latlng}\n        zoom={2}\n        style={{ height: '300px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {country.geojson && <GeoJSON data={country.geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nCountryMap.propTypes = {\n  country: PropTypes.shape({\n    latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n    area: PropTypes.number.isRequired,\n    geojson: PropTypes.object.isRequired,\n  }).isRequired,\n};\n\nexport default CountryMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Redirect } from 'react-router-dom';\n\nimport { Row, Col } from 'antd';\n\nimport { countrySelector } from '../../store/countries';\n\nimport PrimaryEnergyChartContainer from './containers/PrimaryEnergyChartContainer';\nimport ProdConsoChartContainer from './containers/ProdConsoCharContainer';\nimport CountryMap from './components/CountryMap';\n\nfunction CountryView(props) {\n  const { country } = props;\n\n  if (!country || country.disabled) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const countryCode = country.alpha2Code;\n  return (\n    <div className=\"CountryView\">\n      <Row gutter={16} style={{ marginBottom: '20px' }}>\n        <Col sm={24} md={18}>\n          <h2>{country.commonName}</h2>\n          <div>{`Capital: ${country.capital}`}</div>\n          <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n          <div>\n            <PrimaryEnergyChartContainer countryCode={country.alpha2Code} />\n          </div>\n        </Col>\n        <Col sm={0} md={6}>\n          <img\n            style={{ height: '100px' }}\n            src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n            alt={`Flag of ${country.commonName}`}\n          />\n          <CountryMap country={country} />\n        </Col>\n      </Row>\n      <Row>\n        <h3>Imports/Exports</h3>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n            fuel=\"Coal\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n            fuel=\"Oil\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n            consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n            fuel=\"Gas\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nCountryView.propTypes = {\n  country: PropTypes.shape({\n    alpha2Code: PropTypes.string.isRequired,\n    commonName: PropTypes.string.isRequired,\n  }),\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countrySelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\n\nimport { CountryType } from '../utils/types';\n\nfunction HeaderMenu(props) {\n  const { countries, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          style={{ width: '20vw' }} // TODO\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { loadAllCountries } from '../store/countries';\nimport {\n  loadAllStatistics,\n  loadStatisticOfCountries,\n} from '../store/statistics';\n\nexport function withLoader(config) {\n  const {\n    loadFunctions,\n    isLoadedSelector = () => false,\n    mapStateToProps = () => {},\n  } = config;\n\n  const loadAll = props => (dispatch, getState) =>\n    loadFunctions.map(loadFunction => loadFunction(props)(dispatch, getState));\n\n  return function wrapLoaderHOC(WrappedComponent) {\n    const ConnectedWrappedComponent = WrappedComponent\n      ? connect(mapStateToProps)(WrappedComponent)\n      : () => null;\n\n    return connect(\n      (state, props) => ({\n        isLoaded: isLoadedSelector(props, state),\n      }),\n      { load: loadAll },\n    )(\n      class LoaderComponent extends Component {\n        static propTypes = {\n          load: PropTypes.func.isRequired,\n          isLoaded: PropTypes.bool.isRequired,\n        };\n\n        componentDidMount() {\n          const { load, isLoaded, ...args } = this.props;\n          load(args);\n        }\n\n        render() {\n          const { isLoaded, load, ...otherProps } = this.props;\n\n          if (!isLoaded) {\n            return null;\n          }\n          return <ConnectedWrappedComponent {...otherProps} />;\n        }\n      },\n    );\n  };\n}\n\nexport const CountriesLoader = withLoader({\n  loadFunctions: [loadAllCountries],\n})();\n\nexport const StatisticsLoader = withLoader({\n  loadFunctions: [loadAllStatistics],\n})();\n\nexport const StatisticAllCountriesLoader = withLoader({\n  loadFunctions: [\n    ({ statisticCode }) => loadStatisticOfCountries(statisticCode),\n  ],\n})();\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport { CountriesLoader, StatisticsLoader } from '../loaders';\n\nimport { countriesLoadedSelector, countriesSelector } from '../store/countries';\nimport { statisticsLoadedSelector } from '../store/statistics';\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isReady } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      {!isReady && <Spin size=\"large\" />}\n      {isReady && (\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content\n            style={{\n              padding: '20px 50px',\n              marginTop: 64,\n            }}\n          >\n            <Switch>\n              <Route path=\"/home\" exact component={HomeView} />\n              <Route\n                path=\"/country/:countryCode\"\n                exact\n                component={CountryView}\n              />\n              <Route\n                component={() => <Redirect to={{ pathname: '/home' }} />}\n              />\n            </Switch>\n          </Layout.Content>\n          <Layout.Footer>Sources: IEA & EIA</Layout.Footer>\n        </Layout>\n      )}\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isReady: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isReady: countriesLoadedSelector(state) && statisticsLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}