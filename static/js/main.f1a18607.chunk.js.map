{"version":3,"sources":["api/countries.js","store/countries.js","utils/index.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","api/areas.js","store/areas.js","store/index.js","components/ScrollToTop.jsx","utils/types.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/ControlledSlider.jsx","components/StatisticDetails.jsx","utils/copyToClipboard.js","components/ShareChartComponent.jsx","views/HomeView/components/StatisticExplorer.jsx","views/CountryView/components/CustomTooltip.jsx","views/HomeView/components/HDIByEnergyChart.jsx","HOC/components/ChartSettings.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","HOC/buildChart.jsx","views/HomeView/containers/HDIByEnergyChartContainer.jsx","views/HomeView/index.jsx","store/otherSelectors.js","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.jsx","components/GeoJSONMap.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/GDPByEnergyChart.jsx","views/CountryView/components/RentsChart.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SettingsComponent.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/components/ReservesAndPeaksTab.jsx","views/CountryView/components/PowerLoadAnalysisChart.jsx","views/CountryView/components/OthersTab.jsx","views/CountryView/components/TabsComponent.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","views/AreaView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","components/AnalyticsComponent.jsx","App.jsx","serviceWorker.js","index.js"],"names":["countryMapValues","country","worldTopo","a","objects","countries","geometries","find","c","id","numericCode","geojson","feature","bounds","L","geoJSON","getBounds","Object","objectSpread","_callee","_ref","_ref2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","map","p","then","res","json","sent","slicedToArray","abrupt","stop","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","defaultIndicators","coal","oil","gas","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","countriesInBounds","boundsFilter","intersects","dependentCountriesSelector","countrySelector","countryCode","areas","fuelConsumedCountrySelector","hasConsumed","fuelProducedCountrySelector","hasProduced","fuelProducedOrConsumedCountrySelector","mapObjIndexed","v","k","countriesReducer","arguments","length","undefined","action","coordsToLatLng","coords","_coords","longitude","latitude","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","testScreenType","size","windowWidth","innerWidth","formatNumber","value","Number","isNaN","toPrecision","toLocaleString","tickFormatter","displayUnit","unit","perCapita","concat","base","main","parseMapOfStatistics","mapOfCountryStatistics","defaultCountry","statistics","statisticCode","addPopCountryStatistics","countryCodes","uniq","d","populations","mergeAll","defineProperty","clickHandlers","onClick","onDoubleClick","clicks","_len2","args","Array","_key2","setTimeout","apply","maxAndIndex","array","reduce","i","max","maxIndex","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","statistic","isGlobal","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref3","yearInterval","compiledCountryStatisticsSelector","isCompilation","dataItem","_","isFinite","year","computeDerivedValueFromCompiled","interval","startingYear","endingYear","statisticOfAllCountriesLoadedSelector","alpha2Code","fn","hashFunction","JSON","stringify","cacheSize","cache","_len","_key","hash","hashes","keys","memoize","_ref4","_ref8","baseMap","inputYearInterval","parsedMapOfCountryStatistics","mapOfStatistic","_ref5","nullValues","startingYears","endingYears","Math","toConsumableArray","min","computeYearInterval","mapOfStatisticValues","mapOfNamedStatisticValues","statisticValues","compileName","_ref6","allValues","allValuesByYear","groupBy","range","sort","compiledValue","_ref9","cc","popCompileName","population","factor","populationFactor","computeValue","isIntensive","compiledStatisticForCountriesAndYear","_ref10","input","_ref10$perCapita","_ref10$withWorld","withWorld","push","yearValue","statisticSourcesSelector","statisticCodes","statisticSources","sources","code","PEAK_THRESHOLD","MAY_PEAK_THRESHOLD","YEAR_AROUND_PEAK","statisticPeakYearSelector","dataLength","_maxAndIndex","maxData","lastValue","firstValue","hasPeakValue","sure","before","fetchJSON","url","options","PERCENTAGE_UNIT","MTOE_UNIT","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","CO2_INTENSITY_BY_SOURCE","biomass","solar","geoth","wind","derivedStatistics","name","description","consumption","production","sourceAttribution","category","energy","gdp","co2","scale","geothSolarWindTide","_ref7","oilPrice","pop","capacity","generation","notNullData","result","regression","linear","equation","r2","_ref11","renew","colorScheme","rest","objectWithoutProperties","source2","total","sum","key","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","countryStatistics","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","initialCountryStatistic","countryStatisticReducer","omit","statisticsReducer","acc","WORLD","indexedCountries","indexBy","cca2","countriesData","SU","ccn3","computeGeojson","area","countryAlpha3Codes","includes","merge","commonName","AREAS_LOAD_ACTION","AREAS_RECEIVE_ACTION","receiveAreasAction","areasLoadedSelector","areasSelector","areasReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","actionSanitizer","stateSanitizer","store","createStore","ScrollToTop","scrollTo","prevProps","equals","this","props","Component","CountryType","PropTypes","shape","string","isRequired","alpha3Code","capital","number","latlng","arrayOf","object","MAP_HEIGHT","bool","sourceUrl","sourceDescriptionUrl","pathname","search","NA_COLOR","BORDER_COLOR","LEGEND_COLORS_COUNT","LEGEND_WIDTH","DEFAULT_COLORS_SCHEME","WorldMap","selectedCountries","dependentCountries","currentStatistic","currentYear","minZoom","onMapChange","isLoaded","onCountryDblClick","onControlButtonClick","selectedCountryByCode","selectedData","maxValue","minValue","interpolators","scaleString","scheme","scaleType","scaleLinear","scaleLog","colors","domain","clamp","legend","colorInterpolator","d3Colors","getInterpolators","colorValueMap","interpolator","valueMap","color","computeColorMap","react_default","createElement","className","Map","zoom","zoomSnap","zoomDelta","center","style","height","zIndex","dragging","onZoomend","onMoveend","countryData","GeoJSON","onEachFeature","layer","on","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","control_default","position","es_button","icon","width","background","backgroundColor","defaultProps","ControlledSlider","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","defaultValue","setState","nextProps","onChange","_this2","slider","assign","setValue","StatisticDetails","descriptionLines","split","popover","title","arrowPointAtCenter","overlayStyle","maxWidth","content","stat","href","target","rel","placement","marginRight","copyTextToClipboard","text","element","clipboard","writeText","body","textArea","document","appendChild","focus","select","successful","execCommand","removeChild","resolve","reject","Error","err","fallbackCopyTextToClipboard","ShareChartComponent","chartRef","query","location","noHash","dropdown","overlay","menu","domElement","offsetHeight","padding","offsetWidth","classFiltered","classList","add","domToImage","toBlob","bgcolor","transform","blob","remove","chartToPngBlob","current","saveAs","message","error","compileNames","headers","dataLines","csv","l","join","Blob","origin","link","copyToClipboard","success","Item","theme","withRouter","WITH_SCALE_SETTINGS","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","mapRef","setScale","countryByCode","formatedData","s","statisticByCategory","es_select","placeholder","optionFilterProp","showSearch","stats","OptGroup","label","sortBy","Option","components_ControlledSlider","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","e","Button","disabled","components_ShareChartComponent","replace","qs","components_StatisticDetails","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","defaultSortOrder","align","onRow","record","CustomTooltip","active","separator","payload","withTotal","labelColor","displayFilter","totalFilter","units","filteredPayload","_payload$","_payload$$formatter","formatter","totalUnit","fontWeight","_p$formatter","dataKey","RESOLUTION","COLORS","Africa","Europe","Americas","Asia","Oceania","toPairs","DISPLAYED_COUNTRIES","HDIByEnergyChart","finalData","hdi","r","log","region","dataArray","logarithmic","data2","es6","bottom","line","stroke","props2","cx","cy","fill","opacity","top","components_CustomTooltip","0","1","verticalAlign","ChartSettings","perCapitaSwitch","stackedSwitch","stacked","setStacked","es_switch","checked","Loader","_this$props","load","prevOtherProps","_this$props2","otherProps","buildLoader","loadFunction","connect","StatisticsLoader","defaultSelector","mapStateToProps","mapOfCountryStatisticsInput","withReference","_props$referenceCount","referenceCountryCode","reference","mapOfCountryStatisticsToLoad","countryStatisticsToLoad","countryStatitics","countryStatisticsLoadedSelector","referenceCountry","withCountryStatistics","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","spin","spinning","defaultHeight","buildChartWrapper","WrappedChart","_Component","ChartWrapper","React","createRef","buttonRef","inherits","createClass","hasSettings","statisticList","toLowerCase","descriptionStatistic","finalDescription","boxShadow","data-html2canvas-ignore","components_ChartSettings","buildChart","_options$perCapitaSwi","_options$stackedSwitc","_options$height","hocs","withStateHandlers","_ref$defaultPerCapita","defaultPerCapita","_ref$defaultStacked","defaultStacked","compose","STATISTICS_MAP","STATISTICS_CODES","HDIByEnergyChartLoader","loadStatistic","components_HDIByEnergyChart","HDIByEnergyChartContainer","f","ConnectedWorldMap","ConnectedStatisticExplorer","HomeView","drawerIsOpen","setFilterBounds","getZoom","StatisticDiv","children","col","md","drawer","closable","onClose","setDrawerState","visible","parameters","_this$props3","goTo","newPerCapita","newParameters","isOpen","_this$props4","_this$state","components_ScrollToTop","row","gutter","setParameters","marginTop","containers_HDIByEnergyChartContainer","queryObject","parse","path","history","countryWithAreasSelector","areasOfCountrySelector","areaWithCountriesSelector","areaCode","areaSelector","countriesAndAreasSelector","BasicChart","extra","withComparison","strokeWidth","dot","iconType","CustomGeoJSON","createGeoJSON","leaflet","addTo","flyToBounds","withLeaflet","GeoJSONMap","boxZoom","doubleClickZoom","scrollWheelZoom","zoomControl","TileLayer","attribution","GeoJSONMap_GeoJSON","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","console","warn","dataWithImportAndExport","diff","toFixed","export","import","stackId","activeDot","strokeOpacity","GDPByEnergyChart","DEFAULT_AREA_PROPS","yAxisId","legendType","AREA_PROPS","FUELS","RentsChart","displayedFuel","some","price","orientation","RentsChartContainer","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","GDPByEnergyChartContainer","IndependencyTab","fuelProducedOrConsumed","hasRents","sm","BasicChartContainer","strokeDasharray","isFront","REFERENCE_DATAKEY","defaultLineAreaProps","isAnimationActive","lineAreaPropsMap","legendPayload","inactive","alpha","cssa","getLegendPayload","fuelConsumed","displayedStats","EnergyMixChart","toggleStat","setDisplayedStats","coalUnit","LineArea","Area","Line","lineAreaProps","fuelProps","displayedFuels","chartMax","ticks","getNiceTickValues","getTicksAndDomain","EnergyMixChartWithState","bind","assertThisInitialized","initDone","init","newProps","toggledStat","components_EnergyMixChart","EnergyMixChartBuilded","EnergyMixChartContainer","SettingsComponent","setReferenceCountry","onSelect","primaryMap","primaryReference","electrictyMap","electricityReference","ConnectedSettingsComponent","SummaryTab","containers_EnergyMixChartContainer","ClimateTab","ClimateTab_ConnectedSettingsComponent","PeakReference","peak","PeakText","textAlign","ReservesAndPeaksTab","fuelProduced","peaks","PowerLoadAnalysisChart","_regression$linear","powerLoad","WindLoadChartContainer","PowerLoadAnalysis","SolarLoadChartContainer","OthersTab","tabList","tab","tabContents","summary","independency","climate","reserves","others","TabsComponent","currentTab","onTabChange","TabComponent","tabs","card","activeTabKey","TabsComponentWithState","withState","CountryView","Redirect","to","flag","flagIcon","xs","Link","lg","maxHeight","src","alt","components_GeoJSONMap","match","params","AboutView","AreaView","AreaView_TabsComponentWithState","GitHubLink","HeaderMenu","mode","selectable","lineHeight","SubMenu","components_GitHubLink","CountriesLoader","prop","AreasLoader","_getAreas","getAllAreas","ConnectedHeaderMenu","scrollToAnchor","getElementById","scrollIntoView","behavior","block","inline","AppLayout","onhashchange","AppLayout_StatisticsLoader","layout","Header","span","offset","xxl","Content","Switch","Route","exact","component","Footer","tracker","ga","initialize","siteSpeedSampleRate","AnalyticsComponent","trackPage","set","pageview","withProps","App","es","HashRouter","components_AnalyticsComponent","components_AppLayout","Boolean","hostname","ReactDOM","src_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1a18607.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport L from 'leaflet';\n\nfunction countryMapValues(country, worldTopo) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  const geojson = a && feature(worldTopo, a);\n  const bounds = a && L.geoJSON(geojson).getBounds();\n  return {\n    ...country,\n    geojson,\n    bounds,\n  };\n}\n\nasync function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [fetch('/data/countries.json'), fetch('/data/worldTopo.json')].map(p =>\n      p.then(res => res.json()),\n    ),\n  );\n  return countries.map(country => countryMapValues(country, worldTopo));\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop, mapObjIndexed } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nconst defaultIndicators = {\n  // for areas\n  coal: true,\n  oil: true,\n  gas: true,\n  hydro: true,\n  nuclear: true,\n  biofuelsWaste: true,\n  solarWindTideGeoth: true,\n};\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function countriesInBounds(boundsFilter, state) {\n  const countries = countriesSelector(state);\n\n  return boundsFilter\n    ? countries.filter(\n        country => country.bounds && boundsFilter.intersects(country.bounds),\n      )\n    : countries;\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode] || state.areas.data[countryCode];\n}\n\nexport function fuelConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasConsumed : defaultIndicators;\n}\n\nexport function fuelProducedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasProduced : defaultIndicators;\n}\n\nexport function fuelProducedOrConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country\n    ? mapObjIndexed((v, k) => v || country.hasConsumed[k], country.hasProduced)\n    : defaultIndicators;\n}\n\nexport default countriesReducer;\n","import L from 'leaflet';\nimport { map, uniq, values, mergeAll } from 'ramda';\nimport domToImage from 'dom-to-image';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function testScreenType(size) {\n  const windowWidth = window.innerWidth;\n\n  switch (size) {\n    case 'xs':\n      return windowWidth < 576;\n    case 'sm':\n      return windowWidth >= 576;\n    case 'md':\n      return windowWidth >= 768;\n    case 'lg':\n      return windowWidth >= 992;\n    case 'xl':\n      return windowWidth >= 1200;\n    case 'xxl':\n      return windowWidth >= 1600;\n    default:\n      return false;\n  }\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n\nexport function parseMapOfStatistics(mapOfCountryStatistics, defaultCountry) {\n  return map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n}\n\nexport function addPopCountryStatistics(mapOfCountryStatistics, perCapita) {\n  if (!perCapita) {\n    return mapOfCountryStatistics;\n  }\n\n  const countryCodes = uniq(\n    values(mapOfCountryStatistics).map(d => d.countryCode),\n  );\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...populations,\n    ...mapOfCountryStatistics,\n  };\n}\n\nexport function chartToPngBlob(domElement, scale) {\n  const padding = 10;\n  const height = domElement.offsetHeight + padding * 2;\n  const width = domElement.offsetWidth + padding * 2;\n  const classFiltered = [\n    'ChartWrapper__header__right',\n    'leaflet-control-container',\n  ];\n  domElement.classList.add('transformingToPng');\n  return domToImage\n    .toBlob(domElement, {\n      filter: element => !classFiltered.includes(element.className),\n      bgcolor: 'white',\n      style: {\n        padding: `${padding}px`,\n        transform: `scale(${scale}) translate(${width / 2 / scale}px, ${height /\n          2 /\n          scale}px)`,\n      },\n      height: height * scale,\n      width: width * scale,\n    })\n    .then(blob => {\n      domElement.classList.remove('transformingToPng');\n      return blob;\n    });\n}\n\nexport function memoize(\n  fn,\n  hashFunction = args => JSON.stringify(args),\n  cacheSize = 30,\n) {\n  const cache = {};\n  return function memoizedFun(...args) {\n    const hash = hashFunction(args);\n    if (cache[hash]) {\n      return cache[hash];\n    }\n    const res = fn(...args);\n\n    cache[hash] = res;\n\n    const hashes = Object.keys(cache);\n    if (hashes.length > cacheSize) {\n      delete cache[hashes[0]];\n    }\n\n    return res;\n  };\n}\n\nexport function clickHandlers({ onClick, onDoubleClick }) {\n  let clicks = 0;\n  return function clickHandler(...args) {\n    clicks += 1;\n    if (clicks < 2) {\n      setTimeout(() => {\n        if (clicks < 2) {\n          onClick(...args);\n        } else {\n          onDoubleClick(...args);\n        }\n        clicks = 0;\n      }, 300);\n    }\n  };\n}\n\nexport function maxAndIndex(array) {\n  return array.reduce(\n    (res, value, i) => {\n      if (value > res.max) {\n        return { max: value, maxIndex: i };\n      }\n      return res;\n    },\n    {\n      max: 0,\n      maxIndex: 0,\n    },\n  );\n}\n","import { values, mapObjIndexed, mergeAll, groupBy, map, range } from 'ramda';\nimport { countriesSelector } from '../countries';\nimport {\n  parseMapOfStatistics,\n  addPopCountryStatistics,\n  memoize,\n  maxAndIndex,\n} from '../../utils';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return (\n    statistic && statistic.values[statistic.isGlobal ? 'WORLD' : countryCode]\n  );\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute(dataItem, _, data) {\n    const value = statistic.compute(dataItem, data);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year: dataItem.year, value: null }\n      : { year: dataItem.year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode, yearInterval },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n        yearInterval: statistic.isCompilation ? undefined : yearInterval,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  const interval = yearInterval || [\n    statistic.startingYear,\n    statistic.endingYear,\n  ];\n  return countryStatistic\n    ? countryStatistic.values.filter(\n        d => interval[0] <= d.year && d.year <= interval[1],\n      )\n    : [];\n}\n\nexport function countryStatisticsLoadedSelector(countryStatitics, state) {\n  return countryStatitics.every(countryStatistic =>\n    countryStatisticLoadedSelector(countryStatistic, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatistic, yearInterval = [0, 3000]) {\n  const statistics = values(mapOfStatistic);\n  const startingYears = statistics.map(statistic => statistic.startingYear);\n  const endingYears = statistics.map(statistic => statistic.endingYear);\n  const startingYear = Math.max(...startingYears, yearInterval[0]);\n  const endingYear = Math.min(...endingYears, yearInterval[1]);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (perCapita && !population)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction compiledCountryStatisticsSelectorFn(\n  {\n    mapOfCountryStatistics: baseMap,\n    countryCode,\n    perCapita,\n    yearInterval: inputYearInterval,\n  },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    baseMap,\n    countryCode,\n  );\n  const mapOfCountryStatistics = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    mapOfCountryStatistics,\n  );\n  const nullValues = map(() => null, mapOfStatistic);\n  const yearInterval = computeYearInterval(mapOfStatistic, inputYearInterval);\n  const mapOfStatisticValues = map(\n    countryStatistic =>\n      countryStatisticValuesSelector(\n        { ...countryStatistic, yearInterval },\n        state,\n      ),\n    mapOfCountryStatistics,\n  );\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n\n  const compiledStatistics = range(yearInterval[0], yearInterval[1] + 1)\n    .sort()\n    .map(year => ({\n      year,\n      ...nullValues,\n      ...mergeAll(allValuesByYear[year]),\n    }))\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed(({ countryCode: cc }, compileName) => {\n        const value = compiledValue[compileName];\n        const popCompileName = `pop/${cc}`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita && !mapOfStatistic[compileName].isIntensive,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, parsedMapOfCountryStatistics),\n    }));\n\n  return compiledStatistics;\n}\nexport const compiledCountryStatisticsSelector = memoize(\n  compiledCountryStatisticsSelectorFn,\n  args => JSON.stringify(args[0]),\n);\n\nexport function compiledStatisticForCountriesAndYear(\n  {\n    mapOfCountryStatistics: input,\n    statisticCode,\n    year,\n    perCapita = false,\n    withWorld = true,\n  },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = input || {\n    value: statisticCode,\n  };\n  const yearInterval = [year, year];\n\n  if (withWorld) {\n    countryCodes.push('WORLD');\n  }\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics,\n        countryCode,\n        perCapita,\n        yearInterval,\n      },\n      state,\n    );\n    const yearValue = countryStatisticValues[0];\n\n    return {\n      countryCode,\n      ...yearValue,\n    };\n  });\n  return countryValues;\n}\n\nexport function statisticSourcesSelector(statisticCodes, state) {\n  return statisticCodes.reduce((statisticSources, statisticCode) => {\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sources = values(statistic.source).map(code =>\n        statisticSelector(code, state),\n      );\n      return statisticSources.concat(sources);\n    }\n\n    return statisticSources.concat([statistic]);\n  }, []);\n}\n\nconst PEAK_THRESHOLD = 0.8;\nconst MAY_PEAK_THRESHOLD = 0.9;\nconst YEAR_AROUND_PEAK = 5;\nexport function statisticPeakYearSelector(countryStatistic, state) {\n  const data = countryStatisticValuesSelector(countryStatistic, state);\n  const dataLength = data.length;\n\n  if (data.length < 1) {\n    return null;\n  }\n\n  const { max, maxIndex } = maxAndIndex(data.map(v => v.value));\n  const maxData = data[maxIndex];\n  const lastValue = data[dataLength - 1].value;\n  const firstValue = data[0].value;\n  const mayPeakValue = MAY_PEAK_THRESHOLD * max;\n  const hasPeakValue = PEAK_THRESHOLD * max;\n\n  if (lastValue > mayPeakValue) {\n    // no simple peak\n    return null;\n  }\n\n  if (lastValue < hasPeakValue) {\n    // has a peak\n    if (maxIndex < 1) {\n      // peak at first value\n      return { ...maxData, sure: true, before: true };\n    }\n    if (firstValue > hasPeakValue) {\n      // may have peaked before\n      return { ...maxData, sure: false, before: true };\n    }\n    if (maxAndIndex < dataLength - YEAR_AROUND_PEAK) {\n      return { ...maxData, sure: false, before: false }; // may be a brief decrease\n    }\n    return { ...maxData, sure: true, before: false };\n  }\n\n  if (firstValue < hasPeakValue) {\n    return { ...maxData, sure: false, before: false };\n  }\n\n  return null;\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","import regression from 'regression';\n\nconst PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst CO2_INTENSITY_BY_SOURCE = {\n  coal: 820,\n  oil: 650,\n  gas: 490,\n  biomass: 230,\n  solar: 45,\n  geoth: 38,\n  hydro: 24,\n  nuclear: 12,\n  wind: 11,\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description:\n      'This indicator made up by dividing primary energy consumption by primary energy production, gives an indication on the level of self-sufficiency (or dependency) of a country.',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description:\n      'Measures the mass of CO2 by unit of energy that is emitted by the country.',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'FOSSIL_CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    scale: 'linear',\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: 'Includes hydroelectricity, solar, wind and tide productions.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description:\n      'Includes renewables and nuclear productions. Excludes biofuels at the moment.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'FOSSIL_RENTS_IN_GDP',\n    name: 'Fossil rents',\n    description: 'Share of all fossil rents (coal, oil & gas) in GDP',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      coal: 'COAL_RENTS_IN_GDP',\n      oil: 'OIL_RENTS_IN_GDP',\n      gas: 'GAS_RENTS_IN_GDP',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    isIntensive: true,\n    sourceAttribution: 'World Bank',\n    category: 'Others',\n    compute({ coal, gas, oil }) {\n      return coal * gas * oil;\n    },\n  },\n  {\n    code: 'OIL_RELATIVE_PRICE',\n    name: 'Oil relative price',\n    description: `Average time (in days) that an inhabitant need to work to buy a barrel of crude oil.\nTIME = OIL_PRICE / (GDP / POP)`,\n    unit: {\n      main: 'days',\n      base: 'days',\n    },\n    source: {\n      oilPrice: 'OIL_PRICE_USD',\n      gdp: 'GDP_USD',\n      pop: 'POPULATION',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    isIntensive: true,\n    category: 'Others',\n    compute({ oilPrice, gdp, pop }) {\n      return (oilPrice / ((gdp * 10 ** 9) / (pop * 10 ** 6))) * 365.25;\n    },\n  },\n  {\n    code: 'WIND_CAPACITY_POWER_LOAD',\n    name: 'Wind capacity power load',\n    description: `Average power load of wind capacity on a year (estimate)`,\n    unit: PERCENTAGE_UNIT,\n    source: {\n      capacity: 'WIND_CAPACITY_GW',\n      generation: 'WIND_GENERATION_TWH',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    isIntensive: true,\n    isCompilation: true,\n    category: 'Electricity',\n    scale: 'linear',\n    compute(_, data) {\n      const notNullData = data.filter(d => d.generation && d.capacity);\n      if (notNullData.length < 4) {\n        return null;\n      }\n\n      const array = notNullData.map(({ capacity, generation }) => [\n        capacity,\n        generation,\n      ]);\n      const result = regression.linear(array);\n      const res = ((result.equation[0] * 10 ** 3) / (365.25 * 24)) * 100;\n      const res2 = res > 100 || result.r2 < 0.9 ? null : res;\n\n      return res2;\n    },\n  },\n  {\n    code: 'SOLAR_CAPACITY_POWER_LOAD',\n    name: 'Solar capacity power load',\n    description: `Average power load of solar capacity on a year (estimate)`,\n    unit: PERCENTAGE_UNIT,\n    source: {\n      capacity: 'SOLAR_CAPACITY_GW',\n      generation: 'SOLAR_GENERATION_TWH',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    isIntensive: true,\n    isCompilation: true,\n    category: 'Electricity',\n    compute(_, data) {\n      const notNullData = data.filter(d => d.generation && d.capacity);\n      if (notNullData.length < 4) {\n        return null;\n      }\n\n      const array = notNullData.map(({ capacity, generation }) => [\n        capacity,\n        generation,\n      ]);\n      const result = regression.linear(array);\n      const res = ((result.equation[0] * 10 ** 3) / (365.25 * 24)) * 100;\n      const res2 = res > 50 || result.r2 < 0.9 ? null : res;\n\n      return res2;\n    },\n  },\n  {\n    code: 'GHG_EMISSIONS_GKWH',\n    name: 'Carbon intensity of electricity',\n    description: `Average GHG emissions of electricity production.\nCoal: 820 gCO₂eq/kWh\nOil: 650 gCO₂eq/kWh\nGas: 490 gCO₂eq/kWh\nBiomass: 230 gCO₂eq/kWh\nSolar: 45 gCO₂eq/kWh\nGeoth: 38 gCO₂eq/kWh\nHydro: 24 gCO₂eq/kWh\nNuclear: 12 gCO₂eq/kWh\nWind: 11 gCO₂eq/kWh\n`,\n    unit: {\n      main: 'gCO₂eq/kWh',\n      base: 'gCO₂eq/kWh',\n      factor: 1,\n    },\n    source: {\n      coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n      oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n      gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n      biomass: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n      solar: 'SOLAR_GENERATION_TWH',\n      renew: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n      hydro: 'HYDRO_GENERATION_TWH',\n      nuclear: 'NUCLEAR_GENERATION_TWH',\n      wind: 'WIND_GENERATION_TWH',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    isIntensive: true,\n    category: 'Climate change',\n    scale: 'linear',\n    colorScheme: 'CO2',\n    compute(sources) {\n      const { year, wind, solar, renew, ...rest } = sources;\n      const geoth = renew - wind - solar;\n      const source2 = { ...rest, wind, solar, geoth };\n      const total = Object.keys(source2).reduce(\n        (sum, key) => sum + (source2[key] || 0),\n        0,\n      );\n      const intensity = Object.keys(source2).reduce(\n        (sum, key) => sum + (source2[key] || 0) * CO2_INTENSITY_BY_SOURCE[key],\n        0,\n      );\n\n      return intensity / total;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.isGlobal && countryCode !== 'WORLD') {\n      dispatch(loadCountryStatistic({ statisticCode, countryCode: 'WORLD' }));\n      return;\n    }\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      const countryStatistics = sourceCodes.map(sourceCode => ({\n        statisticCode: sourceCode,\n        countryCode,\n      }));\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics(countryStatistics),\n      );\n      return;\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics(countryStatistics) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      countryStatistics.map(countryStatistic =>\n        dispatch(loadCountryStatistic(countryStatistic)),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import worldTopo from 'world-atlas/world/110m.json'; // TODO\nimport countriesData from 'world-countries/countries'; // TODO\nimport { merge } from 'topojson-client';\nimport { indexBy } from 'ramda';\n\nconst indexedCountries = {\n  ...indexBy(c => c.cca2, countriesData),\n  SU: { ccn3: 810 },\n};\n\nfunction computeGeojson(area) {\n  const countryAlpha3Codes = area.countryCodes.map(\n    countryCode => indexedCountries[countryCode].ccn3,\n  );\n  const geometries = worldTopo.objects.countries.geometries.filter(c =>\n    countryAlpha3Codes.includes(c.id),\n  );\n  return merge(worldTopo, geometries);\n}\n\nexport default async function getAreas() {\n  const res = await fetch('/data/areas.json');\n  const data = await res.json();\n\n  return data.map(area => ({\n    ...area,\n    alpha2Code: area.code,\n    commonName: area.name,\n    geojson: area.countryCodes ? computeGeojson(area) : null,\n  }));\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllAreas from '../api/areas';\n\nexport const AREAS_LOAD_ACTION = 'AREAS_LOAD_ACTION';\nexport const AREAS_RECEIVE_ACTION = 'AREAS_RECEIVE_ACTION';\n\nfunction loadAreasAction() {\n  return { type: AREAS_LOAD_ACTION };\n}\n\nfunction receiveAreasAction({ data, errors }) {\n  return { type: AREAS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllAreas() {\n  return function dispatchLoadAllAreas(dispatch) {\n    dispatch(loadAreasAction());\n    return getAllAreas()\n      .then(data =>\n        dispatch(\n          receiveAreasAction({\n            data: indexBy(prop('code'), data),\n          }),\n        ),\n      )\n      .catch(\n        errors =>\n          console.log(errors) && dispatch(receiveAreasAction({ errors })),\n      );\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction areasReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case AREAS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case AREAS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function areasLoadedSelector(state) {\n  return state.areas.loaded;\n}\n\nexport function areasSelector(state) {\n  return values(state.areas.data);\n}\n\nexport function areaSelector(areaCode, state) {\n  return state.areas.data[areaCode];\n}\n\nexport function areasOfCountrySelector(countryCode, state) {\n  return values(state.areas.data).filter(\n    area => area.countryCodes && area.countryCodes.includes(countryCode),\n  );\n}\n\nexport default areasReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\nimport { map } from 'ramda';\n\nimport countriesReducer from './countries';\nimport statisticsReducer, {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n} from './statistics';\nimport areasReducer from './areas';\n\nfunction actionSanitizer(action) {\n  if (\n    (action.type === COUNTRY_STATISTIC_RECEIVE_ACTION ||\n      action.type === STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION) &&\n    action.data\n  ) {\n    return { ...action, data: 'DATA' };\n  }\n  return action;\n}\n\nfunction stateSanitizer(state) {\n  return {\n    ...state,\n    countries: map(\n      country => ({ ...country, geojson: country.geojson && 'GEOJSON' }),\n      state.countries.data,\n    ),\n    areas: map(\n      area => ({ ...area, geojson: area.geojson && 'GEOJSON' }),\n      state.areas.data,\n    ),\n    statistics: map(\n      statistic => ({\n        ...statistic,\n        values: map(\n          country => ({\n            ...country,\n            values: country.values && `[${country.values.length}]`,\n          }),\n          statistic.values,\n        ),\n      }),\n      state.statistics.data,\n    ),\n  };\n}\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n  areas: areasReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  actionSanitizer,\n  stateSanitizer,\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import { Component } from 'react';\nimport { equals } from 'ramda';\n\nclass ScrollToTop extends Component {\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!equals(this.props, prevProps)) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default ScrollToTop;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n  category: PropTypes.string.isRequired,\n  sourceAttribution: PropTypes.string,\n  sourceUrl: PropTypes.string,\n  sourceDescriptionUrl: PropTypes.string,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n\nexport const AreaType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  countries: PropTypes.arrayOf(CountryType),\n});\n\nexport const LocationType = PropTypes.shape({\n  hash: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n});\n\nexport const FuelIndicatorsType = PropTypes.shape({\n  coal: PropTypes.bool,\n  oil: PropTypes.bool,\n  gas: PropTypes.bool,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map, range } from 'ramda';\nimport { scaleLog, scaleLinear } from 'd3-scale';\nimport * as d3Colors from 'd3-scale-chromatic';\n\nimport { Button } from 'antd';\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\nimport Control from 'react-leaflet-control';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  testScreenType,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '100%';\nconst NA_COLOR = '#888';\nconst BORDER_COLOR = 'black';\nconst LEGEND_COLORS_COUNT = 4;\nconst LEGEND_WIDTH = 300; // px\nconst DEFAULT_COLORS_SCHEME = 'YlGnBu';\n\nfunction getInterpolators(scaleString, scheme, min, max) {\n  const scaleType = scaleString === 'linear' ? scaleLinear : scaleLog;\n\n  if (scheme === 'CO2') {\n    const colors = ['#2AA364', '#F5EB4D', '#9E4229', '#381d02'];\n    return {\n      name: 'CO2',\n      map: scaleType()\n        .domain([0, 150, 600, 750])\n        .range(colors)\n        .clamp(true),\n      legend: scaleType()\n        .domain([0, 1 / 5, 4 / 5, 1])\n        .range(colors)\n        .clamp(true),\n    };\n  }\n\n  const colorInterpolator = d3Colors[`interpolate${DEFAULT_COLORS_SCHEME}`];\n  const scale = scaleType().domain([min, max]);\n  return {\n    map: value =>\n      value === 0 ? colorInterpolator(0) : colorInterpolator(scale(value)),\n    legend: colorInterpolator,\n  };\n}\n\nfunction computeColorMap(data, isLoaded, interpolator) {\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (!isLoaded || value === null) {\n      return { color: NA_COLOR, value };\n    }\n    return {\n      color: interpolator(value),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    selectedCountries,\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    scale,\n    minZoom,\n    onMapChange,\n    isLoaded,\n    onCountryDblClick,\n    onControlButtonClick,\n  } = props;\n  const selectedCountryByCode = indexBy(c => c.alpha2Code, selectedCountries);\n  const selectedData = data.filter(\n    d => d.countryCode !== 'WORLD' && selectedCountryByCode[d.countryCode],\n  );\n  const maxValue = Math.max(...selectedData.map(d => d.value));\n  const minValue = Math.min(\n    ...selectedData.filter(d => d.value).map(d => d.value),\n  );\n\n  const interpolators = getInterpolators(\n    currentStatistic.scale || scale,\n    currentStatistic.colorScheme,\n    minValue,\n    maxValue,\n  );\n  const colorValueMap = computeColorMap(\n    selectedData,\n    isLoaded,\n    interpolators.map,\n  );\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <div className=\"WorldMap__map\">\n        <Map\n          minZoom={minZoom}\n          zoom={minZoom}\n          zoomSnap={0.1}\n          zoomDelta={0.5}\n          center={[20, 30]}\n          style={{ height: MAP_HEIGHT, zIndex: 0 }}\n          dragging={!isMobileOrTablet()}\n          onZoomend={onMapChange}\n          onMoveend={onMapChange}\n        >\n          {countries.map(country => {\n            const countryData = colorValueMap[country.alpha2Code];\n            return (\n              <GeoJSON\n                key={country.alpha2Code + currentStatistic.code}\n                data={country.geojson}\n                coordsToLatLng={coordsToLatLng}\n                onEachFeature={(feature, layer) =>\n                  layer.on('dblclick', () => {\n                    onCountryDblClick(country);\n                  })\n                }\n                ref={ref =>\n                  ref &&\n                  ref.leafletElement.setStyle({\n                    color: BORDER_COLOR,\n                    weight: 0.5,\n                    fillColor: countryData ? countryData.color : NA_COLOR,\n                    fillOpacity: 1,\n                  })\n                }\n              >\n                <Tooltip sticky>\n                  {`${country.commonName}: ${formatNumber(\n                    countryData && countryData.value,\n                  )}`}\n                </Tooltip>\n              </GeoJSON>\n            );\n          })}\n          {dependentCountries.map(country => (\n            <GeoJSON\n              key={country.alpha2Code}\n              data={country.geojson}\n              style={{\n                fillOpacity: 1,\n                color: BORDER_COLOR,\n                weight: 0.5,\n                fillColor: NA_COLOR,\n              }}\n            />\n          ))}\n          {!testScreenType('md') && (\n            <Control position=\"topleft\">\n              <Button icon=\"control\" onClick={onControlButtonClick} />\n            </Control>\n          )}\n        </Map>\n      </div>\n      <div className=\"WorldMap__legend\">\n        <div>\n          <div>\n            {`${currentStatistic.name} (${displayUnit(\n              currentStatistic.unit,\n              perCapita,\n            )})`}\n          </div>\n          <div className=\"WorldMap__legend__colors\">\n            <div>\n              <div className=\"WorldMap__legend__gradient\">\n                {range(0, LEGEND_COLORS_COUNT).map(i => (\n                  <div\n                    key={i}\n                    className=\"WorldMap__legend__gradient__item\"\n                    style={{\n                      width: LEGEND_WIDTH / LEGEND_COLORS_COUNT,\n                      background: `linear-gradient(to right, ${interpolators.legend(\n                        i / LEGEND_COLORS_COUNT,\n                      )}, ${interpolators.legend(\n                        (i + 1) / LEGEND_COLORS_COUNT,\n                      )}`,\n                    }}\n                  />\n                ))}\n              </div>\n              <div className=\"WorldMap__legend__gradientRange\">\n                <div>0</div>\n                <div>{formatNumber(maxValue)}</div>\n              </div>\n            </div>\n            <div>\n              <div\n                className=\"WorldMap__legend__NA__square\"\n                style={{ backgroundColor: NA_COLOR }}\n              />\n              <div>NA</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"WorldMap__sources toPng\">\n        From http://worldenergydata.tk - Sources: IEA, World Bank\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  selectedCountries: PropTypes.arrayOf(CountryType).isRequired,\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  scale: PropTypes.string,\n  minZoom: PropTypes.number,\n  onMapChange: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  onCountryDblClick: PropTypes.func.isRequired,\n  onControlButtonClick: PropTypes.func.isRequired,\n};\n\nWorldMap.defaultProps = {\n  scale: null,\n  minZoom: 1.8,\n};\n\nexport default WorldMap;\n","import React, { Component } from 'react';\nimport { Slider } from 'antd';\n\nclass ControlledSlider extends Component {\n  constructor() {\n    super();\n    this.state = { value: undefined };\n  }\n\n  componentDidMount() {\n    const { defaultValue } = this.props;\n    this.setState({\n      value: defaultValue,\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { defaultValue } = this.props;\n    if (defaultValue !== nextProps.defaultValue) {\n      this.setState({ value: nextProps.defaultValue });\n    }\n  }\n\n  setValue(value) {\n    const { onChange } = this.props;\n    this.setState({ value });\n    onChange(value);\n  }\n\n  render() {\n    const { value } = this.state;\n    return (\n      <Slider {...this.props} value={value} onChange={v => this.setValue(v)} />\n    );\n  }\n}\n\nexport default ControlledSlider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Popover, Button } from 'antd';\n\nimport { StatisticType } from '../utils/types';\n\nfunction StatisticDetails(props) {\n  const { statisticSources, description } = props;\n  const descriptionLines = description && description.split('\\n');\n\n  return (\n    <div className=\"StatisticDetails\">\n      <Popover\n        title=\"Details\"\n        arrowPointAtCenter\n        overlayStyle={{ maxWidth: '300px' }}\n        content={\n          // eslint-disable-next-line react/jsx-wrap-multilines\n          <div>\n            {description && (\n              <div>\n                <strong>Description : </strong>\n                {`${descriptionLines[0]}`}\n              </div>\n            )}\n            <div>\n              <strong>\n                {`Source${statisticSources.length > 1 ? 's' : ''}`}\n              </strong>\n              <ul className=\"StatisticDetails__sources\">\n                {statisticSources.map(stat => (\n                  <li key={stat.code}>\n                    <a\n                      href={stat.sourceUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {`${stat.name} (${stat.sourceAttribution})`}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        }\n        placement=\"bottomRight\"\n      >\n        <Button\n          size=\"small\"\n          icon=\"info-circle\"\n          style={{ marginRight: '5px' }}\n        />\n      </Popover>\n    </div>\n  );\n}\n\nStatisticDetails.propTypes = {\n  description: PropTypes.string,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n};\n\nStatisticDetails.defaultProps = {\n  description: null,\n};\n\nexport default StatisticDetails;\n","function fallbackCopyTextToClipboard(text, element = window.body) {\n  const textArea = document.createElement('textarea');\n  textArea.value = text;\n  element.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    const successful = document.execCommand('copy');\n    element.removeChild(textArea);\n    return successful\n      ? Promise.resolve()\n      : Promise.reject(new Error('fallbackCopyTextToClipboard error'));\n  } catch (err) {\n    element.removeChild(textArea);\n    throw Promise.reject(err);\n  }\n}\nfunction copyTextToClipboard(text, element) {\n  return navigator.clipboard\n    ? navigator.clipboard.writeText(text)\n    : fallbackCopyTextToClipboard(text, element);\n}\n\nexport default copyTextToClipboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { saveAs } from 'file-saver';\nimport { withRouter } from 'react-router-dom';\n\nimport { Button, Dropdown, Menu, Icon, message } from 'antd';\nimport { chartToPngBlob } from '../utils';\nimport copyToClipboard from '../utils/copyToClipboard';\nimport { LocationType } from '../utils/types';\n\nfunction ShareChartComponent(props) {\n  const { id, chartRef, query, location, noHash } = props;\n  return (\n    <div className=\"ShareChartComponent\">\n      <Dropdown\n        overlay={\n          // eslint-disable-next-line\n          <Menu\n            onClick={({ key }) => {\n              if (key === 'png') {\n                chartToPngBlob(chartRef.current, 2)\n                  .then(blob => saveAs(blob, `${id}.png`))\n                  .catch(() => message.error('An error occured !'));\n              } else if (key === 'csv') {\n                const { data, statistics } = props;\n                const compileNames = Object.keys(statistics);\n                const headers = compileNames.map(\n                  compileName => statistics[compileName].code,\n                );\n                const dataLines = data.map(dataItem =>\n                  compileNames.map(compileName => dataItem[compileName]),\n                );\n                const lines = [headers, ...dataLines];\n                const csv = lines.map(l => l.join(',')).join('\\n');\n                const blob = new Blob([csv], {\n                  type: 'text/plain;charset=utf-8',\n                });\n                saveAs(blob, `${id}.csv`);\n              } else if (key === 'link') {\n                const { origin } = window.location;\n                const { pathname } = location;\n\n                const link = `${origin}#${pathname}${query}${\n                  noHash ? '' : `#${id}`\n                }`;\n                copyToClipboard(link, chartRef.current)\n                  .then(() => message.success('Copied !'))\n                  .catch(() => message.error('An error occured !'));\n              }\n            }}\n          >\n            <Menu.Item key=\"link\">\n              <Icon type=\"copy\" theme=\"filled\" />\n              Copy link\n            </Menu.Item>\n            <Menu.Item key=\"png\">\n              <Icon type=\"picture\" theme=\"filled\" />\n              .png\n            </Menu.Item>\n            <Menu.Item key=\"csv\">\n              <Icon type=\"file-text\" theme=\"filled\" />\n              .csv\n            </Menu.Item>\n          </Menu>\n        }\n      >\n        <Button size=\"small\" icon=\"share-alt\" style={{ marginRight: '5px' }} />\n      </Dropdown>\n    </div>\n  );\n}\n\nShareChartComponent.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  chartRef: PropTypes.any.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  statistics: PropTypes.object.isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  id: PropTypes.string.isRequired,\n  query: PropTypes.string,\n  location: LocationType.isRequired,\n  noHash: PropTypes.bool,\n};\n\nShareChartComponent.defaultProps = {\n  query: '',\n  noHash: false,\n};\n\nexport default withRouter(ShareChartComponent);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Radio, Popover, Button, Icon } from 'antd';\nimport debounce from 'lodash.debounce';\nimport qs from 'qs';\n\nimport { sortBy, groupBy, indexBy } from 'ramda';\n\nimport Slider from './ControlledSlider';\nimport StatisticDetails from '../../../components/StatisticDetails';\nimport ShareChartComponent from '../../../components/ShareChartComponent';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nconst WITH_SCALE_SETTINGS = false;\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    statisticSources,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n    mapRef,\n    scale,\n    setScale,\n  } = props;\n\n  const countryByCode = indexBy(c => c.alpha2Code, countries);\n  const formatedData = data\n    .filter(s => s.value !== null && countryByCode[s.countryCode])\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countryByCode[s.countryCode].commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  if (currentStatistic.isIntensive && perCapita) {\n    setPerCapita(false);\n  }\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <div className=\"StatisticExplorer__options\">\n        <Radio.Group\n          style={{ marginBottom: '10px' }}\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button\n            value\n            disabled={\n              currentStatistic.code === 'POPULATION' ||\n              currentStatistic.isIntensive\n            }\n          >\n            Per capita\n          </Radio.Button>\n        </Radio.Group>\n        <div className=\"StatisticExplorer__options__right\">\n          <ShareChartComponent\n            id={currentStatistic.name.replace(/ /g, '_')}\n            chartRef={mapRef}\n            statistics={{\n              countryCode: { code: 'COUNTRY_CODE' },\n              value: currentStatistic,\n            }}\n            data={data}\n            query={`?${qs.stringify({\n              statisticCode: currentStatistic.code,\n              perCapita,\n              currentYear,\n            })}`}\n            noHash\n          />\n          <StatisticDetails\n            statisticSources={statisticSources}\n            description={currentStatistic.description}\n          />\n          {WITH_SCALE_SETTINGS && (\n            <Popover\n              title=\"Settings\"\n              arrowPointAtCenter\n              content={\n                // eslint-disable-next-line react/jsx-wrap-multilines\n                <div>\n                  {'Scale '}\n                  <Radio.Group\n                    buttonStyle=\"solid\"\n                    size=\"small\"\n                    value={scale}\n                    onChange={e => setScale(e.target.value)}\n                  >\n                    <Radio.Button value=\"log\">Log</Radio.Button>\n                    <Radio.Button value=\"linear\">Linear</Radio.Button>\n                  </Radio.Group>\n                </div>\n              }\n              placement=\"bottomRight\"\n            >\n              <Button size=\"small\">\n                <Icon type=\"setting\" theme=\"filled\" />\n              </Button>\n            </Popover>\n          )}\n        </div>\n      </div>\n      <Table\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: '50%',\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  mapRef: PropTypes.object.isRequired,\n  scale: PropTypes.string,\n  setScale: PropTypes.func.isRequired,\n};\n\nStatisticExplorer.defaultProps = {\n  scale: null,\n};\n\nexport default StatisticExplorer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label, labelColor, displayFilter, totalFilter, units } = props;\n    const filteredPayload = payload.filter(displayFilter);\n\n    if (filteredPayload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload\n      .filter(totalFilter)\n      .reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = filteredPayload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div style={{ color: labelColor, fontWeight: 'bold' }}>{label}</div>\n        <div>\n          {filteredPayload.map((p, i) => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey || name} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit || units[i]}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  labelColor: PropTypes.string,\n  withTotal: PropTypes.bool,\n  displayFilter: PropTypes.func,\n  totalFilter: PropTypes.func,\n  units: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  labelColor: 'black',\n  withTotal: false,\n  displayFilter: i => i,\n  totalFilter: i => i,\n  units: {},\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  LabelList,\n  Legend,\n} from 'recharts';\nimport { toPairs, range } from 'ramda';\nimport regression from 'regression';\n\nimport CustomTooltip from '../../CountryView/components/CustomTooltip';\n\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nconst RESOLUTION = 100;\nconst COLORS = {\n  Africa: 'black',\n  Europe: 'blue',\n  Americas: 'red',\n  Asia: 'green',\n  Oceania: 'orange',\n};\nconst legend = toPairs(COLORS).map(array => ({\n  value: array[0],\n  color: array[1],\n}));\n\nconst DISPLAYED_COUNTRIES = [\n  'CN',\n  'US',\n  'FR',\n  'DE',\n  'GB',\n  'BR',\n  'CA',\n  'IN',\n  'RU',\n  'ZA',\n];\n\nfunction HDIByEnergyChart(props) {\n  const { data, statistics, height, countries } = props;\n\n  const finalData = data\n    .filter(d => d.energy && d.hdi)\n    .map(d => {\n      const country = countries.find(c => c.alpha2Code === d.countryCode);\n      return {\n        ...d,\n        r: Math.max(Math.log(d[`pop/${d.countryCode}`]) + 1, 2),\n        commonName: country.commonName,\n        color: COLORS[country.region],\n        label: DISPLAYED_COUNTRIES.includes(d.countryCode) ? d.countryCode : '',\n      };\n    })\n    .sort((a, b) => (a.r < b.r ? 1 : -1));\n  const dataArray = finalData.map(d => [d.energy, d.hdi]);\n  const { equation } = regression.logarithmic(dataArray);\n  const min = Math.min(...finalData.map(d => d.energy));\n  const max = Math.max(...finalData.map(d => d.energy));\n  const data2 = range(0, RESOLUTION + 1)\n    .map(i => {\n      const energy = min + (i / RESOLUTION) * (max - min);\n      return {\n        energy,\n        hdi: equation[1] * Math.log(energy) + equation[0],\n      };\n    })\n    .filter(d => d.hdi < 1);\n\n  return (\n    <div className=\"HDIByEnergyChart\">\n      <ResponsiveContainer height={height}>\n        <ScatterChart data={finalData} margin={{ bottom: 50 }}>\n          <Scatter data={data2} line={{ stroke: 'grey' }} shape={() => null} />\n          <Scatter\n            shape={props2 => (\n              <circle\n                cx={props2.cx}\n                cy={props2.cy}\n                r={props2.r}\n                fill={props2.color}\n              />\n            )}\n          >\n            <LabelList dataKey=\"label\" position=\"top\" />\n          </Scatter>\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"energy\"\n            name={statistics.energy.name}\n            type=\"number\"\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.energy.name} (${displayUnit(\n                statistics.energy.unit,\n                true,\n              )})`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"hdi\"\n            name={statistics.hdi.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n            domain={[0.2, 1]}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  `${\n                    countries.find(\n                      c =>\n                        c.alpha2Code === props2.payload[0].payload.countryCode,\n                    ).commonName\n                  } (${props2.payload[0].payload.countryCode})`\n                }\n                labelColor={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.color\n                }\n                units={{\n                  '0': `${displayUnit(statistics.energy.unit, true)}`,\n                  '1': statistics.hdi.unit.main,\n                }}\n              />\n            )}\n          />\n          <Legend verticalAlign=\"top\" payload={legend} />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nHDIByEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      hdi: PropTypes.number,\n      energy: PropTypes.number,\n    }),\n  ).isRequired,\n  countries: PropTypes.arrayOf(CountryType.isRequired).isRequired,\n  statistics: PropTypes.shape({\n    hdi: StatisticType,\n    energy: StatisticType,\n  }).isRequired,\n  color: PropTypes.string,\n  height: PropTypes.number.isRequired,\n};\n\nHDIByEnergyChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default HDIByEnergyChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Switch } from 'antd';\n\nfunction ChartSettings(props) {\n  const {\n    perCapitaSwitch,\n    stackedSwitch,\n    perCapita,\n    stacked,\n    setPerCapita,\n    setStacked,\n  } = props;\n\n  return (\n    <div className=\"ChartSettings\">\n      {perCapitaSwitch && (\n        <div>\n          {'Per capita '}\n          <Switch size=\"small\" checked={perCapita} onChange={setPerCapita} />\n        </div>\n      )}\n      {stackedSwitch && (\n        <div>\n          {'Stacked '}\n          <Switch size=\"small\" checked={stacked} onChange={setStacked} />\n        </div>\n      )}\n    </div>\n  );\n}\nChartSettings.propTypes = {\n  perCapitaSwitch: PropTypes.bool.isRequired,\n  stackedSwitch: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  setStacked: PropTypes.func.isRequired,\n};\n\nexport default ChartSettings;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values, uniq } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n  statisticSourcesSelector,\n} from '../store/statistics';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../utils';\nimport { countrySelector } from '../store/countries';\n\nconst StatisticsLoader = buildLoader(({ countryStatistics }) =>\n  loadCountryStatistics(countryStatistics),\n);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction mapStateToProps(state, props) {\n  const {\n    perCapita,\n    statisticCode,\n    mapOfCountryStatistics: mapOfCountryStatisticsInput,\n    countryCode,\n    withReference,\n    referenceCountryCode = 'WORLD',\n  } = props;\n  const isIntensive =\n    statisticCode && statisticSelector(statisticCode, state).isIntensive;\n  const mapOfCountryStatistics =\n    (perCapita || isIntensive) && withReference\n      ? {\n          ...mapOfCountryStatisticsInput,\n          reference: {\n            countryCode: referenceCountryCode,\n            statisticCode:\n              typeof withReference === 'boolean'\n                ? statisticCode\n                : withReference,\n          },\n        }\n      : mapOfCountryStatisticsInput;\n\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n  );\n  const mapOfCountryStatisticsToLoad = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const countryStatisticsToLoad = values(mapOfCountryStatisticsToLoad);\n  const statisticCodes = uniq(\n    countryStatisticsToLoad.map(c => c.statisticCode),\n  );\n  const isLoaded = countryStatisticsLoadedSelector(\n    countryStatisticsToLoad,\n    state,\n  );\n  const data = isLoaded\n    ? compiledCountryStatisticsSelector(\n        {\n          mapOfCountryStatistics,\n          countryCode: props.countryCode,\n          perCapita: props.perCapita,\n        },\n        state,\n      )\n    : [];\n\n  return {\n    data,\n    statistics: map(\n      ({ statisticCode: code }) => statisticSelector(code, state),\n      parsedMapOfCountryStatistics,\n    ),\n    statisticSources: statisticSourcesSelector(statisticCodes, state),\n    isLoaded,\n    countryStatisticsToLoad,\n    country: countrySelector(countryCode, state),\n    referenceCountry: countrySelector(referenceCountryCode, state),\n  };\n}\n\nfunction withCountryStatistics(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) =>\n      mapStateToProps(state, {\n        mapOfCountryStatistics: mapOfCountryStatisticsSelector(state, props),\n        ...props,\n      }),\n    )(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader countryStatistics={props.countryStatisticsToLoad} />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistics;\n","import React, { Component } from 'react';\nimport { values } from 'ramda';\nimport { withStateHandlers, compose, defaultProps } from 'recompose';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\n\nimport { Icon, Popover, Button } from 'antd';\n\nimport { displayUnit } from '../utils';\nimport StatisticDetails from '../components/StatisticDetails';\n\nimport ChartSettings from './components/ChartSettings';\nimport ShareChartComponent from '../components/ShareChartComponent';\nimport withCountryStatistics from './withCountryStatistics';\n\nconst defaultHeight = 200;\n\nexport function buildChartWrapper(WrappedChart) {\n  return class ChartWrapper extends Component {\n    constructor() {\n      super();\n      this.chartRef = React.createRef();\n      this.buttonRef = React.createRef();\n    }\n\n    render() {\n      const {\n        title,\n        description,\n        statistics,\n        statisticSources,\n        perCapita,\n        stacked,\n        setPerCapita,\n        setStacked,\n        data,\n        withReference,\n        referenceCountryCode,\n        location,\n        perCapitaSwitch,\n        stackedSwitch,\n        hasSettings,\n      } = this.props;\n      const statisticList = values(statistics);\n      const statistic = statisticList[0];\n      const id = (title\n        ? title.replace(/ /g, '_')\n        : statistic.name.replace(/ /g, '_')\n      ).toLowerCase();\n\n      const descriptionStatistic = statisticList.find(\n        s => s.code === description,\n      );\n      const finalDescription =\n        statisticList.length < 2\n          ? description || statistic.description\n          : (descriptionStatistic && descriptionStatistic.description) ||\n            description;\n      const hash = location.hash.substr(1);\n      const style =\n        hash === id\n          ? {\n              boxShadow: '0px 0px 10px 1px rgba(0,0,0,0.5)',\n            }\n          : {};\n\n      return (\n        <div id={id} className=\"ChartWrapper\" ref={this.chartRef} style={style}>\n          <div className=\"ChartWrapper__header\">\n            <div className=\"ChartWrapper__header__left\">\n              <span className=\"ChartWrapper__title\">\n                {title || statistic.name}\n              </span>\n              <span className=\"ChartWrapper__title__unit\">\n                {statistic.unit.main === ''\n                  ? ''\n                  : ` (${displayUnit(statistic.unit, perCapita)})`}\n              </span>\n            </div>\n            <div\n              className=\"ChartWrapper__header__right\"\n              data-html2canvas-ignore\n            >\n              <ShareChartComponent\n                id={id}\n                chartRef={this.chartRef}\n                statistics={{ year: { code: 'YEAR' }, ...statistics }}\n                data={data}\n                {...(withReference\n                  ? {\n                      query: `?${qs.stringify({\n                        referenceCountry: referenceCountryCode,\n                      })}`,\n                    }\n                  : {})}\n              />\n              <StatisticDetails\n                statisticSources={statisticSources}\n                description={finalDescription}\n              />\n              {hasSettings && (\n                <div>\n                  <Popover\n                    title=\"Settings\"\n                    arrowPointAtCenter\n                    content={\n                      // eslint-disable-next-line react/jsx-wrap-multilines\n                      <ChartSettings\n                        perCapitaSwitch={perCapitaSwitch}\n                        stackedSwitch={stackedSwitch}\n                        stacked={stacked}\n                        perCapita={perCapita}\n                        setPerCapita={setPerCapita}\n                        setStacked={setStacked}\n                      />\n                    }\n                    placement=\"bottomRight\"\n                  >\n                    <Button size=\"small\">\n                      <Icon type=\"setting\" theme=\"filled\" />\n                    </Button>\n                  </Popover>\n                </div>\n              )}\n            </div>\n          </div>\n          <WrappedChart {...this.props} />\n          <div className=\"ChartWrapper__footer toPng\">\n            From http://worldenergydata.tk - Sources: IEA, World Bank\n          </div>\n        </div>\n      );\n    }\n  };\n}\n\nfunction buildChart(options = {}) {\n  const {\n    mapOfCountryStatisticsSelector,\n    perCapitaSwitch = false,\n    stackedSwitch = false,\n    height = defaultHeight,\n  } = options;\n  const hasSettings = perCapitaSwitch || stackedSwitch;\n  const hocs = [\n    withRouter,\n    defaultProps({\n      perCapitaSwitch,\n      stackedSwitch,\n      hasSettings,\n      height,\n      perCapita: false,\n      stacked: false,\n    }),\n  ];\n\n  if (hasSettings) {\n    hocs.push(\n      withStateHandlers(\n        ({ defaultPerCapita = false, defaultStacked = false }) => ({\n          perCapita: defaultPerCapita,\n          stacked: defaultStacked,\n        }),\n        {\n          setPerCapita: () => perCapita => ({ perCapita }),\n          setStacked: () => stacked => ({ stacked }),\n        },\n      ),\n    );\n  }\n\n  hocs.push(withCountryStatistics(mapOfCountryStatisticsSelector));\n  hocs.push(buildChartWrapper);\n\n  return compose(...hocs);\n}\n\nexport default buildChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport { values, map } from 'ramda';\n\nimport { withRouter } from 'react-router-dom';\n\nimport { Spin } from 'antd';\nimport HDIByEnergyChart from '../components/HDIByEnergyChart';\n\nimport { buildChartWrapper } from '../../../HOC/buildChart';\nimport { countriesSelector } from '../../../store/countries';\nimport {\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../../store/statistics';\n\nconst STATISTICS_MAP = {\n  hdi: 'HUMAN_DEVELOPMENT_INDEX',\n  energy: 'FINAL_ENERGY_CONSUMPTION_MTOE',\n};\nconst STATISTICS_CODES = values(STATISTICS_MAP).concat(['POPULATION']);\n\nclass HDIByEnergyChartLoader extends Component {\n  componentDidMount() {\n    const { loadStatistic } = this.props;\n    STATISTICS_CODES.map(loadStatistic);\n  }\n\n  render() {\n    const { isLoaded } = this.props;\n    return (\n      <Spin spinning={!isLoaded}>\n        <HDIByEnergyChart {...this.props} />\n      </Spin>\n    );\n  }\n}\n\nHDIByEnergyChartLoader.propTypes = {\n  loadStatistic: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nconst hocs = [\n  withRouter,\n  connect(\n    state => ({\n      countries: countriesSelector(state),\n      statisticSources: statisticSourcesSelector(STATISTICS_CODES, state),\n      isLoaded: STATISTICS_CODES.every(statisticCode =>\n        statisticOfAllCountriesLoadedSelector(statisticCode, state),\n      ),\n      statistics: map(\n        statisticCode => statisticSelector(statisticCode, state),\n        STATISTICS_MAP,\n      ),\n      data: compiledStatisticForCountriesAndYear(\n        {\n          mapOfCountryStatistics: STATISTICS_MAP,\n          year: 2016,\n          perCapita: true,\n          withWorld: false,\n        },\n        state,\n      ),\n    }),\n    {\n      loadStatistic: loadStatisticOfCountries,\n    },\n  ),\n  buildChartWrapper,\n];\n\nconst HDIByEnergyChartContainer = compose(...hocs)(HDIByEnergyChartLoader);\n\nexport default HDIByEnergyChartContainer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport qs from 'qs';\n\nimport { Row, Col, Drawer } from 'antd';\nimport ScrollToTop from '../../components/ScrollToTop';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\nimport HDIByEnergyChartContainer from './containers/HDIByEnergyChartContainer';\n\nimport {\n  countriesSelector,\n  countriesInBounds,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../store/statistics';\nimport { testScreenType } from '../../utils';\n\nfunction f(statisticCode, perCapita) {\n  // TODO\n  return perCapita ? [statisticCode, 'POPULATION'] : [statisticCode];\n}\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    selectedCountries: countriesInBounds(boundsFilter, state),\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita, boundsFilter }) => ({\n    countries: countriesInBounds(boundsFilter, state),\n    statistics: allStatisticsSelector(state).filter(s => !s.isGlobal),\n    currentStatistic: statisticSelector(statisticCode, state),\n    statisticSources: statisticSourcesSelector(\n      f(statisticCode, perCapita),\n      state,\n    ),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nconst MIN_ZOOM = 2;\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      scale: null,\n      boundsFilter: null,\n      drawerIsOpen: false,\n    };\n    this.mapRef = React.createRef();\n    this.onMapChange = e =>\n      this.setFilterBounds(e.target.getBounds(), e.target.getZoom());\n    this.StatisticDiv = ({ children }) => {\n      const { drawerIsOpen } = this.state;\n      return !testScreenType('md') ? (\n        <Drawer\n          title=\"Map Control\"\n          placement=\"right\"\n          closable\n          onClose={() => this.setDrawerState(false)}\n          visible={drawerIsOpen}\n          width=\"300px\"\n        >\n          {children}\n        </Drawer>\n      ) : (\n        <Col className=\"hideOnMobile\" md={8}>\n          {children}\n        </Col>\n      );\n    };\n  }\n\n  componentDidMount() {\n    const { loadStatistic, statisticCode, perCapita } = this.props;\n\n    loadStatistic(statisticCode);\n\n    if (perCapita) {\n      loadStatistic('POPULATION');\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { loadStatistic, statisticCode, perCapita } = this.props;\n    if (statisticCode !== prevProps.statisticCode) {\n      loadStatistic(statisticCode);\n    }\n    if (perCapita !== prevProps.perCapita && perCapita) {\n      loadStatistic('POPULATION');\n    }\n  }\n\n  setParameters(parameters) {\n    const { statisticCode, perCapita, currentYear, goTo } = this.props;\n    const newPerCapita =\n      parameters.perCapita === undefined ? perCapita : parameters.perCapita;\n\n    const newParameters = {\n      statisticCode,\n      currentYear,\n      ...parameters,\n      perCapita: newPerCapita && parameters.statisticCode !== 'POPULATION',\n    };\n    goTo(`?${qs.stringify(newParameters)}`);\n  }\n\n  setFilterBounds(bounds, zoom) {\n    this.setState({ boundsFilter: zoom === MIN_ZOOM ? null : bounds });\n  }\n\n  setScale(scale) {\n    this.setState({ scale });\n  }\n\n  setDrawerState(isOpen) {\n    this.setState({ drawerIsOpen: isOpen });\n  }\n\n  render() {\n    const {\n      goTo,\n      currentYear,\n      statisticCode,\n      perCapita,\n      location,\n    } = this.props;\n    const { scale, boundsFilter, drawerIsOpen } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <ScrollToTop />\n        <div className=\"hideOnMobile\">\n          <Row>\n            <h1>Welcome to the World Energy Data Explorer</h1>\n          </Row>\n        </div>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <div ref={this.mapRef}>\n              <ConnectedWorldMap\n                statisticCode={statisticCode}\n                currentYear={currentYear}\n                perCapita={perCapita}\n                scale={scale}\n                minZoom={MIN_ZOOM}\n                onMapChange={this.onMapChange}\n                boundsFilter={boundsFilter}\n                onCountryDblClick={country =>\n                  goTo(`country/${country.alpha2Code}`)\n                }\n                onControlButtonClick={() => this.setDrawerState(!drawerIsOpen)}\n              />\n            </div>\n          </Col>\n          <this.StatisticDiv>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => goTo(`country/${record.countryCode}`)}\n              setYear={year => this.setParameters({ currentYear: year })}\n              setStatistic={value =>\n                this.setParameters({ statisticCode: value })\n              }\n              setPerCapita={value => this.setParameters({ perCapita: value })}\n              mapRef={this.mapRef}\n              scale={scale}\n              setScale={value => this.setScale(value)}\n              boundsFilter={boundsFilter}\n            />\n          </this.StatisticDiv>\n          {location.search.includes('beta') && (\n            <Col md={24} style={{ marginTop: 20, backgroundColor: 'white' }}>\n              <HDIByEnergyChartContainer\n                title=\"Human development index according to energy in 2016\"\n                description=\"size of circle depends on population\"\n                height={600}\n              />\n            </Col>\n          )}\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  loadStatistic: PropTypes.func.isRequired,\n  statisticCode: PropTypes.string,\n  perCapita: PropTypes.bool.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  goTo: PropTypes.func.isRequired,\n  location: PropTypes.shape({ search: PropTypes.string.isRequired }).isRequired,\n};\n\nHomeView.defaultProps = {\n  statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n};\n\nexport default connect(\n  (state, props) => {\n    const { search } = props.location;\n    const queryObject = search ? qs.parse(search.substr(1)) : {};\n    return {\n      goTo(path) {\n        props.history.push(path);\n      },\n      currentYear: Number(queryObject.currentYear) || 2010,\n      perCapita: queryObject.perCapita === 'true',\n      statisticCode: queryObject.statisticCode,\n    };\n  },\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import { countrySelector, countriesSelector } from './countries';\nimport { areaSelector, areasOfCountrySelector, areasSelector } from './areas';\n\nexport function countryWithAreasSelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  const areas = areasOfCountrySelector(countryCode, state);\n\n  return {\n    ...country,\n    areas,\n  };\n}\n\nexport function areaWithCountriesSelector(areaCode, state) {\n  const area = areaSelector(areaCode, state);\n  const countries = area.countryCodes\n    ? area.countryCodes\n        .map(countryCode => countrySelector(countryCode, state))\n        .filter(c => !!c)\n    : countriesSelector(state);\n  return {\n    ...area,\n    countries,\n  };\n}\n\nexport function countriesAndAreasSelector(state) {\n  return [\n    ...countriesSelector(state).filter(c => !c.disabled),\n    ...areasSelector(state),\n  ];\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n  CartesianGrid,\n  Legend,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const {\n    data,\n    statistics,\n    color,\n    perCapita,\n    height,\n    country,\n    referenceCountry,\n    withReference,\n    extra,\n  } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n  const withComparison = withReference && (perCapita || statistic.isIntensive);\n\n  return (\n    <div className=\"BasicChart\">\n      <ResponsiveContainer height={height}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={country.commonName}\n            unit={` ${unit}`}\n          />\n          {withComparison && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reference\"\n              stroke=\"red\"\n              strokeWidth={3}\n              dot={false}\n              name={referenceCountry.commonName}\n              unit={` ${unit}`}\n            />\n          )}\n          {extra && extra(props)}\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={props2 => <CustomTooltip {...props2} />} />\n          {withComparison && <Legend iconType=\"circle\" />}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n  withReference: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  country: CountryType.isRequired,\n  referenceCountry: CountryType.isRequired,\n  extra: PropTypes.func,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n  withReference: false,\n  extra: null,\n};\n\nexport default BasicChart;\n","import buildChart from '../../../HOC/buildChart';\nimport BasicChart from '../components/BasicChart';\n\nexport default buildChart()(BasicChart);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction GeoJSONMap(props) {\n  const { geojson, center } = props;\n\n  return (\n    <div className=\"GeoJSONMap\">\n      <Map\n        center={center}\n        zoom={2}\n        zoomDelta={0}\n        zoomSnap={0}\n        boxZoom={false}\n        doubleClickZoom={false}\n        scrollWheelZoom={false}\n        zoomControl={false}\n        dragging={false}\n        style={{ height: '250px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {geojson && <GeoJSON data={geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nGeoJSONMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  geojson: PropTypes.object.isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default GeoJSONMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data, height } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={dataWithImportAndExport}>\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" />\n          <YAxis />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                displayFilter={p => p.name !== 'base'}\n              />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\n\nfunction GDPByEnergyChart(props) {\n  const { data, color, statistics } = props;\n  // const statistic = statistics.value;\n  // const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"GDPByEnergyChart\">\n      <ResponsiveContainer height={300}>\n        <ScatterChart data={data} margin={{ bottom: 50 }}>\n          <Scatter\n            fill={color}\n            shape={props2 => (\n              <circle cx={props2.cx} cy={props2.cy} r={3} fill={color} />\n            )}\n            line\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"energy\"\n            name={statistics.energy.name}\n            type=\"number\"\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.energy.name} (${\n                statistics.energy.unit.main\n              })`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"gdp\"\n            name={statistics.gdp.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.year\n                }\n                units={{\n                  '0': statistics.energy.unit.main,\n                  '1': statistics.gdp.unit.main,\n                }}\n              />\n            )}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nGDPByEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      gdp: PropTypes.number,\n      energy: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    gdp: StatisticType,\n    energy: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  color: PropTypes.string,\n};\n\nGDPByEnergyChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default GDPByEnergyChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nconst DEFAULT_AREA_PROPS = {\n  type: 'monotone',\n  dot: false,\n  unit: '%',\n  activeDot: false,\n  strokeOpacity: 0,\n  fillOpacity: 0.8,\n  stackId: '1',\n  yAxisId: 'left',\n  legendType: 'circle',\n};\n\nconst AREA_PROPS = {\n  coal: {\n    name: 'Coal',\n    dataKey: 'coal',\n    stroke: 'black',\n    fill: 'black',\n  },\n  oil: {\n    name: 'Oil',\n    dataKey: 'oil',\n    stroke: 'grey',\n    fill: 'grey',\n  },\n  gas: {\n    name: 'Gas',\n    dataKey: 'gas',\n    stroke: 'orange',\n    fill: 'orange',\n  },\n};\nconst FUELS = Object.keys(AREA_PROPS);\n\nfunction RentsChart(props) {\n  const { data, height, statistics } = props;\n  const displayedFuel = FUELS.filter(fuel => data.some(d => d[fuel] > 0.1));\n\n  return (\n    <div className=\"RentsChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={data} margin={{ top: 5 }}>\n          {displayedFuel.map(fuel => (\n            <Area key={fuel} {...DEFAULT_AREA_PROPS} {...AREA_PROPS[fuel]} />\n          ))}\n          <Line\n            name=\"Oil price\"\n            dataKey=\"price\"\n            stroke=\"red\"\n            yAxisId=\"right\"\n            dot={false}\n            unit={statistics.price.unit.base}\n            legendType=\"line\"\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" />\n          <YAxis yAxisId=\"left\" />\n          <YAxis\n            yAxisId=\"right\"\n            orientation=\"right\"\n            // eslint-disable-next-line no-irregular-whitespace\n            label={`   ${statistics.price.unit.base}`}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={({ dataKey }) => dataKey !== 'price'}\n              />\n            )}\n            displayFilter={({ dataKey }) =>\n              displayedFuel.includes(dataKey) || dataKey === 'price'\n            }\n          />\n          <Legend />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nRentsChart.propTypes = {\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    price: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      price: PropTypes.number,\n    }),\n  ).isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default RentsChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\nimport { ReferenceLine } from 'recharts';\n\nimport { FuelIndicatorsType } from '../../../utils/types';\n\nimport buildChart from '../../../HOC/buildChart';\nimport ProdConsoChart from './ProdConsoChart';\nimport GDPByEnergyChart from './GDPByEnergyChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\nimport RentsChart from './RentsChart';\n\nconst RentsChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    coal: 'COAL_RENTS_IN_GDP',\n    oil: 'OIL_RENTS_IN_GDP',\n    gas: 'GAS_RENTS_IN_GDP',\n    price: 'OIL_PRICE_USD',\n  },\n})(RentsChart);\n\nconst ProdConsoChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: (state, props) => ({\n    prod: props.prodStatisticCode,\n    conso: props.consoStatisticCode,\n  }),\n})(ProdConsoChart);\n\nconst GDPByEnergyChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    gdp: 'GDP_2010_USD',\n    energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n  },\n})(GDPByEnergyChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode, fuelProducedOrConsumed, hasRents } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n        {hasRents && (\n          <Col md={8} sm={24}>\n            <RentsChartContainer\n              countryCode={countryCode}\n              title=\"Share of fossil rents in GDP\"\n              description=\"Sum of coal, oil and gas rents in GDP\"\n            />\n          </Col>\n        )}\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"OIL_RELATIVE_PRICE\"\n            countryCode={countryCode}\n            color=\"grey\"\n            extra={props2 => (\n              <ReferenceLine\n                y={Math.max(...props2.data.map(d => d.value))}\n                stroke=\"red\"\n                strokeDasharray=\"3 3\"\n                isFront\n              />\n            )}\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <h3>Imports/Exports</h3>\n        {fuelProducedOrConsumed.coal && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n              fuel=\"Coal\"\n              title=\"Coal Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.oil && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n              fuel=\"Oil\"\n              title=\"Oil Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.gas && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n              consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n              fuel=\"Gas\"\n              title=\"Gas Trade\"\n            />\n          </Col>\n        )}\n      </Row>\n      <Row>\n        <h3>Energy/GDP coupling</h3>\n        <Col md={16} sm={24}>\n          <GDPByEnergyChartContainer\n            countryCode={countryCode}\n            title=\"GDP according to primary energy\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  fuelProducedOrConsumed: FuelIndicatorsType.isRequired,\n  hasRents: PropTypes.bool.isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { values, mapObjIndexed } from 'ramda';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport color from 'onecolor';\n\nimport { getNiceTickValues } from 'recharts-scale';\nimport { tickFormatter, displayUnit, clickHandlers } from '../../../utils';\nimport { StatisticType, CountryType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nconst FILL_OPACITY = 0.7;\nconst REFERENCE_DATAKEY = 'reference'; // TODO in selectors\nconst defaultLineAreaProps = {\n  type: 'monotone',\n  dot: false,\n  activeDot: false,\n  fillOpacity: FILL_OPACITY,\n  isAnimationActive: false,\n};\n\nconst lineAreaPropsMap = {\n  coal: { name: 'Coal', color: 'black' },\n  oil: { name: 'Oil', color: 'grey' },\n  gas: { name: 'Gas', color: 'orange' },\n  nuclear: { name: 'Nuclear', color: 'purple' },\n  hydro: { name: 'Hydroelectricity', color: 'blue' },\n  biofuelsWaste: { name: 'Biofuels & Waste', color: 'saddlebrown' },\n  solarWindTideGeoth: { name: 'Geothermy, Wind, Solar & Tide', color: 'green' },\n};\n\nconst legendPayload = values(\n  mapObjIndexed((p, key) => ({ ...p, dataKey: key }), lineAreaPropsMap),\n).map(props => ({\n  dataKey: props.dataKey,\n  value: props.name,\n  type: 'circle',\n  inactive: false,\n  color: color(props.color)\n    .alpha(FILL_OPACITY)\n    .cssa(),\n}));\n\nfunction getLegendPayload({\n  fuelConsumed,\n  displayedStats,\n  perCapita,\n  referenceCountry,\n}) {\n  return legendPayload\n    .filter(payload => fuelConsumed[payload.dataKey])\n    .map(payload => ({\n      ...payload,\n      inactive: !displayedStats.includes(payload.dataKey),\n    }))\n    .concat(\n      perCapita\n        ? [\n            {\n              dataKey: REFERENCE_DATAKEY,\n              value: referenceCountry.commonName,\n              color: 'red',\n              type: 'circle',\n              inactive: !displayedStats.includes(REFERENCE_DATAKEY),\n            },\n          ]\n        : [],\n    );\n}\n\nfunction getTicksAndDomain({ data, perCapita, displayedStats, stacked }) {\n  const displayedFuels = displayedStats.filter(s => s !== REFERENCE_DATAKEY);\n  const withReference = perCapita && displayedStats.includes(REFERENCE_DATAKEY);\n  const max = Math.max(\n    ...(stacked\n      ? data.map(d => displayedFuels.reduce((sum, k) => sum + d[k], 0))\n      : data.map(d => Math.max(...displayedFuels.map(k => d[k])))),\n    ...(withReference ? data.map(d => d.reference) : []),\n  );\n\n  const chartMax = max * 1.05;\n  const ticks = getNiceTickValues([0, chartMax], 5, true);\n\n  if (ticks[3] > chartMax) {\n    ticks.pop();\n  }\n  const domain = [0, ticks[ticks.length - 1]];\n  return { domain, ticks };\n}\n\nfunction EnergyMixChart(props) {\n  const {\n    data,\n    stacked,\n    perCapita,\n    fuelConsumed,\n    statistics,\n    referenceCountry,\n    displayedStats,\n    toggleStat,\n    setDisplayedStats,\n  } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n  const lineAreaProps = stacked\n    ? { stackId: '1', unit, ...defaultLineAreaProps }\n    : { strokeWidth: 2, unit, ...defaultLineAreaProps };\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart data={data}>\n          {displayedStats\n            .filter(s => s !== REFERENCE_DATAKEY)\n            .map(fuel => {\n              const fuelProps = lineAreaPropsMap[fuel];\n              return (\n                <LineArea\n                  key={fuel}\n                  {...lineAreaProps}\n                  dataKey={fuel}\n                  name={fuelProps.name}\n                  stroke={fuelProps.color}\n                  fill={fuelProps.color}\n                />\n              );\n            })}\n          {perCapita && displayedStats.includes(REFERENCE_DATAKEY) && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reference\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n              name={referenceCountry.commonName}\n              stroke=\"red\"\n              unit={unit}\n              isAnimationActive={false}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" />\n          <YAxis\n            tickFormatter={tickFormatter}\n            {...getTicksAndDomain({\n              data,\n              perCapita,\n              displayedStats,\n              stacked,\n            })}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={p => p.dataKey !== REFERENCE_DATAKEY}\n              />\n            )}\n          />\n          <Legend\n            iconType=\"circle\"\n            onClick={clickHandlers({\n              onClick: ({ dataKey }) => toggleStat(dataKey),\n              onDoubleClick: ({ dataKey }) => setDisplayedStats([dataKey]),\n            })}\n            payload={getLegendPayload({\n              fuelConsumed,\n              displayedStats,\n              perCapita,\n              referenceCountry,\n            })}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  fuelConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  referenceCountry: CountryType.isRequired,\n  toggleStat: PropTypes.func.isRequired,\n  setDisplayedStats: PropTypes.func.isRequired,\n  displayedStats: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default EnergyMixChart;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { sortBy } from 'ramda';\n\nimport buildChart from '../../../HOC/buildChart';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport { fuelConsumedCountrySelector } from '../../../store/countries';\n\nclass EnergyMixChartWithState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      displayedStats: [],\n    };\n    this.toggleStat = this.toggleStat.bind(this);\n    this.setDisplayedStats = this.setDisplayedStats.bind(this);\n    this.initDone = false;\n  }\n\n  componentDidMount() {\n    this.init(this.props);\n  }\n\n  componentWillReceiveProps(newProps) {\n    const { countryCode, data } = this.props;\n    if (\n      newProps.countryCode !== countryCode ||\n      (data.length !== newProps.data.length && !this.initDone)\n    ) {\n      this.init(newProps);\n    }\n  }\n\n  setDisplayedStats(displayedStats) {\n    this.setState({\n      displayedStats,\n    });\n  }\n\n  init({ data, fuelConsumed }) {\n    this.initDone = true;\n    this.setState({\n      displayedStats: sortBy(\n        fuel => -Math.max(...data.map(d => d[fuel])),\n        Object.keys(fuelConsumed).filter(fuel => fuelConsumed[fuel]),\n      ).concat(['reference']),\n    });\n  }\n\n  toggleStat(toggledStat) {\n    const { displayedStats } = this.state;\n    this.setState({\n      displayedStats: displayedStats.includes(toggledStat)\n        ? displayedStats.filter(d => d !== toggledStat)\n        : [...displayedStats, toggledStat],\n    });\n  }\n\n  render() {\n    return (\n      <EnergyMixChart\n        {...this.props}\n        {...this.state}\n        toggleStat={this.toggleStat}\n        setDisplayedStats={this.setDisplayedStats}\n      />\n    );\n  }\n}\n\nconst EnergyMixChartBuilded = buildChart({\n  perCapitaSwitch: true,\n  stackedSwitch: true,\n})(EnergyMixChartWithState);\n\nconst EnergyMixChartContainer = connect((state, { countryCode }) => ({\n  fuelConsumed: fuelConsumedCountrySelector(countryCode, state),\n}))(EnergyMixChartBuilded);\n\nexport default EnergyMixChartContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { sortBy } from 'ramda';\n\nimport { Select } from 'antd';\n\nimport { CountryType } from '../../../utils/types';\n\nfunction SettingsComponent(props) {\n  const { countries, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"SettingComponent\">\n      {'Compare to : '}\n      <Select\n        value={referenceCountryCode}\n        placeholder=\"Select a country or a zone\"\n        optionFilterProp=\"title\"\n        showSearch\n        style={{ width: '250px' }}\n        onSelect={countryCode => setReferenceCountry(countryCode)}\n      >\n        {sortBy(c => c.commonName, countries).map(country => (\n          <Select.Option\n            key={country.alpha2Code}\n            disabled={country.disabled}\n            title={`${country.commonName} (${country.alpha3Code})`}\n          >\n            {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n          </Select.Option>\n        ))}\n      </Select>\n    </div>\n  );\n}\n\nSettingsComponent.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default SettingsComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\nimport SettingsComponent from './SettingsComponent';\nimport { countriesAndAreasSelector } from '../../../store/otherSelectors';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nconst ConnectedSettingsComponent = connect(state => ({\n  countries: countriesAndAreasSelector(state),\n}))(SettingsComponent);\n\nfunction SummaryTab(props) {\n  const { countryCode, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <Row>\n        <Col md={24} sm={24}>\n          <ConnectedSettingsComponent\n            setReferenceCountry={setReferenceCountry}\n            referenceCountryCode={referenceCountryCode}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={24} sm={24}>\n          <EnergyMixChartContainer\n            title=\"Primary energy consumption\"\n            description=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            countryCode={countryCode}\n            mapOfCountryStatistics={primaryMap}\n            withReference={primaryReference}\n            referenceCountryCode={referenceCountryCode}\n            defaultPerCapita\n            defaultStacked\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={24} sm={24}>\n          <EnergyMixChartContainer\n            title=\"Electricity generation by fuels\"\n            description=\"ELECTRICITY_GENERATION_TWH\"\n            countryCode={countryCode}\n            mapOfCountryStatistics={electrictyMap}\n            withReference={electricityReference}\n            referenceCountryCode={referenceCountryCode}\n            defaultPerCapita\n            defaultStacked\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\nimport SettingsComponent from './SettingsComponent';\n\nimport { countriesAndAreasSelector } from '../../../store/otherSelectors';\n\nconst ConnectedSettingsComponent = connect(state => ({\n  countries: countriesAndAreasSelector(state),\n}))(SettingsComponent);\n\nfunction ClimateTab(props) {\n  const { countryCode, setReferenceCountry, referenceCountryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row>\n        <Col md={24} sm={24}>\n          <ConnectedSettingsComponent\n            setReferenceCountry={setReferenceCountry}\n            referenceCountryCode={referenceCountryCode}\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"FOSSIL_CO2_EMISSIONS_MT\"\n            perCapita\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            perCapita\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_INTENSITY_OF_ENERGY\"\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"LOW_CARBON_ENERGY_PRODUCTION_MTOE\"\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            perCapita\n            withReference\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"GHG_EMISSIONS_GKWH\"\n            countryCode={countryCode}\n            referenceCountryCode={referenceCountryCode}\n            withReference\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\nimport { ReferenceLine } from 'recharts';\n\nimport { FuelIndicatorsType } from '../../../utils/types';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nfunction PeakReference(props) {\n  const { peak } = props;\n\n  return (\n    peak && (\n      <ReferenceLine\n        y={peak.value}\n        stroke=\"red\"\n        strokeDasharray=\"3 3\"\n        isFront\n      />\n    )\n  );\n}\n\nfunction PeakText(props) {\n  const { fuel, peak } = props;\n  return (\n    peak && (\n      <div style={{ textAlign: 'right' }}>\n        {`Peak ${fuel} ${peak.before && peak.sure ? 'before' : 'in'} ${\n          peak.year\n          // eslint-disable-next-line no-nested-ternary\n        }${peak.sure ? '' : peak.before ? ' (may be before)' : ' ?'}`}\n      </div>\n    )\n  );\n}\n\nfunction ReservesAndPeaksTab(props) {\n  const { countryCode, referenceCountryCode, fuelProduced, peaks } = props;\n  return (\n    <div className=\"ReservesAndPeaksTab\">\n      <Row gutter={20}>\n        <h2>Productions</h2>\n        {fuelProduced.coal && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"COAL_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n              peak={peaks.coal}\n              extra={PeakReference}\n            />\n            <PeakText fuel=\"coal\" peak={peaks.coal} />\n          </Col>\n        )}\n        {fuelProduced.oil && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"OIL_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n              peak={peaks.oil}\n              extra={PeakReference}\n            />\n            <PeakText fuel=\"oil\" peak={peaks.oil} />\n          </Col>\n        )}\n        {fuelProduced.gas && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"GAS_PRODUCTION_MTOE\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n              peak={peaks.gas}\n              extra={PeakReference}\n            />\n            <PeakText fuel=\"gas\" peak={peaks.gas} />\n          </Col>\n        )}\n      </Row>\n      <Row gutter={20}>\n        <h2>Reserves</h2>\n        {fuelProduced.coal && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"COAL_RESERVES_GT\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n        {fuelProduced.oil && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"OIL_RESERVES_BB\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n        {fuelProduced.gas && (\n          <Col md={8} sm={24}>\n            <BasicChartContainer\n              statisticCode=\"GAS_RESERVES_BCM\"\n              countryCode={countryCode}\n              referenceCountryCode={referenceCountryCode}\n            />\n          </Col>\n        )}\n      </Row>\n    </div>\n  );\n}\n\nconst PeakData = {\n  year: PropTypes.number,\n  value: PropTypes.number,\n  sure: PropTypes.bool,\n  before: PropTypes.bool,\n};\n\nReservesAndPeaksTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n  fuelProduced: FuelIndicatorsType.isRequired,\n  peaks: PropTypes.shape({\n    coal: PeakData,\n    oil: PeakData,\n    gas: PeakData,\n  }).isRequired,\n};\n\nexport default ReservesAndPeaksTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport regression from 'regression';\nimport { range } from 'ramda';\n\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter, formatNumber } from '../../../utils';\n\nconst RESOLUTION = 20;\n\nfunction PowerLoadAnalysisChart(props) {\n  const { data, color, statistics } = props;\n\n  const finalData = data.filter(d => d.generation && d.capacity);\n  const array = finalData.map(({ capacity, generation }) => [\n    capacity,\n    generation,\n  ]);\n  const { equation, r2 } = regression.linear(array);\n  const powerLoad = ((equation[0] * 10 ** 3) / (365.25 * 24)) * 100;\n\n  const min = Math.min(...finalData.map(d => d.capacity));\n  const max = Math.max(...finalData.map(d => d.capacity));\n  const data2 = range(0, RESOLUTION + 1).map(i => {\n    const capacity = min + (i / RESOLUTION) * (max - min);\n    return {\n      capacity,\n      generation: equation[0] * capacity + equation[1],\n    };\n  });\n\n  return (\n    <div className=\"PowerLoadAnalysisChart\">\n      <ResponsiveContainer height={300}>\n        <ScatterChart data={finalData} margin={{ bottom: 50 }}>\n          <Scatter data={data2} line={{ stroke: 'grey' }} shape={() => null} />\n          <Scatter\n            fill={color}\n            shape={props2 => (\n              <circle cx={props2.cx} cy={props2.cy} r={3} fill={color} />\n            )}\n            line\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"capacity\"\n            name={statistics.capacity.name}\n            type=\"number\"\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.capacity.name} (${\n                statistics.capacity.unit.main\n              })`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"generation\"\n            name={statistics.generation.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.year\n                }\n                units={{\n                  '0': statistics.capacity.unit.main,\n                  '1': statistics.generation.unit.main,\n                }}\n              />\n            )}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n      <p>{`Average power load: ${formatNumber(powerLoad)} % (R²=${r2})`}</p>\n    </div>\n  );\n}\n\nPowerLoadAnalysisChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      capacity: PropTypes.number,\n      generation: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    capacity: StatisticType,\n    generation: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  color: PropTypes.string,\n};\n\nPowerLoadAnalysisChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default PowerLoadAnalysisChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\nimport PowerLoadAnalysis from './PowerLoadAnalysisChart';\nimport buildChart from '../../../HOC/buildChart';\n\nconst WindLoadChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    generation: 'WIND_GENERATION_TWH',\n    capacity: 'WIND_CAPACITY_GW',\n  },\n})(PowerLoadAnalysis);\n\nconst SolarLoadChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    generation: 'SOLAR_GENERATION_TWH',\n    capacity: 'SOLAR_CAPACITY_GW',\n  },\n})(PowerLoadAnalysis);\n\nfunction OthersTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"OthersTab\">\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <WindLoadChartContainer countryCode={countryCode} />\n        </Col>\n        <Col md={8} sm={24}>\n          <SolarLoadChartContainer countryCode={countryCode} />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nOthersTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default OthersTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Card } from 'antd';\n\nimport {\n  fuelProducedOrConsumedCountrySelector,\n  fuelProducedCountrySelector,\n} from '../../../store/countries';\nimport { statisticPeakYearSelector } from '../../../store/statistics';\n\nimport { FuelIndicatorsType } from '../../../utils/types';\n\nimport IndependencyTab from './IndependencyTab';\nimport SummaryTab from './SummaryTab';\nimport ClimateTab from './ClimateTab';\nimport ReservesAndPeaksTab from './ReservesAndPeaksTab';\nimport OthersTab from './OthersTab';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n  { key: 'reserves', tab: 'Reserves and peaks' },\n  { key: 'others', tab: 'Others' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst ReservesAndPeaksTabContainer = connect((state, { countryCode }) => ({\n  fuelProduced: fuelProducedCountrySelector(countryCode, state),\n  peaks: {\n    coal: statisticPeakYearSelector(\n      {\n        countryCode,\n        statisticCode: 'COAL_PRODUCTION_MTOE',\n      },\n      state,\n    ),\n    oil: statisticPeakYearSelector(\n      {\n        countryCode,\n        statisticCode: 'OIL_PRODUCTION_MTOE',\n      },\n      state,\n    ),\n    gas: statisticPeakYearSelector(\n      {\n        countryCode,\n        statisticCode: 'GAS_PRODUCTION_MTOE',\n      },\n      state,\n    ),\n  },\n}))(ReservesAndPeaksTab);\n\nconst tabContents = {\n  summary: SummaryTab,\n  independency: IndependencyTabContainer,\n  climate: ClimateTab,\n  reserves: ReservesAndPeaksTabContainer,\n  others: OthersTab,\n};\n\nfunction TabsComponent(props) {\n  const {\n    currentTab,\n    countryCode,\n    onTabChange,\n    setReferenceCountry,\n    referenceCountryCode,\n    fuelProduced,\n    hasRents,\n  } = props;\n  const TabComponent = tabContents[currentTab];\n  const hasProducedFossils =\n    fuelProduced.coal || fuelProduced.oil || fuelProduced.gas;\n  const tabs = hasProducedFossils\n    ? tabList\n    : tabList.filter(d => d.key !== 'reserves');\n\n  return (\n    <Card\n      key={currentTab}\n      tabList={tabs}\n      activeTabKey={currentTab}\n      onTabChange={onTabChange}\n    >\n      <TabComponent\n        countryCode={countryCode}\n        setReferenceCountry={setReferenceCountry}\n        referenceCountryCode={referenceCountryCode}\n        hasRents={hasRents}\n      />\n    </Card>\n  );\n}\n\nTabsComponent.propTypes = {\n  currentTab: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  onTabChange: PropTypes.func.isRequired,\n  setReferenceCountry: PropTypes.func.isRequired,\n  referenceCountryCode: PropTypes.string.isRequired,\n  fuelProduced: FuelIndicatorsType.isRequired,\n  hasRents: PropTypes.bool.isRequired,\n};\n\nexport default TabsComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { withState } from 'recompose';\nimport qs from 'qs';\n\nimport { Row, Col, Card } from 'antd';\n\nimport { fuelProducedCountrySelector } from '../../store/countries';\nimport { countryWithAreasSelector } from '../../store/otherSelectors';\n\nimport { CountryType, FuelIndicatorsType } from '../../utils/types';\nimport { isMobileOrTablet } from '../../utils';\n\nimport BasicChartContainer from './containers/BasicChartContainer';\n\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport ScrollToTop from '../../components/ScrollToTop';\nimport TabsComponent from './components/TabsComponent';\n\nconst TabsComponentWithState = withState(\n  'referenceCountryCode',\n  'setReferenceCountry',\n  props => props.referenceCountry,\n)(TabsComponent);\n\nfunction CountryView(props) {\n  const { country, goTo, currentTab, referenceCountry, fuelProduced } = props;\n\n  if (!country || country.disabled) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const countryCode = country.alpha2Code;\n  const flag = isMobileOrTablet() ? country.flagIcon : '';\n  return (\n    <div className=\"CountryView\">\n      <ScrollToTop countryCode={countryCode} />\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n            <div>{`Capital: ${country.capital}`}</div>\n            <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n            <div>\n              {`Member of: `}\n              {country.areas.map((area, i) => (\n                <Link key={area.code} to={`/area/${area.code}`}>\n                  {`${i > 0 ? ', ' : ''}${area.name}`}\n                </Link>\n              ))}\n            </div>\n            <Row style={{ marginTop: '20px' }} gutter={20}>\n              <Col xs={24} sm={24} md={24} lg={8}>\n                <BasicChartContainer\n                  statisticCode=\"POPULATION\"\n                  countryCode={countryCode}\n                  color=\"#2c82c9\"\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={8}>\n                <BasicChartContainer\n                  statisticCode=\"GDP_2010_USD\"\n                  countryCode={countryCode}\n                  color=\"#f22613\"\n                  perCapita\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={8}>\n                <BasicChartContainer\n                  statisticCode=\"HUMAN_DEVELOPMENT_INDEX\"\n                  countryCode={countryCode}\n                  color=\"green\"\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <img\n            key={countryCode}\n            style={{\n              width: '100%',\n              marginBottom: '20px',\n              maxHeight: '180px',\n            }}\n            src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n            alt={`Flag of ${country.commonName}`}\n          />\n          <GeoJSONMap geojson={country.geojson} center={country.latlng} />\n        </Col>\n      </Row>\n      <Row>\n        <TabsComponentWithState\n          countryCode={countryCode}\n          currentTab={currentTab}\n          onTabChange={tab => goTo(`/country/${countryCode}/${tab}`)}\n          referenceCountry={referenceCountry}\n          fuelProduced={fuelProduced}\n          hasRents={country.hasRents}\n        />\n      </Row>\n    </div>\n  );\n}\n\nCountryView.propTypes = {\n  currentTab: PropTypes.string,\n  country: CountryType,\n  goTo: PropTypes.func.isRequired,\n  referenceCountry: PropTypes.string,\n  fuelProduced: FuelIndicatorsType.isRequired,\n};\nCountryView.defaultProps = {\n  currentTab: 'summary',\n  country: null,\n  referenceCountry: 'WORLD',\n};\n\nexport default connect((state, props) => ({\n  currentTab: props.match.params.tab,\n  goTo: url => props.history.push(url),\n  country: countryWithAreasSelector(props.match.params.countryCode, state),\n  referenceCountry: qs.parse(props.location.search.substr(1)).referenceCountry,\n  fuelProduced: fuelProducedCountrySelector(\n    props.match.params.countryCode,\n    state,\n  ),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport { withState } from 'recompose';\nimport qs from 'qs';\n\nimport { Row, Col, Card } from 'antd';\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport ScrollToTop from '../../components/ScrollToTop';\n\nimport { fuelProducedCountrySelector } from '../../store/countries';\nimport { areaWithCountriesSelector } from '../../store/otherSelectors';\nimport { AreaType, FuelIndicatorsType } from '../../utils/types';\n\nimport BasicChartContainer from '../CountryView/containers/BasicChartContainer';\nimport TabsComponent from '../CountryView/components/TabsComponent';\n\nconst TabsComponentWithState = withState(\n  'referenceCountryCode',\n  'setReferenceCountry',\n  props => props.referenceCountry,\n)(TabsComponent);\n\nfunction AreaView(props) {\n  const { area, currentTab, goTo, referenceCountry, fuelProduced } = props;\n  const latlng = [\n    area.countries.reduce((s, c) => c.latlng[0] + s, 0) / area.countries.length,\n    area.countries.reduce((s, c) => c.latlng[1] + s, 0) / area.countries.length,\n  ];\n\n  if (!area) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"AreaView\">\n      <ScrollToTop areaCode={area.code} />\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <Card title={<h2>{`${area.name}`}</h2>}>\n            {area.code !== 'WORLD' && (\n              <div>\n                <strong>Members : </strong>\n                {area.countries.map((country, i) => {\n                  const string = `${i > 0 ? ', ' : ''}${country.commonName}`;\n                  return !country.disabled && country.isIndependent ? (\n                    <Link\n                      key={country.alpha2Code}\n                      to={`/country/${country.alpha2Code}`}\n                    >\n                      {string}\n                    </Link>\n                  ) : (\n                    string\n                  );\n                })}\n              </div>\n            )}\n            <Row style={{ marginTop: '20px' }} gutter={10}>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"POPULATION\"\n                  countryCode={area.code}\n                  color=\"#2c82c9\"\n                />\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12}>\n                <BasicChartContainer\n                  statisticCode=\"GDP_2010_USD\"\n                  countryCode={area.code}\n                  color=\"#f22613\"\n                  perCapita\n                />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <GeoJSONMap geojson={area.geojson} center={latlng} />\n        </Col>\n      </Row>\n      <Row>\n        <TabsComponentWithState\n          countryCode={area.code}\n          currentTab={currentTab}\n          onTabChange={tab => goTo(`/area/${area.code}/${tab}`)}\n          referenceCountry={referenceCountry}\n          fuelProduced={fuelProduced}\n        />\n      </Row>\n    </div>\n  );\n}\n\nAreaView.propTypes = {\n  area: AreaType.isRequired,\n  currentTab: PropTypes.string,\n  goTo: PropTypes.func.isRequired,\n  referenceCountry: PropTypes.string,\n  fuelProduced: FuelIndicatorsType.isRequired,\n};\n\nAreaView.defaultProps = {\n  currentTab: 'summary',\n  referenceCountry: 'WORLD',\n};\n\nexport default connect((state, props) => ({\n  currentTab: props.match.params.tab,\n  goTo: url => props.history.push(url),\n  area: areaWithCountriesSelector(props.match.params.areaCode, state),\n  referenceCountry: qs.parse(props.location.search.substr(1)).referenceCountry,\n  fuelProduced: fuelProducedCountrySelector(props.match.params.areaCode, state),\n}))(AreaView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType, AreaType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, areas, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Select a country\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.SubMenu title=\"Areas\">\n        {sortBy(a => a.name, areas).map(area => (\n          <Menu.Item key={area.code}>\n            <Link to={`/area/${area.code}`}>{area.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu.SubMenu>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  areas: PropTypes.arrayOf(AreaType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  Route, // as BaseRoute,\n  Switch,\n  Redirect,\n  withRouter,\n} from 'react-router-dom';\nimport { Layout, Spin, Row, Col } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\nimport AreaView from '../views/AreaView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\nimport {\n  loadAllAreas,\n  areasLoadedSelector,\n  areasSelector,\n} from '../store/areas';\nimport { LocationType } from '../utils/types';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\nconst AreasLoader = buildLoader(loadAllAreas);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    areas: areasSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction scrollToAnchor(location) {\n  const { hash } = location;\n\n  if (hash !== '') {\n    const id = hash.substr(1);\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'nearest',\n      });\n    }\n  }\n}\n\nclass AppLayout extends Component {\n  componentDidMount() {\n    const { location } = this.props;\n    window.onhashchange = () => scrollToAnchor(location);\n  }\n\n  componentDidUpdate() {\n    const { location } = this.props;\n    scrollToAnchor(location);\n  }\n\n  render() {\n    const { isLoaded } = this.props;\n    return (\n      <div className=\"AppLayout\">\n        <CountriesLoader />\n        <StatisticsLoader />\n        <AreasLoader />\n        <Spin size=\"large\" spinning={!isLoaded}>\n          <Layout>\n            <Layout.Header className=\"AppLayout__header\">\n              <ConnectedHeaderMenu />\n            </Layout.Header>\n            <Row>\n              <Col\n                span={24}\n                md={{ offset: 1, span: 22 }}\n                xxl={{ offset: 3, span: 18 }}\n              >\n                <Layout.Content className=\"AppLayout__content\">\n                  {!isLoaded && <div className=\"AppLayout__splash\" />}\n                  {isLoaded && (\n                    <Switch>\n                      <Route path=\"/home\" exact component={HomeView} />\n                      <Route\n                        path=\"/country/:countryCode/:tab?\"\n                        exact\n                        component={CountryView}\n                      />\n                      <Route\n                        path=\"/area/:areaCode/:tab?\"\n                        exact\n                        component={AreaView}\n                      />\n                      <Route path=\"/about\" exact component={AboutView} />\n                      <Route\n                        component={() => (\n                          <Redirect to={{ pathname: '/home' }} />\n                        )}\n                      />\n                    </Switch>\n                  )}\n                </Layout.Content>\n                <Layout.Footer>\n                  Sources: IEA, EIA, BP, World Bank, HDRO\n                </Layout.Footer>\n              </Col>\n            </Row>\n          </Layout>\n        </Spin>\n      </div>\n    );\n  }\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n  location: LocationType.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded:\n      countriesLoadedSelector(state) &&\n      statisticsLoadedSelector(state) &&\n      areasLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { withRouter } from 'react-router-dom';\nimport { compose, withProps } from 'recompose';\n\nimport ga from 'react-ga';\n\nconst f = title => (...args) => console.log(title, ...args);\nconst mockGa = {\n  set: () => {},\n  pageview: f('tracker.pageview'),\n};\n\nconst isDev = process.env.NODE_ENV !== 'production';\nconst tracker = isDev ? mockGa : ga;\n\nif (!isDev) ga.initialize('UA-133488135-1', { siteSpeedSampleRate: 100 });\n\nclass AnalyticsComponent extends Component {\n  componentDidMount() {\n    this.trackPage();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { location } = this.props;\n\n    if (location !== prevProps.location) {\n      this.trackPage();\n    }\n  }\n\n  trackPage() {\n    const { location } = this.props;\n    tracker.set({ location });\n    tracker.pageview(location);\n  }\n\n  render() {\n    const { children } = this.props;\n    return <div>{children}</div>;\n  }\n}\n\nAnalyticsComponent.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  children: PropTypes.any.isRequired,\n  location: PropTypes.string.isRequired,\n};\n\nexport default compose(\n  withRouter,\n  withProps(props => ({\n    location: `${props.location.pathname}${props.location.search}`,\n  })),\n)(AnalyticsComponent);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\nimport AnalyticsComponent from './components/AnalyticsComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AnalyticsComponent>\n            <AppLayout />\n          </AnalyticsComponent>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}