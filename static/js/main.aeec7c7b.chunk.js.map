{"version":3,"sources":["api/countries.js","store/countries.js","api/helpers.js","api/statistics.js","store/statistics.js","store/index.js","utils/types.js","utils/index.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","views/CountryView/components/PrimaryEnergyChart.jsx","views/CountryView/containers/PrimaryEnergyChartContainer.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/containers/ProdConsoCharContainer.jsx","views/CountryView/components/CountryMap.jsx","views/CountryView/components/SelfSufficiencyChart.jsx","views/CountryView/containers/SelfSufficiencyContainer.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","loaders/index.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["countryMapValues","country","a","worldTopo","objects","countries","geometries","find","c","id","numericCode","Object","objectSpread","geojson","feature","_callee","res","regenerator_default","wrap","_context","prev","next","fetch","sent","json","abrupt","map","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","receiveCountriesAction","_ref","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","dependentCountriesSelector","countrySelector","countryCode","countriesReducer","arguments","length","undefined","action","fetchJSON","url","options","then","derivedStatistics","code","name","description","unit","main","base","factor","source","consumption","production","startingYear","endingYear","sourceAttribution","isIntensive","compute","Math","floor","derivedCodes","d","computeDerivedValueFromCompiled","statistic","_ref2","year","sources","objectWithoutProperties","value","Number","isNaN","statisticCode","_ref5","sourceNames","statisticValues","mapOfNamedStatisticValues","allValues","allValuesByYear","derivedStatisticValues","stat","keys","Promise","all","sourceName","getStatisticOfCountry","index","_ref3","defineProperty","concat","apply","toConsumableArray","groupBy","sort","mergeAll","includes","getDerivedStatisticOfCountry","_callee2","_ref8","allValuesByYearAndCountry","_context2","getStatisticOfAllCountries","_ref6","countryYearValues","getDerivedStatisticOfAllCountries","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","initialCountryStatistic","countryStatisticReducer","countryStatistic","omit","statisticsLoadedSelector","statistics","allStatisticsSelector","statisticSelector","countryStatisticSelector","_ref4","countryStatisticLoadedSelector","countryStatisticValuesSelector","countryStatisticsLoadedSelector","_ref7","statisticCodes","every","compiledCountryStatisticsSelector","_ref9","_ref13","mapOfCountryStatistics","perCapita","parsedMapOfCountryStatistics","defaultCountry","parsed","countryCodes","uniq","populations","parseMapOfStatistics","mapOfStatistic","_ref10","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","min","v","endingYears","max","computeYearInterval","_computeYearInterval2","slicedToArray","mapObjIndexed","compileName","_ref11","compiledValue","population","computeValue","compiledStatisticForCountriesAndYear","_ref14","alpha2Code","push","yearValue","loadCountryStatistic","_ref15","dispatch","getState","loadCountryStatisticAction","statisticValue","catch","loadCountryStatistics","_ref16","loadStatisticOfCountries","loadStatisticOfCountriesAction","statisticsReducer","reduce","acc","WORLD","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","area","number","latlng","arrayOf","object","bool","coordsToLatLng","coords","_coords","longitude","latitude","L","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","MAP_HEIGHT","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","dependentCountries","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","indexBy","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","dragging","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","toLocaleString","background","backgroundColor","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","formatedData","s","es_select","width","placeholder","optionFilterProp","showSearch","onChange","sortBy","Option","title","slider","defaultValue","onAfterChange","debounce","included","marks","label","margin","left","right","es_radio","Group","marginBottom","buttonStyle","size","e","target","Button","disabled","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","href","defaultSortOrder","align","onRow","record","onClick","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","CustomTooltip","active","payload","payloadWithoutWorld","p","dataKey","worldPrimary","total","sum","lineHeight","toFixed","defaultProps","PrimaryEnergyChart","stacked","setStacked","dataWithTotal","coal","oil","gas","hydro","nuclear","renewables","hasCoal","some","hasOil","hasGas","hasNuclear","hasHydro","hasRenewables","LineArea","Area","Line","marginRight","ResponsiveContainer","ComposedChart","top","bottom","dot","activeDot","stroke","fill","stackId","CartesianGrid","opacity","XAxis","interval","YAxis","angle","position","component_Tooltip","content","Legend","iconType","mapOfStatistics","worldReferences","ConnectedPrimaryEnergyChart","PrimaryEnergyChartContainer","_this$props","loadStatistics","prevProps","_this$props2","_this$props3","isLoaded","spin","spinning","containers_PrimaryEnergyChartContainer","ProdConsoChart","fuel","prodStatistic","consoStatistic","console","warn","dataWithImportAndExport","l","diff","prod","conso","export","import","strokeOpacity","strokeWidth","offset","props2","ProdConsoChart_CustomTooltip","assign","ConnectedProdConsoChart","prodStatisticCode","consoStatisticCode","ProdConsoChartContainer","CustomGeoJSON","createGeoJSON","remove","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","CountryMap","TileLayer","attribution","CountryMap_GeoJSON","SelfSufficiencyChart","LineChart","ConnectedSelfSufficiencyChart","CountryView","Redirect","to","xs","sm","SelfSufficiencyContainer","src","toLowerCase","alt","components_CountryMap","ProdConsoCharContainer","match","params","AboutView","card","rel","GitHubLink","icon","theme","HeaderMenu","goTo","menu","mode","selectable","Item","Link","onSelect","components_GitHubLink","withLoader","config","loadFunctions","_config$isLoadedSelec","isLoadedSelector","_config$mapStateToPro","mapStateToProps","loadAll","loadFunction","WrappedComponent","ConnectedWrappedComponent","load","_Component","LoaderComponent","inherits","createClass","otherProps","CountriesLoader","prop","StatisticsLoader","ConnectedHeaderMenu","withRouter","isReady","layout","Header","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aeec7c7b.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\nimport worldTopo from 'world-atlas/world/110m.json';\n\nfunction countryMapValues(country) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  return {\n    ...country,\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nasync function getAllCountries() {\n  const res = await fetch('/data/countries.json');\n  const countries = await res.json();\n  return countries.map(countryMapValues);\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport default countriesReducer;\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","import { values, groupBy, mergeAll } from 'ramda';\nimport { fetchJSON } from './helpers';\n\nconst PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description: '',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return Math.floor((production / consumption) * 100);\n    },\n  },\n];\nconst derivedCodes = derivedStatistics.map(d => d.code);\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, countryCode, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value)\n      ? { year, countryCode, value: null }\n      : { year, countryCode, value };\n  };\n}\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nasync function getDerivedStatisticOfCountry(statisticCode, countryCode) {\n  const statistic = derivedStatistics.find(stat => stat.code === statisticCode);\n  const sourceNames = Object.keys(statistic.source);\n\n  const statisticValues = await Promise.all(\n    sourceNames.map(sourceName =>\n      // eslint-disable-next-line no-use-before-define\n      getStatisticOfCountry(statistic.source[sourceName], countryCode),\n    ),\n  );\n\n  const mapOfNamedStatisticValues = sourceNames.map((sourceName, index) =>\n    statisticValues[index].map(({ year, value }) => ({\n      year,\n      [sourceName]: value,\n    })),\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const derivedStatisticValues = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(computeDerivedValueFromCompiled(statistic));\n\n  return derivedStatisticValues;\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  if (derivedCodes.includes(statisticCode)) {\n    return getDerivedStatisticOfCountry(statisticCode, countryCode);\n  }\n\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nasync function getDerivedStatisticOfAllCountries(statisticCode) {\n  const statistic = derivedStatistics.find(stat => stat.code === statisticCode);\n  const sourceNames = Object.keys(statistic.source);\n\n  const statisticValues = await Promise.all(\n    sourceNames.map(sourceName =>\n      // eslint-disable-next-line no-use-before-define\n      getStatisticOfAllCountries(statistic.source[sourceName]),\n    ),\n  );\n\n  const mapOfNamedStatisticValues = sourceNames.map((sourceName, index) =>\n    statisticValues[index].map(({ year, value, countryCode }) => ({\n      year,\n      countryCode,\n      [sourceName]: value,\n    })),\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYearAndCountry = groupBy(\n    value => `${value.countryCode}${value.year}`,\n    allValues,\n  );\n\n  const derivedStatisticValues = values(allValuesByYearAndCountry)\n    .map(countryYearValues => mergeAll(countryYearValues))\n    .map(computeDerivedValueFromCompiled(statistic));\n\n  return derivedStatisticValues;\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  if (derivedCodes.includes(statisticCode)) {\n    return getDerivedStatisticOfAllCountries(statisticCode);\n  }\n\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import {\n  values,\n  indexBy,\n  prop,\n  mapObjIndexed,\n  mergeAll,\n  groupBy,\n  map,\n  omit,\n  uniq,\n} from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfCountry,\n  getStatisticOfAllCountries,\n} from '../api/statistics';\nimport { countriesSelector } from './countries';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(\n  { statisticCodes, countryCode },\n  state,\n) {\n  return statisticCodes.every(statisticCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor) {\n  if (!value || (!population && perCapita)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / population : value;\n}\n\nfunction parseMapOfStatistics(\n  mapOfCountryStatistics,\n  defaultCountry,\n  perCapita,\n) {\n  const parsed = map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n  const countryCodes = uniq(values(parsed).map(d => d.countryCode));\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...(perCapita ? populations : {}),\n    ...parsed,\n  };\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfCountryStatistics, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    parsedMapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    parsedMapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .filter(value => startingYear <= value.year && value.year <= endingYear)\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed(\n        (value, compileName) =>\n          computeValue(\n            value,\n            compiledValue[\n              `pop/${parsedMapOfCountryStatistics[compileName].countryCode}`\n            ],\n            perCapita,\n            mapOfStatistic[compileName].unit.factor,\n          ),\n        omit(['year', 'pop'], compiledValue),\n      ),\n    }));\n\n  return compiledStatistics;\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics({ statisticCodes, countryCode }) {\n  return function dispatchloadCountryStatistics(dispatch, getState) {\n    return Promise.all(\n      statisticCodes.map(statisticCode =>\n        loadCountryStatistic({ statisticCode, countryCode })(\n          dispatch,\n          getState,\n        ),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const countries = countriesSelector(getState());\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        getState(),\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n\nexport default statisticsReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n","import L from 'leaflet';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\n// function bindEvent(countries, onCountryClick) {\n//   return function onEachFeature(feature, layer) {\n//     const country = countries.find(c => c.numericCode === feature.id);\n//     layer.on({\n//       click: () => onCountryClick(country),\n//     });\n//   };\n// }\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { coordsToLatLng, isMobileOrTablet } from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value: 'NA' };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value: 0 };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n  } = props;\n  const maxValue = Math.max(...data.map(d => d.value));\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: 'white',\n                  weight: 0.5,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${value.toLocaleString()}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div className=\"WorldMap__legend__gradient\">\n          <div>\n            {`${currentStatistic.name} (${\n              perCapita\n                ? `${currentStatistic.unit.base}/capita`\n                : currentStatistic.unit.main\n            })`}\n          </div>\n          <div\n            className=\"WorldMap__legend__gradientColor\"\n            style={{\n              background: colorGradient,\n            }}\n          />\n          <div className=\"WorldMap__legend__gradientRange\">\n            <div>0</div>\n            <div>{maxValue.toLocaleString()}</div>\n          </div>\n        </div>\n        <div>\n          <div>{' '}</div>\n          <div\n            className=\"WorldMap__legend__NA__square\"\n            style={{ backgroundColor: NA_COLOR }}\n          />\n          <div>NA</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy } from 'ramda';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet } from '../../../utils';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet}\n        onChange={value => setStatistic(value)}\n      >\n        {sortBy(s => s.name, statistics).map(statistic => (\n          <Select.Option key={statistic.code} title={statistic.name}>\n            {`${statistic.name}`}\n          </Select.Option>\n        ))}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <Radio.Group\n        style={{ marginBottom: '10px' }}\n        buttonStyle=\"solid\"\n        size=\"small\"\n        value={perCapita}\n        onChange={e => setPerCapita(e.target.value)}\n      >\n        <Radio.Button value={false}>Absolute</Radio.Button>\n        <Radio.Button\n          value\n          disabled={\n            currentStatistic.code === 'POPULATION' ||\n            currentStatistic.isIntensive\n          }\n        >\n          Per capita\n        </Radio.Button>\n      </Radio.Group>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: perCapita\n              ? `${currentStatistic.unit.base}/capita`\n              : currentStatistic.unit.main,\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: value => value.toLocaleString(),\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n} from '../../store/statistics';\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { Radio } from 'antd';\n\nfunction CustomTooltip(props) {\n  const { active, payload } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label } = props;\n    const { unit } = payload[0];\n    const payloadWithoutWorld = payload\n      ? payload.filter(p => p.dataKey !== 'worldPrimary')\n      : [];\n    const worldPrimary = payload\n      ? payload.find(p => p.dataKey === 'worldPrimary')\n      : [];\n    const total = payloadWithoutWorld.reduce(\n      (sum, { value }) => sum + value,\n      0,\n    );\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payloadWithoutWorld.map(p => (\n            <div key={p.dataKey} style={{ lineHeight: '22px', color: p.color }}>\n              {`${p.name} : ${p.value.toLocaleString()} ${p.unit}`}\n            </div>\n          ))}\n          <hr size={1} />\n          <div key=\"total\" style={{ lineHeight: '22px', color: 'black' }}>\n            {`Total : ${Number(total.toFixed(2)).toLocaleString()} ${unit}`}\n          </div>\n          {worldPrimary && (\n            <div\n              key=\"primaryWorld\"\n              style={{ lineHeight: '22px', color: 'red' }}\n            >\n              {`World : ${Number(\n                worldPrimary.value.toFixed(2),\n              ).toLocaleString()} ${unit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n};\n\nfunction PrimaryEnergyChart(props) {\n  const { data, stacked, setStacked, perCapita, setPerCapita } = props;\n  const unit = perCapita ? ' toe/capita' : ' Mtoe';\n\n  const dataWithTotal = data.map(v => ({\n    ...v,\n    total: Number(\n      (v.coal + v.oil + v.gas + v.hydro + v.nuclear + v.renewables).toFixed(2),\n    ),\n  }));\n\n  // TODO\n  const hasCoal = data.some(v => v.coal >= 0.01);\n  const hasOil = data.some(v => v.oil >= 0.01);\n  const hasGas = data.some(v => v.gas >= 0.01);\n  const hasNuclear = data.some(v => v.nuclear >= 0.01);\n  const hasHydro = data.some(v => v.hydro >= 0.01);\n  const hasRenewables = data.some(v => v.renewables >= 0.01);\n\n  const LineArea = stacked ? Area : Line;\n\n  return (\n    <div className=\"PrimaryEnergyChart\">\n      <h3 className=\"PrimaryEnergyChart__title\">Primary Energy Consumption</h3>\n      <div>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={stacked}\n          onChange={e => setStacked(e.target.value)}\n          style={{ marginRight: '10px' }}\n        >\n          <Radio.Button value>Stacked</Radio.Button>\n          <Radio.Button value={false}>Split</Radio.Button>\n        </Radio.Group>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button value>Per capita</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ResponsiveContainer height={300} width=\"100%\">\n        <ComposedChart\n          data={dataWithTotal}\n          margin={{ top: 10, right: 0, bottom: 10, left: 0 }}\n        >\n          {hasCoal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasOil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasGas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasNuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasHydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {hasRenewables && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"renewables\"\n              dot={false}\n              activeDot={false}\n              name=\"Other renewables\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"worldPrimary\"\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            label={{\n              value: unit,\n              angle: -90,\n              position: 'insideLeft',\n            }}\n          />\n          <Tooltip content={CustomTooltip} />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nPrimaryEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      renewables: PropTypes.number,\n      worldPrimary: PropTypes.number,\n      total: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default PrimaryEnergyChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport PrimaryEnergyChart from '../components/PrimaryEnergyChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst WORLD = 'WORLD';\n\nconst mapOfStatistics = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_CONSUMPTION_MTOE',\n  nuclear: 'NUCLEAR_CONSUMPTION_MTOE',\n  renewables: 'NON_HYDRO_RENEWABLES_CONSUMPTION_MTOE',\n};\nconst statisticCodes = values(mapOfStatistics).concat(['POPULATION']);\nconst worldReferences = ['POPULATION', 'PRIMARY_ENERGY_CONSUMPTION_MTOE'];\n\nconst ConnectedPrimaryEnergyChart = connect(\n  (state, { countryCode, perCapita }) => ({\n    data: compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: {\n          ...mapOfStatistics,\n          worldPrimary: {\n            statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n            countryCode: WORLD,\n          },\n        },\n        countryCode,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(PrimaryEnergyChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stacked: true,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { countryCode, loadStatistics } = this.props;\n\n    loadStatistics({ statisticCodes, countryCode });\n    loadStatistics({\n      statisticCodes: worldReferences,\n      countryCode: WORLD,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistics } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  setStacked(stacked) {\n    this.setState({ stacked });\n  }\n\n  setPerCapita(perCapita) {\n    this.setState({ perCapita });\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n    const { stacked, perCapita } = this.state;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedPrimaryEnergyChart\n          countryCode={countryCode}\n          setStacked={value => this.setStacked(value)}\n          setPerCapita={value => this.setPerCapita(value)}\n          stacked={stacked}\n          perCapita={perCapita}\n        />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded:\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes,\n          countryCode: props.countryCode,\n        },\n        state,\n      ) &&\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes: worldReferences,\n          countryCode: WORLD,\n        },\n        state,\n      ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(PrimaryEnergyChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\n\nfunction CustomTooltip(props) {\n  const { active } = props;\n\n  if (active) {\n    const { payload, label, filter } = props;\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.filter(filter).map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${p.value.toLocaleString()} ${p.unit}`}\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n  filter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  filter: i => i,\n};\n\nfunction ProdConsoChart(props) {\n  const {\n    fuel,\n    prodStatistic,\n    consoStatistic,\n    // reservesStatistic,\n    data,\n  } = props;\n\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <h3>{fuel}</h3>\n      <ResponsiveContainer height={250} width=\"100%\">\n        <ComposedChart\n          data={dataWithImportAndExport}\n          margin={{ top: 30, right: 20, bottom: 5, left: 20 }}\n        >\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={1}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={1}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#880000\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          {/* {reservesStatisticCode && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"reserves\"\n              dot={false}\n              unit={reservesStatistic.unit}\n              stroke=\"blue\"\n              strokeWidth={3}\n              strokeOpacity={0.7}\n              name={reservesStatistic.name}\n              yAxisId=\"1\"\n            />\n          )} */}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis\n            label={{ value: unit, position: 'insideTopLeft', offset: -20 }}\n          />\n          {/* {reservesStatisticCode && (\n            <YAxis\n              orientation=\"right\"\n              label={{\n                value: reservesStatistic.unit,\n                position: 'insideTopRight',\n                offset: -20,\n              }}\n              yAxisId=\"1\"\n            />\n          )} */}\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip {...props2} filter={p => p.name !== 'base'} />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  prodStatistic: StatisticType.isRequired,\n  consoStatistic: StatisticType.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Spin } from 'antd';\n\nimport ProdConsoChart from '../components/ProdConsoChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n} from '../../../store/statistics';\n\nconst ConnectedProdConsoChart = connect((state, props) => ({\n  prodStatistic: statisticSelector(props.prodStatisticCode, state),\n  consoStatistic: statisticSelector(props.consoStatisticCode, state),\n  data: compiledCountryStatisticsSelector(\n    {\n      mapOfCountryStatistics: {\n        prod: props.prodStatisticCode,\n        conso: props.consoStatisticCode,\n      },\n      countryCode: props.countryCode,\n    },\n    state,\n  ),\n}))(ProdConsoChart);\n\nclass ProdConsoChartContainer extends Component {\n  componentDidMount() {\n    const {\n      consoStatisticCode,\n      prodStatisticCode,\n      countryCode,\n      loadStatistics,\n    } = this.props;\n    const statisticCodes = [consoStatisticCode, prodStatisticCode];\n    loadStatistics({ statisticCodes, countryCode });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      countryCode,\n      loadStatistics,\n      consoStatisticCode,\n      prodStatisticCode,\n    } = this.props;\n    const statisticCodes = [consoStatisticCode, prodStatisticCode];\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  render() {\n    const {\n      isLoaded,\n      fuel,\n      consoStatisticCode,\n      prodStatisticCode,\n      countryCode,\n    } = this.props;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedProdConsoChart\n          fuel={fuel}\n          consoStatisticCode={consoStatisticCode}\n          prodStatisticCode={prodStatisticCode}\n          countryCode={countryCode}\n        />\n      </Spin>\n    );\n  }\n}\n\nProdConsoChartContainer.propTypes = {\n  prodStatisticCode: PropTypes.string.isRequired,\n  consoStatisticCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  fuel: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded: countryStatisticsLoadedSelector(\n      {\n        statisticCodes: [props.prodStatisticCode, props.consoStatisticCode],\n        countryCode: props.countryCode,\n      },\n      state,\n    ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(ProdConsoChartContainer);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../../../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction CountryMap(props) {\n  const { country } = props;\n\n  return (\n    <div className=\"CountryMap\">\n      <Map\n        center={country.latlng}\n        zoom={2}\n        style={{ height: '300px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {country.geojson && <GeoJSON data={country.geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nCountryMap.propTypes = {\n  country: PropTypes.shape({\n    latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n    area: PropTypes.number.isRequired,\n    geojson: PropTypes.object.isRequired,\n  }).isRequired,\n};\n\nexport default CountryMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Line, XAxis, Tooltip, LineChart } from 'recharts';\n\nfunction SelfSufficiencyChart(props) {\n  const { data } = props;\n  return (\n    <div className=\"SelfSufficiency\">\n      Self-sufficiency\n      <LineChart\n        data={data}\n        height={100}\n        width={300}\n        margin={{ left: 20, top: 10 }}\n      >\n        <Line\n          dataKey=\"value\"\n          width={3}\n          stroke=\"red\"\n          name=\"Self-sufficiency\"\n          dot={false}\n          unit=\" %\"\n        />\n        <XAxis dataKey=\"year\" interval={9} />\n        <Tooltip />\n      </LineChart>\n    </div>\n  );\n}\n\nSelfSufficiencyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n};\n\nexport default SelfSufficiencyChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Spin } from 'antd';\n\nimport SelfSufficiencyChart from '../components/SelfSufficiencyChart';\n\nimport {\n  loadCountryStatistic,\n  countryStatisticLoadedSelector,\n  countryStatisticValuesSelector,\n} from '../../../store/statistics';\n\nconst ENERGY_SELF_SUFFICIENCY = 'ENERGY_SELF_SUFFICIENCY';\n\nconst ConnectedSelfSufficiencyChart = connect((state, { countryCode }) => ({\n  data: countryStatisticValuesSelector(\n    {\n      statisticCode: ENERGY_SELF_SUFFICIENCY,\n      countryCode,\n    },\n    state,\n  ),\n}))(SelfSufficiencyChart);\n\nclass PrimaryEnergyChartContainer extends Component {\n  componentDidMount() {\n    const { countryCode, loadStatistic } = this.props;\n\n    loadStatistic({ statisticCode: ENERGY_SELF_SUFFICIENCY, countryCode });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistic } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      loadStatistic({ statisticCode: ENERGY_SELF_SUFFICIENCY, countryCode });\n    }\n  }\n\n  render() {\n    const { isLoaded, countryCode } = this.props;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedSelfSufficiencyChart countryCode={countryCode} />\n      </Spin>\n    );\n  }\n}\n\nPrimaryEnergyChartContainer.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded: countryStatisticLoadedSelector(\n      {\n        statisticCode: ENERGY_SELF_SUFFICIENCY,\n        countryCode: props.countryCode,\n      },\n      state,\n    ),\n  }),\n  { loadStatistic: loadCountryStatistic },\n)(PrimaryEnergyChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Redirect } from 'react-router-dom';\n\nimport { Row, Col } from 'antd';\n\nimport { countrySelector } from '../../store/countries';\n\nimport PrimaryEnergyChartContainer from './containers/PrimaryEnergyChartContainer';\nimport ProdConsoChartContainer from './containers/ProdConsoCharContainer';\nimport CountryMap from './components/CountryMap';\nimport SelfSufficiencyContainer from './containers/SelfSufficiencyContainer';\n\nfunction CountryView(props) {\n  const { country } = props;\n\n  if (!country || country.disabled) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const countryCode = country.alpha2Code;\n  return (\n    <div className=\"CountryView\">\n      <Row gutter={16}>\n        <Col xs={24} sm={24} md={18}>\n          <h2>{country.commonName}</h2>\n          <div>{`Capital: ${country.capital}`}</div>\n          <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n          <SelfSufficiencyContainer countryCode={countryCode} />\n          <div>\n            <PrimaryEnergyChartContainer countryCode={country.alpha2Code} />\n          </div>\n        </Col>\n        <Col xs={0} sm={0} md={6}>\n          <img\n            style={{ height: '100px' }}\n            src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n            alt={`Flag of ${country.commonName}`}\n          />\n          <CountryMap country={country} />\n        </Col>\n      </Row>\n      <Row>\n        <h3>Imports/Exports</h3>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n            fuel=\"Coal\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n            fuel=\"Oil\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n            consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n            fuel=\"Gas\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nCountryView.propTypes = {\n  country: PropTypes.shape({\n    alpha2Code: PropTypes.string.isRequired,\n    commonName: PropTypes.string.isRequired,\n  }),\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countrySelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { loadAllCountries } from '../store/countries';\nimport {\n  loadAllStatistics,\n  loadStatisticOfCountries,\n} from '../store/statistics';\n\nexport function withLoader(config) {\n  const {\n    loadFunctions,\n    isLoadedSelector = () => false,\n    mapStateToProps = () => {},\n  } = config;\n\n  const loadAll = props => (dispatch, getState) =>\n    loadFunctions.map(loadFunction => loadFunction(props)(dispatch, getState));\n\n  return function wrapLoaderHOC(WrappedComponent) {\n    const ConnectedWrappedComponent = WrappedComponent\n      ? connect(mapStateToProps)(WrappedComponent)\n      : () => null;\n\n    return connect(\n      (state, props) => ({\n        isLoaded: isLoadedSelector(props, state),\n      }),\n      { load: loadAll },\n    )(\n      class LoaderComponent extends Component {\n        static propTypes = {\n          load: PropTypes.func.isRequired,\n          isLoaded: PropTypes.bool.isRequired,\n        };\n\n        componentDidMount() {\n          const { load, isLoaded, ...args } = this.props;\n          load(args);\n        }\n\n        render() {\n          const { isLoaded, load, ...otherProps } = this.props;\n\n          if (!isLoaded) {\n            return null;\n          }\n          return <ConnectedWrappedComponent {...otherProps} />;\n        }\n      },\n    );\n  };\n}\n\nexport const CountriesLoader = withLoader({\n  loadFunctions: [loadAllCountries],\n})();\n\nexport const StatisticsLoader = withLoader({\n  loadFunctions: [loadAllStatistics],\n})();\n\nexport const StatisticAllCountriesLoader = withLoader({\n  loadFunctions: [\n    ({ statisticCode }) => loadStatisticOfCountries(statisticCode),\n  ],\n})();\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport { CountriesLoader, StatisticsLoader } from '../loaders';\n\nimport { countriesLoadedSelector, countriesSelector } from '../store/countries';\nimport { statisticsLoadedSelector } from '../store/statistics';\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isReady } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      {!isReady && <Spin size=\"large\" />}\n      {isReady && (\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            <Switch>\n              <Route path=\"/home\" exact component={HomeView} />\n              <Route\n                path=\"/country/:countryCode\"\n                exact\n                component={CountryView}\n              />\n              <Route path=\"/about\" exact component={AboutView} />\n              <Route\n                component={() => <Redirect to={{ pathname: '/home' }} />}\n              />\n            </Switch>\n          </Layout.Content>\n          <Layout.Footer>Sources: IEA, EIA, World Data Bank</Layout.Footer>\n        </Layout>\n      )}\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isReady: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isReady: countriesLoadedSelector(state) && statisticsLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}