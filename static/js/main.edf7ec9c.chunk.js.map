{"version":3,"sources":["api/countries.js","store/countries.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","store/index.js","utils/types.js","utils/index.js","views/HomeView/components/WorldMap.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","views/CountryView/components/CountryMap.jsx","views/CountryView/components/CustomTooltip.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SummaryTab.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.js","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["countryMapValues","country","worldTopo","a","objects","countries","geometries","find","c","id","numericCode","Object","objectSpread","geojson","feature","_callee","_ref","_ref2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","map","res","json","sent","slicedToArray","abrupt","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","dependentCountriesSelector","countrySelector","countryCode","countriesReducer","arguments","length","undefined","action","statisticsLoadedSelector","statistics","allStatisticsSelector","statisticSelector","statisticCode","countryStatisticSelector","statistic","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref4","compiledCountryStatisticsSelector","mapOfCountryStatistics","_ref3","year","sources","objectWithoutProperties","value","Number","isNaN","isFinite","computeDerivedValueFromCompiled","countryStatisticsLoadedSelector","_ref5","statisticCodes","statisticOfAllCountriesLoadedSelector","alpha2Code","_ref7","_ref11","perCapita","parsedMapOfCountryStatistics","defaultCountry","parsed","countryCodes","uniq","d","populations","mergeAll","defineProperty","concat","parseMapOfStatistics","mapOfStatistic","_ref8","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","statisticValues","Math","min","apply","toConsumableArray","v","endingYears","max","computeYearInterval","_computeYearInterval2","startingYear","endingYear","mapOfNamedStatisticValues","mapObjIndexed","compileName","_ref9","allValues","allValuesByYear","groupBy","keys","sort","compiledValue","popCompileName","population","factor","populationFactor","computeValue","unit","omit","energySourceCountryConsumedSelector","check","some","coal","gas","oil","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","compiledStatisticForCountriesAndYear","_ref12","push","yearValue","fetchJSON","url","options","then","MTOE_UNIT","main","base","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","derivedStatistics","code","name","description","consumption","production","sourceAttribution","category","isIntensive","energy","gdp","co2","geothSolarWindTide","_ref6","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","sourceCodes","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","initialCountryStatistic","countryStatisticReducer","statisticsReducer","reduce","acc","WORLD","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","area","number","latlng","arrayOf","object","bool","coordsToLatLng","coords","_coords","longitude","latitude","L","latLng","isMobileOrTablet","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","toPrecision","toLocaleString","tickFormatter","displayUnit","MAP_HEIGHT","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","dependentCountries","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","indexBy","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","dragging","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","background","backgroundColor","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","formatedData","s","statisticByCategory","es_select","width","placeholder","optionFilterProp","showSearch","onChange","stats","OptGroup","label","sortBy","Option","title","slider","defaultValue","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","size","e","target","Button","disabled","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","href","defaultSortOrder","align","onRow","record","onClick","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","CustomGeoJSON","createGeoJSON","prevProps","remove","_this$props","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","CountryMap","TileLayer","attribution","CountryMap_GeoJSON","CustomTooltip","active","separator","payload","withTotal","_payload$","_payload$$formatter","formatter","total","sum","p","totalUnit","_p$formatter","dataKey","defaultProps","EnergyMixChart","stacked","setStacked","sourceConsumed","coalUnit","LineArea","Area","Line","console","warn","marginRight","ResponsiveContainer","ComposedChart","top","bottom","dot","activeDot","stroke","fill","stackId","CartesianGrid","opacity","XAxis","interval","YAxis","angle","position","offset","component_Tooltip","content","props2","components_CustomTooltip","assign","Legend","iconType","ConnectedEnergyMixChart","mapOfStatistics","worldReference","world","EnergyMixChartContainer","loadStatistics","_this$props2","_this$props3","spin","spinning","containers_EnergyMixChartContainer","primaryMap","primaryReference","electrictyMap","electricityReference","SummaryTab","Loader","load","prevOtherProps","otherProps","equals","buildLoader","loadFunction","StatisticsLoader","defaultSelector","withCountryStatistic","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","lineHeight","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","dataWithImportAndExport","l","diff","toFixed","export","import","strokeOpacity","strokeWidth","ProdConsoChart_CustomTooltip","BasicChart","LineChart","padding","withCountryStatistics","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","IndependencyTab","sm","BasicChartContainer","ClimateTab","PopulationChart","GDPChart","tabList","tab","tabContent","summary","components_SummaryTab","independency","components_IndependencyTab","climate","components_ClimateTab","CountryView","currentTab","tabKey","Redirect","to","flag","flagIcon","xs","card","marginTop","lg","maxHeight","src","toLowerCase","alt","components_CountryMap","activeTabKey","onTabChange","setTab","match","params","AboutView","rel","GitHubLink","icon","theme","HeaderMenu","goTo","menu","mode","selectable","Item","Link","onSelect","components_GitHubLink","CountriesLoader","prop","ConnectedHeaderMenu","withRouter","AppLayout_StatisticsLoader","layout","Header","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.edf7ec9c.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\n\nfunction countryMapValues(country, worldTopo) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  return {\n    ...country,\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nasync function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [fetch('/data/countries.json'), fetch('/data/worldTopo.json')].map(res =>\n      res.json(),\n    ),\n  );\n  return countries.map(country => countryMapValues(country, worldTopo));\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport default countriesReducer;\n","import {\n  values,\n  mapObjIndexed,\n  mergeAll,\n  groupBy,\n  map,\n  omit,\n  uniq,\n} from 'ramda';\nimport { countriesSelector } from '../countries';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, value: null }\n      : { year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(\n  { statisticCodes, countryCode },\n  state,\n) {\n  return statisticCodes.every(statisticCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (!population && perCapita)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction parseMapOfStatistics(\n  mapOfCountryStatistics,\n  defaultCountry,\n  perCapita,\n) {\n  const parsed = map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n  const countryCodes = uniq(values(parsed).map(d => d.countryCode));\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...(perCapita ? populations : {}),\n    ...parsed,\n  };\n}\n\nexport function compiledCountryStatisticsSelector(\n  { mapOfCountryStatistics, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    parsedMapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    parsedMapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .filter(value => startingYear <= value.year && value.year <= endingYear)\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          parsedMapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year', 'pop'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\n\nexport function energySourceCountryConsumedSelector(countryCode, state) {\n  const check = d => d.value > 0.01;\n  const statisticCodeMap = {\n    coal: 'COAL_CONSUMPTION_MTOE',\n    gas: 'GAS_CONSUMPTION_MTOE',\n    oil: 'OIL_CONSUMPTION_MTOE',\n    hydro: 'HYDRO_PRODUCTION_MTOE',\n    nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n    solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n  };\n  return map(\n    statisticCode =>\n      countryStatisticValuesSelector(\n        { statisticCode, countryCode },\n        state,\n      ).some(check),\n    statisticCodeMap,\n  );\n}\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","const PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description: '',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description: '',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: '',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description: '',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics({ statisticCodes: sourceCodes, countryCode }),\n      );\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics({ statisticCodes, countryCode }) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      statisticCodes.map(statisticCode =>\n        dispatch(loadCountryStatistic({ statisticCode, countryCode })),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer from './statistics';\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n","import L from 'leaflet';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n  } = props;\n  const maxValue = Math.max(\n    ...data.filter(d => d.countryCode !== 'WORLD').map(d => d.value),\n  );\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: 'white',\n                  weight: 0.5,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(value)}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          {`${currentStatistic.name} (${displayUnit(\n            currentStatistic.unit,\n            perCapita,\n          )})`}\n        </div>\n        <div className=\"WorldMap__legend__colors\">\n          <div>\n            <div\n              className=\"WorldMap__legend__gradient\"\n              style={{\n                background: colorGradient,\n              }}\n            />\n            <div className=\"WorldMap__legend__gradientRange\">\n              <div>0</div>\n              <div>{formatNumber(maxValue)}</div>\n            </div>\n          </div>\n          <div>\n            <div\n              className=\"WorldMap__legend__NA__square\"\n              style={{ backgroundColor: NA_COLOR }}\n            />\n            <div>NA</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy, groupBy } from 'ramda';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <Radio.Group\n        style={{ marginBottom: '10px' }}\n        buttonStyle=\"solid\"\n        size=\"small\"\n        value={perCapita}\n        onChange={e => setPerCapita(e.target.value)}\n      >\n        <Radio.Button value={false}>Absolute</Radio.Button>\n        <Radio.Button\n          value\n          disabled={\n            currentStatistic.code === 'POPULATION' ||\n            currentStatistic.isIntensive\n          }\n        >\n          Per capita\n        </Radio.Button>\n      </Radio.Group>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n} from '../../store/statistics';\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../../../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction CountryMap(props) {\n  const { country } = props;\n\n  return (\n    <div className=\"CountryMap\">\n      <Map\n        center={country.latlng}\n        zoom={2}\n        style={{ height: '200px', zIndex: 0 }}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {country.geojson && <GeoJSON data={country.geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nCountryMap.propTypes = {\n  country: PropTypes.shape({\n    latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n    area: PropTypes.number.isRequired,\n    geojson: PropTypes.object.isRequired,\n  }).isRequired,\n};\n\nexport default CountryMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\n//\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label } = props;\n\n    if (payload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload.reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = payload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload.map(p => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  withTotal: PropTypes.bool,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  withTotal: false,\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { Radio } from 'antd';\nimport { values } from 'ramda';\n\nimport { tickFormatter, displayUnit } from '../../../utils';\nimport { StatisticType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nfunction EnergyMixChart(props) {\n  const {\n    data,\n    stacked,\n    setStacked,\n    perCapita,\n    setPerCapita,\n    sourceConsumed,\n    statistics,\n    title,\n  } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <h3 className=\"EnergyMixChart__title\">{title}</h3>\n      <div>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={stacked}\n          onChange={e => setStacked(e.target.value)}\n          style={{ marginRight: '10px' }}\n        >\n          <Radio.Button value>Stacked</Radio.Button>\n          <Radio.Button value={false}>Split</Radio.Button>\n        </Radio.Group>\n        <Radio.Group\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button value>Per capita</Radio.Button>\n        </Radio.Group>\n      </div>\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart\n          data={data}\n          margin={{ top: 10, right: 0, bottom: 10, left: 20 }}\n        >\n          {sourceConsumed.coal && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"coal\"\n              dot={false}\n              activeDot={false}\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.oil && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"oil\"\n              dot={false}\n              activeDot={false}\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.gas && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"gas\"\n              dot={false}\n              activeDot={false}\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.nuclear && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"nuclear\"\n              dot={false}\n              activeDot={false}\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.hydro && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"hydro\"\n              dot={false}\n              activeDot={false}\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.biofuelsWaste && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"biofuelsWaste\"\n              dot={false}\n              activeDot={false}\n              name=\"Biofuels & Waste\"\n              stroke=\"saddlebrown\"\n              fill=\"saddlebrown\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {sourceConsumed.solarWindTideGeoth && (\n            <LineArea\n              type=\"monotone\"\n              dataKey=\"solarWindTideGeoth\"\n              dot={false}\n              activeDot={false}\n              name=\"Geothermy, Wind, Solar & Tide\"\n              stroke=\"green\"\n              fill=\"green\"\n              stackId=\"1\"\n              unit={unit}\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis\n            tickFormatter={tickFormatter}\n            label={{\n              value: unit,\n              angle: -90,\n              position: 'insideLeft',\n              offset: -10,\n            }}\n          />\n          <Tooltip\n            content={props2 => <CustomTooltip {...props2} withTotal />}\n          />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  title: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  sourceConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default EnergyMixChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { values, map } from 'ramda';\n\nimport { Spin } from 'antd';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  compiledCountryStatisticsSelector,\n  energySourceCountryConsumedSelector,\n  statisticSelector,\n} from '../../../store/statistics';\n\nconst WORLD = 'WORLD';\nconst POPULATION = 'POPULATION';\n\nconst ConnectedEnergyMixChart = connect(\n  (state, { countryCode, perCapita, mapOfStatistics, worldReference }) => ({\n    data: compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: {\n          ...mapOfStatistics,\n          world: {\n            statisticCode: worldReference,\n            countryCode: WORLD,\n          },\n        },\n        countryCode,\n        perCapita,\n      },\n      state,\n    ),\n    statistics: map(\n      statisticCode => statisticSelector(statisticCode, state),\n      mapOfStatistics,\n    ),\n    sourceConsumed: energySourceCountryConsumedSelector(countryCode, state),\n  }),\n)(EnergyMixChart);\n\nclass EnergyMixChartContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      stacked: true,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const {\n      countryCode,\n      loadStatistics,\n      mapOfStatistics,\n      worldReference,\n    } = this.props;\n    const statisticCodes = values(mapOfStatistics).concat([POPULATION]);\n\n    loadStatistics({ statisticCodes, countryCode });\n    loadStatistics({\n      statisticCodes: [worldReference, POPULATION],\n      countryCode: WORLD,\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { countryCode, loadStatistics, mapOfStatistics } = this.props;\n    if (countryCode !== prevProps.countryCode) {\n      const statisticCodes = values(mapOfStatistics);\n      loadStatistics({ statisticCodes, countryCode });\n    }\n  }\n\n  setStacked(stacked) {\n    this.setState({ stacked });\n  }\n\n  setPerCapita(perCapita) {\n    this.setState({ perCapita });\n  }\n\n  render() {\n    const {\n      title,\n      isLoaded,\n      countryCode,\n      mapOfStatistics,\n      worldReference,\n    } = this.props;\n    const { stacked, perCapita } = this.state;\n\n    return (\n      <Spin spinning={!isLoaded}>\n        <ConnectedEnergyMixChart\n          title={title}\n          countryCode={countryCode}\n          mapOfStatistics={mapOfStatistics}\n          worldReference={worldReference}\n          setStacked={value => this.setStacked(value)}\n          setPerCapita={value => this.setPerCapita(value)}\n          stacked={stacked}\n          perCapita={perCapita}\n        />\n      </Spin>\n    );\n  }\n}\n\nEnergyMixChartContainer.propTypes = {\n  title: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  loadStatistics: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  mapOfStatistics: PropTypes.shape({\n    coal: PropTypes.string.isRequired,\n    oil: PropTypes.string.isRequired,\n    gas: PropTypes.string.isRequired,\n    hydro: PropTypes.string.isRequired,\n    nuclear: PropTypes.string.isRequired,\n    biofuelsWaste: PropTypes.string.isRequired,\n    solarWindTideGeoth: PropTypes.string.isRequired,\n  }).isRequired,\n  worldReference: PropTypes.string.isRequired,\n};\n\nexport default connect(\n  (state, props) => ({\n    isLoaded:\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes: values(props.mapOfStatistics).concat([POPULATION]),\n          countryCode: props.countryCode,\n        },\n        state,\n      ) &&\n      countryStatisticsLoadedSelector(\n        {\n          statisticCodes: [props.worldReference, POPULATION],\n          countryCode: WORLD,\n        },\n        state,\n      ),\n  }),\n  { loadStatistics: loadCountryStatistics },\n)(EnergyMixChartContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nfunction SummaryTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <EnergyMixChartContainer\n        title=\"Primary energy consumption\"\n        countryCode={countryCode}\n        mapOfStatistics={primaryMap}\n        worldReference={primaryReference}\n      />\n      <EnergyMixChartContainer\n        title=\"Electricity generation by fuels\"\n        countryCode={countryCode}\n        mapOfStatistics={electrictyMap}\n        worldReference={electricityReference}\n      />\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n} from '../store/statistics';\n\nconst StatisticsLoader = buildLoader(loadCountryStatistics);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction withCountryStatistic(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) => {\n      const mapOfCountryStatistics = mapOfCountryStatisticsSelector(\n        state,\n        props,\n      );\n      const statisticCodes = values(mapOfCountryStatistics);\n\n      if (props.perCapita) {\n        statisticCodes.push('POPULATION');\n      }\n\n      return {\n        data: compiledCountryStatisticsSelector(\n          {\n            mapOfCountryStatistics,\n            countryCode: props.countryCode,\n            perCapita: props.perCapita,\n          },\n          state,\n        ),\n        statistics: map(\n          statisticCode => statisticSelector(statisticCode, state),\n          mapOfCountryStatistics,\n        ),\n        isLoaded: countryStatisticsLoadedSelector(\n          {\n            statisticCodes,\n            countryCode: props.countryCode,\n          },\n          state,\n        ),\n        statisticCodes,\n        perCapita: props.perCapita || false,\n      };\n    })(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader\n          statisticCodes={props.statisticCodes}\n          countryCode={props.countryCode}\n        />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistic;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { formatNumber, tickFormatter } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active } = props;\n\n  if (active) {\n    const { payload, label, filter } = props;\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {payload &&\n            payload.filter(filter).map(p => (\n              <div\n                key={p.dataKey}\n                style={{ lineHeight: '22px', color: p.color }}\n              >\n                {`${p.name} : ${formatNumber(p.value)} ${p.unit}`}\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.string,\n  filter: PropTypes.func,\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  filter: i => i,\n};\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <h3>{fuel}</h3>\n      <ResponsiveContainer height={250} width=\"100%\">\n        <ComposedChart\n          data={dataWithImportAndExport}\n          margin={{ top: 30, right: 20, bottom: 5, left: 20 }}\n        >\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis\n            label={{ value: unit, position: 'insideTopLeft', offset: -20 }}\n          />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip {...props2} filter={p => p.name !== 'base'} />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const { data, statistics, color, perCapita } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"SelfSufficiency\">\n      <strong>{`${statistic.name} (${unit})`}</strong>\n      <ResponsiveContainer height={200}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={statistic.name}\n            unit={` ${unit}`}\n          />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={CustomTooltip} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  color: PropTypes.string,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default BasicChart;\n","import withCountryStatistics from '../../../HOC/withCountryStatistics';\nimport BasicChart from '../components/BasicChart';\n\nexport default withCountryStatistics()(BasicChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport withCountryStatistics from '../../../HOC/withCountryStatistics';\nimport ProdConsoChart from './ProdConsoChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst ProdConsoChartContainer = withCountryStatistics((state, props) => ({\n  prod: props.prodStatisticCode,\n  conso: props.consoStatisticCode,\n}))(ProdConsoChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n      </Row>\n      <Row>\n        <h3>Imports/Exports</h3>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n            fuel=\"Coal\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n            consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n            fuel=\"Oil\"\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <ProdConsoChartContainer\n            countryCode={countryCode}\n            prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n            consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n            fuel=\"Gas\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst statisticCodes = [\n  'CO2_EMISSIONS_MT',\n  'CO2_INTENSITY_OF_ENERGY',\n  'ENERGY_INTENSITY',\n  // 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n];\n\nfunction ClimateTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row gutter={20}>\n        {statisticCodes.map(statisticCode => (\n          <Col md={24 / statisticCodes.length} sm={24}>\n            <BasicChartContainer\n              statisticCode={statisticCode}\n              countryCode={countryCode}\n            />\n          </Col>\n        ))}\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\n\nimport { countrySelector } from '../../store/countries';\n\nimport CountryMap from './components/CountryMap';\nimport SummaryTab from './components/SummaryTab';\nimport IndependencyTab from './components/IndependencyTab';\nimport ClimateTab from './components/ClimateTab';\n\nimport BasicChart from './components/BasicChart';\nimport withCountryStatistics from '../../HOC/withCountryStatistics';\nimport { isMobileOrTablet } from '../../utils';\n\nconst [PopulationChart, GDPChart] = ['POPULATION', 'GDP_2010_USD'].map(\n  statisticCode =>\n    withCountryStatistics({\n      value: statisticCode,\n    })(BasicChart),\n);\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst tabContent = {\n  summary: countryCode => <SummaryTab countryCode={countryCode} />,\n  independency: countryCode => <IndependencyTab countryCode={countryCode} />,\n  climate: countryCode => <ClimateTab countryCode={countryCode} />,\n};\n\nclass CountryView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { country } = this.props;\n    const { currentTab } = this.state;\n\n    if (!country || country.disabled) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const countryCode = country.alpha2Code;\n    const flag = isMobileOrTablet() ? country.flagIcon : '';\n    return (\n      <div className=\"CountryView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n              <div>{`Capital: ${country.capital}`}</div>\n              <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n              <Row style={{ marginTop: '20px' }} gutter={10}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <PopulationChart countryCode={countryCode} color=\"#2c82c9\" />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <GDPChart\n                    countryCode={countryCode}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <img\n              style={{\n                width: '100%',\n                marginBottom: '20px',\n                maxHeight: '180px',\n              }}\n              src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n              alt={`Flag of ${country.commonName}`}\n            />\n            <CountryMap country={country} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](countryCode)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nCountryView.propTypes = {\n  country: PropTypes.shape({\n    alpha2Code: PropTypes.string.isRequired,\n    commonName: PropTypes.string.isRequired,\n  }),\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countrySelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isLoaded } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      <Spin size=\"large\" spinning={!isLoaded}>\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            {!isLoaded && <div className=\"AppLayout__splash\" />}\n            {isLoaded && (\n              <Switch>\n                <Route path=\"/home\" exact component={HomeView} />\n                <Route\n                  path=\"/country/:countryCode\"\n                  exact\n                  component={CountryView}\n                />\n                <Route path=\"/about\" exact component={AboutView} />\n                <Route\n                  component={() => <Redirect to={{ pathname: '/home' }} />}\n                />\n              </Switch>\n            )}\n          </Layout.Content>\n          <Layout.Footer>Sources: IEA, World Data Bank</Layout.Footer>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded: countriesLoadedSelector(state) && statisticsLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}