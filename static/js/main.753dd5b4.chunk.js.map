{"version":3,"sources":["api/countries.js","store/countries.js","utils/index.js","store/statistics/selectors.js","api/helpers.js","api/derivedStatistics.js","store/statistics/actions.js","api/statistics.js","store/statistics/reducer.js","api/areas.js","store/areas.js","store/index.js","utils/types.js","views/HomeView/components/WorldMap.jsx","components/StatisticDetails.jsx","views/HomeView/components/StatisticExplorer.jsx","views/HomeView/index.jsx","store/otherSelectors.js","components/GeoJSONMap.jsx","HOC/buildLoader.js","HOC/withCountryStatistics.jsx","HOC/buildChart.jsx","views/CountryView/components/CustomTooltip.jsx","views/CountryView/components/EnergyMixChart.jsx","views/CountryView/containers/EnergyMixChartContainer.jsx","views/CountryView/components/SummaryTab.jsx","views/CountryView/components/ProdConsoChart.jsx","views/CountryView/components/GDPByEnergyChart.jsx","views/CountryView/components/BasicChart.jsx","views/CountryView/containers/BasicChartContainer.jsx","views/CountryView/components/IndependencyTab.jsx","views/CountryView/components/ClimateTab.jsx","views/CountryView/index.jsx","views/AboutView/index.jsx","views/AreaView/index.jsx","components/GitHubLink.jsx","components/HeaderMenu.jsx","components/AppLayout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["countryMapValues","country","worldTopo","a","objects","countries","geometries","find","c","id","numericCode","Object","objectSpread","geojson","feature","_callee","_ref","_ref2","regenerator_default","wrap","_context","prev","next","Promise","all","fetch","map","p","then","res","json","sent","slicedToArray","abrupt","stop","this","getAllCountries","COUNTRIES_LOAD_ACTION","COUNTRIES_RECEIVE_ACTION","defaultIndicators","coal","oil","gas","hydro","nuclear","biofuelsWaste","solarWindTideGeoth","receiveCountriesAction","data","errors","type","initialState","loading","loaded","countriesLoadedSelector","state","countriesSelector","values","filter","isIndependent","dependentCountriesSelector","countrySelector","countryCode","fuelConsumedCountrySelector","hasConsumed","fuelProducedOrConsumedCountrySelector","mapObjIndexed","v","k","hasProduced","countriesReducer","arguments","length","undefined","action","coordsToLatLng","coords","_coords","longitude","latitude","L","latLng","isMobileOrTablet","check","navigator","userAgent","vendor","window","opera","test","substr","formatNumber","value","Number","isNaN","toPrecision","toLocaleString","tickFormatter","displayUnit","unit","perCapita","concat","base","main","parseMapOfStatistics","mapOfCountryStatistics","defaultCountry","statistics","statisticCode","addPopCountryStatistics","countryCodes","uniq","d","populations","mergeAll","defineProperty","statisticsLoadedSelector","allStatisticsSelector","statisticSelector","countryStatisticSelector","statistic","countryStatisticLoadedSelector","compute","source","every","sourceCode","countryStatistic","countryStatisticValuesSelector","_ref4","compiledCountryStatisticsSelector","_ref3","year","sources","objectWithoutProperties","isFinite","computeDerivedValueFromCompiled","statisticOfAllCountriesLoadedSelector","alpha2Code","fn","hashFunction","args","JSON","stringify","cacheSize","cache","_len","Array","_key","hash","apply","hashes","keys","memoize","_ref5","_ref9","baseMap","mapOfStatistic","_ref6","mapOfStatisticValues","_computeYearInterval","arrayOfStatisticValues","startingYears","statisticValues","Math","min","toConsumableArray","endingYears","max","computeYearInterval","_computeYearInterval2","startingYear","endingYear","mapOfNamedStatisticValues","compileName","_ref7","allValues","allValuesByYear","groupBy","sort","compiledValue","popCompileName","population","factor","populationFactor","computeValue","omit","compiledStatisticForCountriesAndYear","_ref10","push","yearValue","statisticSourcesSelector","statisticCodes","reduce","statisticSources","code","fetchJSON","url","options","MTOE_UNIT","pow","TWH_UNIT","POWER_PLANT_EFFICIENCIES","derivedStatistics","name","description","consumption","production","sourceAttribution","category","isIntensive","energy","gdp","co2","geothSolarWindTide","STATISTICS_LOAD_ACTION","STATISTICS_RECEIVE_ACTION","COUNTRY_STATISTIC_LOAD_ACTION","COUNTRY_STATISTIC_RECEIVE_ACTION","STATISTIC_LOAD_ALL_COUNTRIES_ACTION","STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION","receiveStatisticsAction","receiveCountryStatisticAction","receiveStatisticOfCountriesAction","loadCountryStatistic","dispatch","getState","countryStatistics","loadCountryStatistics","loadCountryStatisticAction","getStatisticOfCountry","statisticValue","catch","initialCountryStatistic","countryStatisticReducer","statisticsReducer","acc","WORLD","indexedCountries","indexBy","cca2","countriesData","computeGeojson","area","countryAlpha3Codes","ccn3","includes","merge","AREAS_LOAD_ACTION","AREAS_RECEIVE_ACTION","receiveAreasAction","areasLoadedSelector","areas","areasSelector","areasReducer","rootReducer","combineReducers","enhancers","applyMiddleware","thunk","enhancer","composeWithDevTools","actionSanitizer","store","createStore","CountryType","PropTypes","shape","string","isRequired","alpha3Code","commonName","capital","number","latlng","arrayOf","object","MAP_HEIGHT","bool","sourceUrl","sourceDescriptionUrl","MIN_COLOR","NA_COLOR","colorGradient","gradiant","interpolateRgb","func","i","log","WorldMap","props","dependentCountries","currentStatistic","currentYear","maxValue","colorValueMap","minValue","valueMap","color","computeColorMap","react_default","createElement","className","Map","zoom","center","style","height","zIndex","maxBounds","dragging","_colorValueMap$countr","GeoJSON","key","ref","leafletElement","setStyle","weight","fillColor","fillOpacity","Tooltip","sticky","background","backgroundColor","StatisticDetails","descriptionLines","split","popover","title","arrowPointAtCenter","overlayStyle","maxWidth","content","stat","href","target","rel","placement","es_button","size","icon","marginRight","defaultProps","StatisticExplorer","onRowClick","setStatistic","setYear","setPerCapita","isLoaded","formatedData","s","statisticByCategory","es_select","width","placeholder","optionFilterProp","showSearch","onChange","stats","OptGroup","label","sortBy","Option","slider","defaultValue","onAfterChange","debounce","included","marks","margin","left","right","es_radio","Group","marginBottom","buttonStyle","e","Button","disabled","components_StatisticDetails","table","rowKey","pagination","dataSource","scroll","y","columns","dataIndex","sorter","b","localeCompare","render","text","defaultSortOrder","align","onRow","record","onClick","f","ConnectedWorldMap","connect","ConnectedStatisticExplorer","HomeView","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadStatistic","newState","setState","_this2","history","_this$state","row","gutter","md","col","Component","loadStatisticOfCountries","forEach","loadStatisticOfCountriesAction","getStatisticOfAllCountries","countryWithAreasSelector","areasOfCountrySelector","areaWithCountriesSelector","areaCode","areaSelector","CustomGeoJSON","createGeoJSON","prevProps","remove","_this$props","leaflet","geoJSON","addTo","bounds","getBounds","flyToBounds","withLeaflet","GeoJSONMap","TileLayer","attribution","GeoJSONMap_GeoJSON","Loader","load","prevOtherProps","_this$props2","otherProps","equals","buildLoader","loadFunction","StatisticsLoader","defaultSelector","mapStateToProps","worldReference","mapOfCountryStatisticsInput","world","parsedMapOfCountryStatistics","mapOfCountryStatisticsToLoad","countryStatisticsToLoad","countryStatitics","countryStatisticsLoadedSelector","withCountryStatistics","mapOfCountryStatisticsSelectorInput","mapOfCountryStatisticsSelector","WrappedComponent","spin","spinning","defaultHeight","ChartSettings","perCapitaSwitch","stackedSwitch","stacked","setStacked","es_switch","checked","buildChart","_options$perCapitaSwi","_options$stackedSwitc","hocs","hasSettings","withStateHandlers","_ref$defaultPerCapita","defaultPerCapita","_ref$defaultStacked","defaultStacked","WrappedChart","compose","_Component","ChartWrapper","chartRef","React","createRef","buttonRef","inherits","createClass","_this$props$perCapita","_this$props$stacked","statisticList","finalHeight","file","replace","descriptionStatistic","finalDescription","data-html2canvas-ignore","domElement","scale","current","domToImage","toBlob","element","bgcolor","transform","offsetWidth","offsetHeight","blob","saveAs","err","console","theme","assign","CustomTooltip","active","separator","payload","withTotal","displayFilter","totalFilter","units","filteredPayload","_payload$","_payload$$formatter","formatter","total","sum","totalUnit","_p$formatter","dataKey","EnergyMixChart","fuelConsumed","coalUnit","LineArea","Area","Line","defaultLineAreaProps","dot","activeDot","lineAreaProps","stackId","strokeWidth","some","warn","chartMax","ticks","getNiceTickValues","pop","domain","ResponsiveContainer","ComposedChart","stroke","fill","CartesianGrid","opacity","XAxis","interval","YAxis","component_Tooltip","props2","components_CustomTooltip","Legend","iconType","EnergyMixChartBuilded","EnergyMixChartContainer","primaryMap","primaryReference","electrictyMap","electricityReference","SummaryTab","containers_EnergyMixChartContainer","marginTop","ProdConsoChart","fuel","consoStatistic","conso","prodStatistic","prod","dataWithImportAndExport","l","diff","toFixed","export","import","strokeOpacity","GDPByEnergyChart","ScatterChart","bottom","Scatter","cx","cy","r","line","dataMin","floor","dataMax","ceil","position","padding","top","0","1","BasicChart","LineChart","ProdConsoChartContainer","prodStatisticCode","consoStatisticCode","GDPByEnergyChartContainer","IndependencyTab","fuelProducedOrConsumed","sm","BasicChartContainer","ClimateTab","tabList","tab","IndependencyTabContainer","tabContent","summary","components_SummaryTab","independency","climate","components_ClimateTab","CountryView","currentTab","tabKey","Redirect","to","flag","flagIcon","xs","card","Link","lg","maxHeight","src","toLowerCase","alt","components_GeoJSONMap","activeTabKey","onTabChange","setTab","match","params","AboutView","AreaView_IndependencyTabContainer","AreaView","GitHubLink","HeaderMenu","goTo","menu","mode","selectable","lineHeight","Item","onSelect","SubMenu","components_GitHubLink","CountriesLoader","prop","AreasLoader","_getAreas","getAllAreas","ConnectedHeaderMenu","withRouter","AppLayout_StatisticsLoader","layout","Header","Content","Switch","Route","path","exact","component","pathname","Footer","App","es","HashRouter","components_AppLayout","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.753dd5b4.chunk.js","sourcesContent":["import { feature } from 'topojson-client';\n\nfunction countryMapValues(country, worldTopo) {\n  const a = worldTopo.objects.countries.geometries.find(\n    c => c.id === country.numericCode,\n  );\n  return {\n    ...country,\n    geojson: a && feature(worldTopo, a),\n  };\n}\n\nasync function getAllCountries() {\n  const [countries, worldTopo] = await Promise.all(\n    [fetch('/data/countries.json'), fetch('/data/worldTopo.json')].map(p =>\n      p.then(res => res.json()),\n    ),\n  );\n  return countries.map(country => countryMapValues(country, worldTopo));\n}\n\nexport default getAllCountries;\n","import { values, indexBy, prop, mapObjIndexed } from 'ramda';\n\nimport getAllCountries from '../api/countries';\n\nexport const COUNTRIES_LOAD_ACTION = 'COUNTRIES_LOAD_ACTION';\nexport const COUNTRIES_RECEIVE_ACTION = 'COUNTRIES_RECEIVE_ACTION';\n\nconst defaultIndicators = {\n  // for areas\n  coal: true,\n  oil: true,\n  gas: true,\n  hydro: true,\n  nuclear: true,\n  biofuelsWaste: true,\n  solarWindTideGeoth: true,\n};\n\nfunction loadCountriesAction() {\n  return { type: COUNTRIES_LOAD_ACTION };\n}\n\nfunction receiveCountriesAction({ data, errors }) {\n  return { type: COUNTRIES_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllCountries() {\n  return function dispatchLoadAllCountries(dispatch) {\n    dispatch(loadCountriesAction());\n    return getAllCountries()\n      .then(data =>\n        dispatch(\n          receiveCountriesAction({\n            data: indexBy(prop('alpha2Code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveCountriesAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction countriesReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case COUNTRIES_LOAD_ACTION:\n      return { ...state, loading: true };\n    case COUNTRIES_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function countriesLoadedSelector(state) {\n  return state.countries.loaded;\n}\n\nexport function countriesSelector(state) {\n  return values(state.countries.data).filter(c => c.isIndependent);\n}\n\nexport function dependentCountriesSelector(state) {\n  return values(state.countries.data).filter(c => !c.isIndependent);\n}\n\nexport function countrySelector(countryCode, state) {\n  return state.countries.data[countryCode];\n}\n\nexport function fuelConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasConsumed : defaultIndicators;\n}\n\nexport function fuelProducedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country ? country.hasProduced : defaultIndicators;\n}\n\nexport function fuelProducedOrConsumedCountrySelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  return country\n    ? mapObjIndexed((v, k) => v || country.hasConsumed[k], country.hasProduced)\n    : defaultIndicators;\n}\n\nexport default countriesReducer;\n","import L from 'leaflet';\nimport { map, uniq, values, mergeAll } from 'ramda';\nimport domToImage from 'dom-to-image';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function coordsToLatLng(coords) {\n  const [longitude, latitude] = coords;\n\n  if (longitude < -168.51) {\n    return L.latLng(latitude, 360 + longitude);\n  }\n  return L.latLng(latitude, longitude).wrap();\n}\n\nexport function isMobileOrTablet() {\n  let check = false;\n  (function test(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    ) {\n      check = true;\n    }\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nexport function formatNumber(value) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return 'NA';\n  }\n\n  return Number(Number(value).toPrecision(3)).toLocaleString();\n}\n\nexport function tickFormatter(value) {\n  return value.toLocaleString();\n}\n\nexport function displayUnit(unit, perCapita) {\n  return perCapita ? `${unit.base}/capita` : unit.main;\n}\n\nexport function parseMapOfStatistics(mapOfCountryStatistics, defaultCountry) {\n  return map(\n    statistics =>\n      typeof statistics === 'string'\n        ? { statisticCode: statistics, countryCode: defaultCountry }\n        : statistics,\n    mapOfCountryStatistics,\n  );\n}\n\nexport function addPopCountryStatistics(mapOfCountryStatistics, perCapita) {\n  if (!perCapita) {\n    return mapOfCountryStatistics;\n  }\n\n  const countryCodes = uniq(\n    values(mapOfCountryStatistics).map(d => d.countryCode),\n  );\n  const populations = mergeAll(\n    countryCodes.map(countryCode => ({\n      [`pop/${countryCode}`]: { statisticCode: 'POPULATION', countryCode },\n    })),\n  );\n  return {\n    ...populations,\n    ...mapOfCountryStatistics,\n  };\n}\n\nexport function chartToPngBlob(domElement, scale) {\n  return domToImage.toBlob(domElement, {\n    filter: element => element.className !== 'ChartWrapper__header__right',\n    bgcolor: 'white',\n    style: {\n      transform: `scale(${scale}) translate(${domElement.offsetWidth /\n        2 /\n        scale}px, ${domElement.offsetHeight / 2 / scale}px)`,\n    },\n    height: domElement.offsetHeight * scale,\n    width: domElement.offsetWidth * scale,\n  });\n}\n\nexport function memoize(\n  fn,\n  hashFunction = args => JSON.stringify(args),\n  cacheSize = 30,\n) {\n  const cache = {};\n  return function memoizedFun(...args) {\n    const hash = hashFunction(args);\n    if (cache[hash]) {\n      return cache[hash];\n    }\n    const res = fn(...args);\n\n    cache[hash] = res;\n\n    const hashes = Object.keys(cache);\n    if (hashes.length > cacheSize) {\n      delete cache[hashes[0]];\n    }\n\n    return res;\n  };\n}\n","import { values, mapObjIndexed, mergeAll, groupBy, map, omit } from 'ramda';\nimport { countriesSelector } from '../countries';\nimport {\n  parseMapOfStatistics,\n  addPopCountryStatistics,\n  memoize,\n} from '../../utils';\n\nexport function statisticsLoadedSelector(state) {\n  return state.statistics.loaded;\n}\n\nexport function allStatisticsSelector(state) {\n  return values(state.statistics.data);\n}\n\nexport function statisticSelector(statisticCode, state) {\n  return state.statistics.data[statisticCode];\n}\n\nexport function countryStatisticSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  return statistic && statistic.values[countryCode];\n}\n\nexport function countryStatisticLoadedSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n  if (statistic.compute) {\n    return values(statistic.source).every(sourceCode =>\n      countryStatisticLoadedSelector(\n        { statisticCode: sourceCode, countryCode },\n        state,\n      ),\n    );\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.loaded : false;\n}\n\nfunction computeDerivedValueFromCompiled(statistic) {\n  return function compute({ year, ...sources }) {\n    const value = statistic.compute(sources);\n    return Number.isNaN(value) || !Number.isFinite(value)\n      ? { year, value: null }\n      : { year, value };\n  };\n}\n\nexport function countryStatisticValuesSelector(\n  { statisticCode, countryCode },\n  state,\n) {\n  const statistic = statisticSelector(statisticCode, state);\n\n  if (statistic.compute) {\n    // eslint-disable-next-line no-use-before-define\n    return compiledCountryStatisticsSelector(\n      {\n        mapOfCountryStatistics: statistic.source,\n        countryCode,\n      },\n      state,\n    ).map(computeDerivedValueFromCompiled(statistic));\n  }\n\n  const countryStatistic = countryStatisticSelector(\n    {\n      statisticCode,\n      countryCode,\n    },\n    state,\n  );\n  return countryStatistic ? countryStatistic.values : [];\n}\n\nexport function countryStatisticsLoadedSelector(countryStatitics, state) {\n  return countryStatitics.every(countryStatistic =>\n    countryStatisticLoadedSelector(countryStatistic, state),\n  );\n}\n\nexport function statisticOfAllCountriesLoadedSelector(statisticCode, state) {\n  const countryCodes = countriesSelector(state).map(\n    country => country.alpha2Code,\n  );\n  return countryCodes.every(countryCode =>\n    countryStatisticLoadedSelector({ statisticCode, countryCode }, state),\n  );\n}\n\nfunction computeYearInterval(mapOfStatisticValues) {\n  const arrayOfStatisticValues = values(mapOfStatisticValues);\n  const startingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.min(...statisticValues.map(v => v.year)),\n  );\n  const endingYears = arrayOfStatisticValues.map(statisticValues =>\n    Math.max(...statisticValues.map(v => v.year)),\n  );\n  const startingYear = Math.max(...startingYears);\n  const endingYear = Math.min(...endingYears);\n  return [startingYear, endingYear];\n}\n\nfunction computeValue(value, population, perCapita, factor, populationFactor) {\n  if (value === null || (perCapita && !population)) {\n    return null;\n  }\n\n  return perCapita ? (value * factor) / (populationFactor * population) : value;\n}\n\nfunction compiledCountryStatisticsSelectorFn(\n  { mapOfCountryStatistics: baseMap, countryCode, perCapita },\n  state,\n) {\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    baseMap,\n    countryCode,\n  );\n  const mapOfCountryStatistics = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const mapOfStatistic = map(\n    ({ statisticCode }) => statisticSelector(statisticCode, state),\n    mapOfCountryStatistics,\n  );\n  const mapOfStatisticValues = map(\n    countryStatistic => countryStatisticValuesSelector(countryStatistic, state),\n    mapOfCountryStatistics,\n  );\n  const [startingYear, endingYear] = computeYearInterval(mapOfStatisticValues);\n\n  const mapOfNamedStatisticValues = mapObjIndexed(\n    (statisticValues, compileName) =>\n      statisticValues.map(({ year, value }) => ({\n        year,\n        [compileName]: value,\n      })),\n    mapOfStatisticValues,\n  );\n  const allValues = [].concat(...values(mapOfNamedStatisticValues));\n  const allValuesByYear = groupBy(value => value.year, allValues);\n\n  const compiledStatistics = Object.keys(allValuesByYear)\n    .map(year => Number(year))\n    .filter(year => startingYear <= year && year <= endingYear)\n    .sort()\n    .map(year => mergeAll(allValuesByYear[year]))\n    .map(compiledValue => ({\n      ...compiledValue,\n      ...mapObjIndexed((value, compileName) => {\n        const popCompileName = `pop/${\n          mapOfCountryStatistics[compileName].countryCode\n        }`;\n        return computeValue(\n          value,\n          compiledValue[popCompileName],\n          perCapita,\n          mapOfStatistic[compileName].unit.factor,\n          mapOfStatistic[popCompileName]\n            ? mapOfStatistic[popCompileName].unit.factor\n            : null,\n        );\n      }, omit(['year'], compiledValue)),\n    }));\n\n  return compiledStatistics;\n}\nexport const compiledCountryStatisticsSelector = memoize(\n  compiledCountryStatisticsSelectorFn,\n  args => JSON.stringify(args[0]),\n);\n\nexport function compiledStatisticForCountriesAndYear(\n  { statisticCode, year, perCapita },\n  state,\n) {\n  const countryCodes = countriesSelector(state).map(c => c.alpha2Code);\n  const mapOfCountryStatistics = {\n    value: statisticCode,\n  };\n  countryCodes.push('WORLD');\n\n  const countryValues = countryCodes.map(countryCode => {\n    const countryStatisticValues = compiledCountryStatisticsSelector(\n      { mapOfCountryStatistics, countryCode, perCapita },\n      state,\n    );\n    const yearValue = countryStatisticValues.find(v => v.year === year);\n\n    return {\n      countryCode,\n      value: yearValue ? yearValue.value : null,\n    };\n  });\n  return countryValues;\n}\n\nexport function statisticSourcesSelector(statisticCodes, state) {\n  return statisticCodes.reduce((statisticSources, statisticCode) => {\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sources = values(statistic.source).map(code =>\n        statisticSelector(code, state),\n      );\n      return statisticSources.concat(sources);\n    }\n\n    return statisticSources.concat([statistic]);\n  }, []);\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport function fetchJSON(url, options) {\n  return fetch(url, options).then(res => res.json());\n}\n","const PERCENTAGE_UNIT = {\n  main: '%',\n  base: '%',\n  factor: 1,\n};\n\nconst MTOE_UNIT = {\n  main: 'Mtoe',\n  base: 'toe',\n  factor: 10 ** 6,\n};\n\nconst TWH_UNIT = {\n  main: 'TWh',\n  base: 'kWh',\n  factor: 10 ** 9,\n};\n\nconst ENERGY_INTENSITY_UNIT = {\n  main: 'toe/million 2010 $',\n  base: 'toe/million 2010 $',\n  factor: 1,\n};\n\nconst CO2_INTENSITY_OF_ENERGY_UNIT = {\n  main: 'tCO2/toe',\n  base: 'tCO2/toe',\n  factor: 1,\n};\n\n// TODO factorize with dataSources\nconst MTOE_TO_TWH = 11.63;\nconst POWER_PLANT_EFFICIENCIES = {\n  NUCLEAR: 0.33,\n  HYDRO: 1, // definition of statistics\n};\n\nconst derivedStatistics = [\n  {\n    code: 'ENERGY_SELF_SUFFICIENCY',\n    name: 'Energy Self-sufficiency',\n    description:\n      'This indicator made up by dividing primary energy consumption by primary energy production, gives an indication on the level of self-sufficiency (or dependency) of a country.',\n    unit: PERCENTAGE_UNIT,\n    source: {\n      consumption: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      production: 'PRIMARY_ENERGY_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Others',\n    isIntensive: true,\n    compute({ consumption, production }) {\n      return (production / consumption) * 100;\n    },\n  },\n  {\n    code: 'ENERGY_INTENSITY',\n    name: 'Energy Intensity',\n    description: '',\n    unit: ENERGY_INTENSITY_UNIT,\n    source: {\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      gdp: 'GDP_2010_USD',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, gdp }) {\n      return (energy / gdp) * 10 ** 3;\n    },\n  },\n  {\n    code: 'CO2_INTENSITY_OF_ENERGY',\n    name: 'CO2 Intensity of energy',\n    description:\n      'Measures the mass of CO2 by unit of energy that is emitted by the country.',\n    unit: CO2_INTENSITY_OF_ENERGY_UNIT,\n    source: {\n      co2: 'FOSSIL_CO2_EMISSIONS_MT',\n      energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA, World Bank',\n    category: 'Climate change',\n    isIntensive: true,\n    compute({ energy, co2 }) {\n      return co2 / energy;\n    },\n  },\n  {\n    code: 'RENEWABLES_PRODUCTION_MTOE',\n    name: 'Renewables production',\n    description: 'Includes hydroelectricity, solar, wind and tide productions.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide }) {\n      return hydro + geothSolarWindTide;\n    },\n  },\n  {\n    code: 'LOW_CARBON_ENERGY_PRODUCTION_MTOE',\n    name: 'Low-carbon energy production',\n    description:\n      'Includes renewables and nuclear productions. Excludes biofuels at the moment.',\n    unit: MTOE_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n      geothSolarWindTide: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Productions',\n    compute({ hydro, geothSolarWindTide, nuclear }) {\n      return hydro + geothSolarWindTide + nuclear;\n    },\n  },\n  {\n    code: 'NUCLEAR_GENERATION_TWH',\n    name: 'Electricity generation from nuclear',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ nuclear }) {\n      return nuclear * POWER_PLANT_EFFICIENCIES.NUCLEAR * MTOE_TO_TWH;\n    },\n  },\n  {\n    code: 'HYDRO_GENERATION_TWH',\n    name: 'Electricity generation from hydro',\n    description: '',\n    unit: TWH_UNIT,\n    source: {\n      hydro: 'HYDRO_PRODUCTION_MTOE',\n    },\n    startingYear: 1973,\n    endingYear: 2016,\n    sourceAttribution: 'IEA',\n    category: 'Electricity',\n    compute({ hydro }) {\n      return hydro * POWER_PLANT_EFFICIENCIES.HYDRO * MTOE_TO_TWH;\n    },\n  },\n];\n\nexport default derivedStatistics;\n","import { values, indexBy, prop } from 'ramda';\n\nimport {\n  getAllStatistics,\n  getStatisticOfAllCountries,\n  getStatisticOfCountry,\n} from '../../api/statistics';\nimport { countriesSelector } from '../countries';\n\nimport { statisticSelector, countryStatisticLoadedSelector } from './selectors';\n\nexport const STATISTICS_LOAD_ACTION = 'STATISTICS_LOAD_ACTION';\nexport const STATISTICS_RECEIVE_ACTION = 'STATISTICS_RECEIVE_ACTION';\nexport const COUNTRY_STATISTIC_LOAD_ACTION = 'COUNTRY_STATISTIC_LOAD_ACTION';\nexport const COUNTRY_STATISTIC_RECEIVE_ACTION =\n  'COUNTRY_STATISTIC_RECEIVE_ACTION';\nexport const STATISTIC_LOAD_ALL_COUNTRIES_ACTION =\n  'STATISTIC_LOAD_ALL_COUNTRIES_ACTION';\nexport const STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION =\n  'STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION';\n\nfunction loadStatisticsAction() {\n  return { type: STATISTICS_LOAD_ACTION };\n}\n\nfunction receiveStatisticsAction({ data, errors }) {\n  return { type: STATISTICS_RECEIVE_ACTION, data, errors };\n}\n\nfunction loadCountryStatisticAction(statisticCode, countryCode) {\n  return { type: COUNTRY_STATISTIC_LOAD_ACTION, statisticCode, countryCode };\n}\n\nfunction receiveCountryStatisticAction({\n  countryCode,\n  statisticCode,\n  data,\n  errors,\n}) {\n  return {\n    type: COUNTRY_STATISTIC_RECEIVE_ACTION,\n    countryCode,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nfunction loadStatisticOfCountriesAction(statisticCode, countries) {\n  return {\n    type: STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n    statisticCode,\n    countries,\n  };\n}\n\nfunction receiveStatisticOfCountriesAction({\n  statisticCode,\n  countries,\n  data,\n  errors,\n}) {\n  return {\n    type: STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n    countries,\n    statisticCode,\n    data,\n    errors,\n  };\n}\n\nexport function loadAllStatistics() {\n  return function dispatchLoadStatistics(dispatch) {\n    dispatch(loadStatisticsAction());\n\n    return getAllStatistics()\n      .then(data => {\n        const statistics = data.map(statistic => ({\n          ...statistic,\n          values: {},\n        }));\n        dispatch(\n          receiveStatisticsAction({\n            data: indexBy(prop('code'), statistics),\n          }),\n        );\n      })\n      .catch(errors => dispatch(receiveStatisticsAction({ errors })));\n  };\n}\n\nexport function loadCountryStatistic({ statisticCode, countryCode }) {\n  return function dispatchLoadCountryStatistic(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      const sourceCodes = values(statistic.source);\n      const countryStatistics = sourceCodes.map(sourceCode => ({\n        statisticCode: sourceCode,\n        countryCode,\n      }));\n      dispatch(\n        // eslint-disable-next-line no-use-before-define\n        loadCountryStatistics(countryStatistics),\n      );\n      return;\n    }\n\n    if (countryStatisticLoadedSelector({ statisticCode, countryCode }, state)) {\n      return;\n    }\n\n    dispatch(loadCountryStatisticAction(statisticCode, countryCode));\n\n    getStatisticOfCountry(statisticCode, countryCode)\n      .then(res => {\n        const data = res.map(statisticValue => ({\n          year: statisticValue.year,\n          value: statisticValue.value,\n        }));\n\n        dispatch(\n          receiveCountryStatisticAction({ countryCode, statisticCode, data }),\n        );\n      })\n      .catch(errors =>\n        dispatch(\n          receiveCountryStatisticAction({ statisticCode, countryCode, errors }),\n        ),\n      );\n  };\n}\n\n// TODO\nexport function loadCountryStatistics(countryStatistics) {\n  return function dispatchloadCountryStatistics(dispatch) {\n    return Promise.all(\n      countryStatistics.map(countryStatistic =>\n        dispatch(loadCountryStatistic(countryStatistic)),\n      ),\n    );\n  };\n}\n\nexport function loadStatisticOfCountries(statisticCode) {\n  return function dispatchLoadStatisticOfCountries(dispatch, getState) {\n    const state = getState();\n    const statistic = statisticSelector(statisticCode, state);\n\n    if (statistic.compute) {\n      values(statistic.source).forEach(sourceCode =>\n        dispatch(loadStatisticOfCountries(sourceCode)),\n      );\n    }\n\n    const countries = countriesSelector(state);\n    const isLoaded = countries.every(country =>\n      countryStatisticLoadedSelector(\n        { statisticCode, countryCode: country.alpha2Code },\n        state,\n      ),\n    );\n\n    if (isLoaded) {\n      return;\n    }\n\n    dispatch(loadStatisticOfCountriesAction(statisticCode, countries));\n    getStatisticOfAllCountries(statisticCode)\n      .then(data =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            data,\n          }),\n        ),\n      )\n      .catch(errors =>\n        dispatch(\n          receiveStatisticOfCountriesAction({\n            statisticCode,\n            countries,\n            errors,\n          }),\n        ),\n      );\n  };\n}\n","import { fetchJSON } from './helpers';\nimport derivedStatistics from './derivedStatistics';\n\nexport function getAllStatistics() {\n  return fetchJSON('/data/statistics.json').then(statistics =>\n    statistics.concat(derivedStatistics),\n  );\n}\n\nexport function getStatisticOfCountry(statisticCode, countryCode) {\n  return fetchJSON(`/data/${statisticCode}/${countryCode}.json`);\n}\n\nexport function getStatisticOfAllCountries(statisticCode) {\n  return fetchJSON(`/data/${statisticCode}/all.json`);\n}\n","import { omit } from 'ramda';\nimport {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  COUNTRY_STATISTIC_LOAD_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n  STATISTICS_LOAD_ACTION,\n  STATISTICS_RECEIVE_ACTION,\n  STATISTIC_LOAD_ALL_COUNTRIES_ACTION,\n} from './actions';\n\nconst initialCountryStatistic = {\n  loading: true,\n  loaded: false,\n  errors: null,\n  values: [],\n};\nfunction countryStatisticReducer(\n  countryStatistic = initialCountryStatistic,\n  action,\n  countryCode,\n) {\n  switch (action.type) {\n    case COUNTRY_STATISTIC_RECEIVE_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values: action.data || [],\n      };\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION:\n      return {\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        values:\n          (action.data &&\n            action.data\n              .filter(d => d.countryCode === countryCode)\n              .map(omit(['countryCode']))) ||\n          [],\n      };\n    default:\n      return countryStatistic;\n  }\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\nfunction statisticsReducer(state = initialState, action) {\n  switch (action.type) {\n    case STATISTICS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case STATISTICS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    case COUNTRY_STATISTIC_LOAD_ACTION:\n    case COUNTRY_STATISTIC_RECEIVE_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      const countryStatistic = statistic.values[action.countryCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              [action.countryCode]: countryStatisticReducer(\n                countryStatistic,\n                action,\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_LOAD_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    undefined,\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n            },\n          },\n        },\n      };\n    }\n    case STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION: {\n      const statistic = state.data[action.statisticCode];\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.statisticCode]: {\n            ...statistic,\n            values: {\n              ...statistic.values,\n              ...action.countries.reduce(\n                (acc, country) => ({\n                  ...acc,\n                  [country.alpha2Code]: countryStatisticReducer(\n                    statistic.values[country.alpha2Code],\n                    action,\n                    country.alpha2Code,\n                  ),\n                }),\n                {},\n              ),\n              WORLD: countryStatisticReducer(\n                statistic.values.WORLD,\n                action,\n                'WORLD',\n              ),\n            },\n          },\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default statisticsReducer;\n","import worldTopo from 'world-atlas/world/110m.json';\nimport countriesData from 'world-countries/countries';\nimport { merge } from 'topojson-client';\nimport { indexBy } from 'ramda';\n\nconst indexedCountries = indexBy(c => c.cca2, countriesData);\n\nfunction computeGeojson(area) {\n  const countryAlpha3Codes = area.countryCodes.map(\n    countryCode => indexedCountries[countryCode].ccn3,\n  );\n  const geometries = worldTopo.objects.countries.geometries.filter(c =>\n    countryAlpha3Codes.includes(c.id),\n  );\n  return merge(worldTopo, geometries);\n}\n\nexport default async function getAreas() {\n  const res = await fetch('/data/areas.json');\n  const data = await res.json();\n\n  return data.map(area => ({\n    ...area,\n    geojson: area.countryCodes ? computeGeojson(area) : null,\n  }));\n}\n","import { values, indexBy, prop } from 'ramda';\n\nimport getAllAreas from '../api/areas';\n\nexport const AREAS_LOAD_ACTION = 'AREAS_LOAD_ACTION';\nexport const AREAS_RECEIVE_ACTION = 'AREAS_RECEIVE_ACTION';\n\nfunction loadAreasAction() {\n  return { type: AREAS_LOAD_ACTION };\n}\n\nfunction receiveAreasAction({ data, errors }) {\n  return { type: AREAS_RECEIVE_ACTION, data, errors };\n}\n\nexport function loadAllAreas() {\n  return function dispatchLoadAllAreas(dispatch) {\n    dispatch(loadAreasAction());\n    return getAllAreas()\n      .then(data =>\n        dispatch(\n          receiveAreasAction({\n            data: indexBy(prop('code'), data),\n          }),\n        ),\n      )\n      .catch(errors => dispatch(receiveAreasAction({ errors })));\n  };\n}\n\nconst initialState = {\n  loading: false,\n  loaded: false,\n  errors: null,\n  data: {},\n};\n\nfunction areasReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case AREAS_LOAD_ACTION:\n      return { ...state, loading: true };\n    case AREAS_RECEIVE_ACTION:\n      return {\n        ...state,\n        loading: false,\n        loaded: !action.errors,\n        errors: action.errors || null,\n        data: action.data || {},\n      };\n    default:\n      return state;\n  }\n}\n\nexport function areasLoadedSelector(state) {\n  return state.areas.loaded;\n}\n\nexport function areasSelector(state) {\n  return values(state.areas.data);\n}\n\nexport function areaSelector(areaCode, state) {\n  return state.areas.data[areaCode];\n}\n\nexport function areasOfCountrySelector(countryCode, state) {\n  return values(state.areas.data).filter(\n    area => area.countryCodes && area.countryCodes.includes(countryCode),\n  );\n}\n\nexport default areasReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from './countries';\nimport statisticsReducer, {\n  COUNTRY_STATISTIC_RECEIVE_ACTION,\n  STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION,\n} from './statistics';\nimport areasReducer from './areas';\n\nfunction actionSanitizer(action) {\n  if (\n    (action.type === COUNTRY_STATISTIC_RECEIVE_ACTION ||\n      action.type === STATISTIC_RECEIVE_ALL_COUNTRIES_ACTION) &&\n    action.data\n  ) {\n    return { ...action, data: 'DATA' };\n  }\n  return action;\n}\n\nconst rootReducer = combineReducers({\n  // ...reducers,\n  countries: countriesReducer,\n  statistics: statisticsReducer,\n  areas: areasReducer,\n});\n\nconst enhancers = [applyMiddleware(thunk)];\nconst composeEnhancers = composeWithDevTools({\n  actionSanitizer,\n});\nconst enhancer = composeEnhancers(...enhancers);\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const CountryType = PropTypes.shape({\n  alpha2Code: PropTypes.string.isRequired,\n  alpha3Code: PropTypes.string.isRequired,\n  commonName: PropTypes.string.isRequired,\n  capital: PropTypes.string.isRequired,\n  area: PropTypes.number.isRequired,\n  latlng: PropTypes.arrayOf(PropTypes.number).isRequired,\n  geojson: PropTypes.object,\n});\n\nexport const StatisticType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  unit: PropTypes.shape({\n    main: PropTypes.string.isRequired,\n    base: PropTypes.string.isRequired,\n  }),\n  perCapita: PropTypes.bool,\n  startingYear: PropTypes.number.isRequired,\n  endingYear: PropTypes.number.isRequired,\n  category: PropTypes.string.isRequired,\n  sourceAttribution: PropTypes.string,\n  sourceUrl: PropTypes.string,\n  sourceDescriptionUrl: PropTypes.string,\n});\n\nexport const StatisticValues = PropTypes.arrayOf(\n  PropTypes.shape({\n    year: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  }),\n);\n\nexport const AreaType = PropTypes.shape({\n  code: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  countries: PropTypes.arrayOf(CountryType),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { indexBy, map } from 'ramda';\nimport { interpolateRgb } from 'd3-interpolate';\n\nimport { Map, Tooltip, GeoJSON } from 'react-leaflet';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport {\n  coordsToLatLng,\n  isMobileOrTablet,\n  formatNumber,\n  displayUnit,\n} from '../../../utils';\n\nconst MAP_HEIGHT = '540px';\nconst MIN_COLOR = 'rgb(107, 185, 240)';\nconst MAX_COLOR = '#001529';\nconst NA_COLOR = '#777';\nconst colorGradient = `linear-gradient(to right, ${MIN_COLOR}, ${MAX_COLOR})`;\nconst gradiant = interpolateRgb(MIN_COLOR, MAX_COLOR);\nconst func = i => Math.log(i);\n\nfunction computeColorMap(data) {\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.filter(d => d.value).map(d => d.value));\n  const valueMap = map(d => d.value, indexBy(d => d.countryCode, data));\n\n  const colorMap = map(value => {\n    if (value === null || value === undefined) {\n      return { color: NA_COLOR, value };\n    }\n    if (value === 0) {\n      return { color: MIN_COLOR, value };\n    }\n    return {\n      color: gradiant(func(value / minValue) / func(maxValue / minValue)),\n      value,\n    };\n  }, valueMap);\n  return colorMap;\n}\n\nfunction WorldMap(props) {\n  const {\n    countries,\n    dependentCountries,\n    data,\n    currentStatistic,\n    currentYear,\n    perCapita,\n  } = props;\n  const maxValue = Math.max(\n    ...data.filter(d => d.countryCode !== 'WORLD').map(d => d.value),\n  );\n  const colorValueMap = computeColorMap(data);\n  return (\n    <div className=\"WorldMap\">\n      <div className=\"WorldMap__yearLabel\">{currentYear}</div>\n      <Map\n        zoom={1}\n        center={[0, 0]}\n        style={{ height: MAP_HEIGHT, zIndex: 0 }}\n        maxBounds={[[90, -180], [-90, 180]]}\n        dragging={!isMobileOrTablet()}\n      >\n        {countries.map(country => {\n          const { value, color } = colorValueMap[country.alpha2Code];\n          return (\n            <GeoJSON\n              key={country.alpha2Code + currentStatistic.code}\n              data={country.geojson}\n              coordsToLatLng={coordsToLatLng}\n              ref={ref =>\n                ref &&\n                ref.leafletElement.setStyle({\n                  color: 'white',\n                  weight: 0.5,\n                  fillColor: color,\n                  fillOpacity: 1,\n                })\n              }\n            >\n              <Tooltip sticky>\n                {`${country.commonName}: ${formatNumber(value)}`}\n              </Tooltip>\n            </GeoJSON>\n          );\n        })}\n        {dependentCountries.map(country => (\n          <GeoJSON\n            key={country.alpha2Code}\n            data={country.geojson}\n            style={{\n              fillOpacity: 1,\n              color: 'white',\n              weight: 0.5,\n              fillColor: NA_COLOR,\n            }}\n          />\n        ))}\n      </Map>\n      <div className=\"WorldMap__legend\">\n        <div>\n          <div>\n            {`${currentStatistic.name} (${displayUnit(\n              currentStatistic.unit,\n              perCapita,\n            )})`}\n          </div>\n          <div className=\"WorldMap__legend__colors\">\n            <div>\n              <div\n                className=\"WorldMap__legend__gradient\"\n                style={{\n                  background: colorGradient,\n                }}\n              />\n              <div className=\"WorldMap__legend__gradientRange\">\n                <div>0</div>\n                <div>{formatNumber(maxValue)}</div>\n              </div>\n            </div>\n            <div>\n              <div\n                className=\"WorldMap__legend__NA__square\"\n                style={{ backgroundColor: NA_COLOR }}\n              />\n              <div>NA</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWorldMap.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  dependentCountries: PropTypes.arrayOf(CountryType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Popover, Button } from 'antd';\n\nimport { StatisticType } from '../utils/types';\n\nfunction StatisticDetails(props) {\n  const { statisticSources, description } = props;\n  const descriptionLines = description && description.split('\\n');\n\n  return (\n    <div className=\"StatisticDetails\">\n      <Popover\n        title=\"Details\"\n        arrowPointAtCenter\n        overlayStyle={{ maxWidth: '300px' }}\n        content={\n          // eslint-disable-next-line react/jsx-wrap-multilines\n          <div>\n            {description && (\n              <div>\n                <strong>Description : </strong>\n                {`${descriptionLines[0]}`}\n              </div>\n            )}\n            <div>\n              <strong>\n                {`Source${statisticSources.length > 1 ? 's' : ''}`}\n              </strong>\n              <ul className=\"StatisticDetails__sources\">\n                {statisticSources.map(stat => (\n                  <li key={stat.code}>\n                    <a\n                      href={stat.sourceUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {`${stat.name} (${stat.sourceAttribution})`}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        }\n        placement=\"bottomRight\"\n      >\n        <Button\n          size=\"small\"\n          icon=\"info-circle\"\n          style={{ marginRight: '5px' }}\n        />\n      </Popover>\n    </div>\n  );\n}\n\nStatisticDetails.propTypes = {\n  description: PropTypes.string,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n};\n\nStatisticDetails.defaultProps = {\n  description: null,\n};\n\nexport default StatisticDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Select, Slider, Radio } from 'antd';\nimport debounce from 'lodash.debounce';\n\nimport { sortBy, groupBy } from 'ramda';\n\nimport StatisticDetails from '../../../components/StatisticDetails';\n\nimport { CountryType, StatisticType } from '../../../utils/types';\nimport { isMobileOrTablet, formatNumber, displayUnit } from '../../../utils';\n\nfunction StatisticExplorer(props) {\n  const {\n    data,\n    countries,\n    statistics,\n    currentStatistic,\n    statisticSources,\n    currentYear,\n    perCapita,\n    onRowClick,\n    setStatistic,\n    setYear,\n    setPerCapita,\n    isLoaded,\n  } = props;\n\n  const formatedData = data\n    .filter(s => s.value !== null)\n    .map(s => ({\n      countryCode: s.countryCode,\n      country:\n        s.countryCode === 'WORLD'\n          ? 'World'\n          : countries.find(c => c.alpha2Code === s.countryCode).commonName,\n      value: s.value,\n    }));\n\n  const statisticByCategory = groupBy(s => s.category, statistics);\n\n  return (\n    <div className=\"StatisticExplorer\">\n      <Select\n        style={{ width: '100%' }}\n        placeholder=\"Statistics\"\n        optionFilterProp=\"title\"\n        value={currentStatistic.code}\n        showSearch={!isMobileOrTablet()}\n        onChange={value => setStatistic(value)}\n      >\n        {Object.keys(statisticByCategory).map(category => {\n          const stats = statisticByCategory[category];\n          return (\n            <Select.OptGroup key={category} label={category}>\n              {sortBy(s => s.name, stats).map(statistic => (\n                <Select.Option key={statistic.code} title={statistic.name}>\n                  {`${statistic.name}`}\n                </Select.Option>\n              ))}\n            </Select.OptGroup>\n          );\n        })}\n      </Select>\n      <Slider\n        className=\"hideOnMobile\"\n        defaultValue={currentYear}\n        min={currentStatistic.startingYear}\n        max={currentStatistic.endingYear}\n        onAfterChange={year => setYear(year)}\n        onChange={debounce(setYear, 300)}\n        included={false}\n        marks={{\n          [currentStatistic.startingYear]: {\n            style: {},\n            label: `${currentStatistic.startingYear}`,\n          },\n          [currentStatistic.endingYear]: {\n            style: {\n              width: 'auto',\n              margin: 'auto',\n              left: '',\n              right: '-15px',\n            }, // hack\n            label: `${currentStatistic.endingYear}`,\n          },\n        }}\n      />\n      <div className=\"StatisticExplorer__options\">\n        <Radio.Group\n          style={{ marginBottom: '10px' }}\n          buttonStyle=\"solid\"\n          size=\"small\"\n          value={perCapita}\n          onChange={e => setPerCapita(e.target.value)}\n        >\n          <Radio.Button value={false}>Absolute</Radio.Button>\n          <Radio.Button\n            value\n            disabled={\n              currentStatistic.code === 'POPULATION' ||\n              currentStatistic.isIntensive\n            }\n          >\n            Per capita\n          </Radio.Button>\n        </Radio.Group>\n        <StatisticDetails\n          statisticSources={statisticSources}\n          description={currentStatistic.description}\n        />\n      </div>\n      <Table\n        className=\"hideOnMobile\"\n        rowKey=\"countryCode\"\n        size=\"small\"\n        pagination={false}\n        dataSource={formatedData}\n        loading={!isLoaded}\n        scroll={{ y: 380 }}\n        columns={[\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            sorter: (a, b) => a.country.localeCompare(b.country),\n            width: 'auto',\n            // TODO\n            render: text =>\n              text === 'World' ? (\n                <strong>World</strong>\n              ) : (\n              <a href=\"javascript:;\">{text}</a>), // eslint-disable-line\n          },\n          {\n            title: displayUnit(currentStatistic.unit, perCapita),\n            dataIndex: 'value',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.value - b.value,\n            render: formatNumber,\n            align: 'right',\n          },\n        ]}\n        onRow={record => ({\n          onClick: () => onRowClick(record),\n        })}\n      />\n    </div>\n  );\n}\n\nStatisticExplorer.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  statistics: PropTypes.arrayOf(StatisticType).isRequired,\n  currentStatistic: StatisticType.isRequired,\n  statisticSources: PropTypes.arrayOf(StatisticType).isRequired,\n  currentYear: PropTypes.number.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      countryCode: PropTypes.string.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n\n  onRowClick: PropTypes.func.isRequired,\n  setStatistic: PropTypes.func.isRequired,\n  setYear: PropTypes.func.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n};\n\nexport default StatisticExplorer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport WorldMap from './components/WorldMap';\nimport StatisticExplorer from './components/StatisticExplorer';\n\nimport {\n  countriesSelector,\n  dependentCountriesSelector,\n} from '../../store/countries';\nimport {\n  allStatisticsSelector,\n  statisticSelector,\n  compiledStatisticForCountriesAndYear,\n  loadStatisticOfCountries,\n  statisticOfAllCountriesLoadedSelector,\n  statisticSourcesSelector,\n} from '../../store/statistics';\n\nfunction f(statisticCode, perCapita) {\n  // TODO\n  return perCapita ? [statisticCode, 'POPULATION'] : [statisticCode];\n}\n\nconst ConnectedWorldMap = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    dependentCountries: dependentCountriesSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(WorldMap);\n\nconst ConnectedStatisticExplorer = connect(\n  (state, { statisticCode, currentYear, perCapita }) => ({\n    countries: countriesSelector(state),\n    statistics: allStatisticsSelector(state),\n    currentStatistic: statisticSelector(statisticCode, state),\n    statisticSources: statisticSourcesSelector(\n      f(statisticCode, perCapita),\n      state,\n    ),\n    isLoaded:\n      statisticOfAllCountriesLoadedSelector(statisticCode, state) &&\n      (!perCapita ||\n        statisticOfAllCountriesLoadedSelector('POPULATION', state)),\n    data: compiledStatisticForCountriesAndYear(\n      {\n        statisticCode,\n        year: currentYear,\n        perCapita,\n      },\n      state,\n    ),\n  }),\n)(StatisticExplorer);\n\nclass HomeView extends Component {\n  constructor() {\n    super();\n    this.state = {\n      statisticCode: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n      currentYear: 2010,\n      perCapita: false,\n    };\n  }\n\n  componentDidMount() {\n    const { statisticCode } = this.state;\n    const { loadStatistic } = this.props;\n\n    loadStatistic(statisticCode);\n  }\n\n  setStatistic(statisticCode) {\n    const { loadStatistic } = this.props;\n    loadStatistic(statisticCode);\n    const newState = {\n      statisticCode,\n      ...(statisticCode === 'POPULATION' ? { perCapita: false } : {}),\n    };\n    this.setState(newState);\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  setPerCapita(value) {\n    const { loadStatistic } = this.props;\n    if (value) {\n      loadStatistic('POPULATION');\n    }\n    this.setState({ perCapita: value });\n  }\n\n  render() {\n    const {\n      history: { push },\n    } = this.props;\n    const { currentYear, statisticCode, perCapita } = this.state;\n\n    return (\n      <div className=\"HomeView\">\n        <Row>\n          <h1>Welcome to the World Energy Data Explorer</h1>\n        </Row>\n        <Row gutter={{ md: 20 }}>\n          <Col md={16}>\n            <ConnectedWorldMap\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n            />\n          </Col>\n          <Col md={8}>\n            <ConnectedStatisticExplorer\n              statisticCode={statisticCode}\n              currentYear={currentYear}\n              perCapita={perCapita}\n              onRowClick={record => push(`country/${record.countryCode}`)}\n              setYear={year => this.setYear(year)}\n              setStatistic={value => this.setStatistic(value)}\n              setPerCapita={value => this.setPerCapita(value)}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nHomeView.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  loadStatistic: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  null,\n  { loadStatistic: loadStatisticOfCountries },\n)(HomeView);\n","import { countrySelector, countriesSelector } from './countries';\nimport { areaSelector, areasOfCountrySelector } from './areas';\n\nexport function countryWithAreasSelector(countryCode, state) {\n  const country = countrySelector(countryCode, state);\n  const areas = areasOfCountrySelector(countryCode, state);\n\n  return {\n    ...country,\n    areas,\n  };\n}\n\nexport function areaWithCountriesSelector(areaCode, state) {\n  const area = areaSelector(areaCode, state);\n  const countries = area.countryCodes\n    ? area.countryCodes\n        .map(countryCode => countrySelector(countryCode, state))\n        .filter(c => !!c)\n    : countriesSelector(state);\n  return {\n    ...area,\n    countries,\n  };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport L from 'leaflet';\n\nimport { coordsToLatLng } from '../utils';\n\nclass CustomGeoJSON extends Component {\n  componentDidMount() {\n    this.createGeoJSON();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data } = this.props;\n    if (prevProps.data !== data) {\n      this.geojson.remove();\n      this.createGeoJSON();\n    }\n  }\n\n  createGeoJSON() {\n    const {\n      leaflet: { map },\n      data,\n    } = this.props;\n\n    this.geojson = L.geoJSON(data, { coordsToLatLng }).addTo(map);\n    const bounds = this.geojson.getBounds();\n    map.flyToBounds(bounds);\n  }\n\n  render() {\n    return null;\n  }\n}\nCustomGeoJSON.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  leaflet: PropTypes.object.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  data: PropTypes.object.isRequired,\n};\nconst GeoJSON = withLeaflet(CustomGeoJSON);\n\nfunction GeoJSONMap(props) {\n  const { geojson, center } = props;\n\n  return (\n    <div className=\"GeoJSONMap\">\n      <Map center={center} zoom={2} style={{ height: '300px', zIndex: 0 }}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {geojson && <GeoJSON data={geojson} />}\n      </Map>\n    </div>\n  );\n}\n\nGeoJSONMap.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  geojson: PropTypes.object.isRequired,\n  center: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default GeoJSONMap;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { omit, equals } from 'ramda';\n\nclass Loader extends Component {\n  componentWillMount() {\n    const { load, ...otherProps } = this.props;\n\n    load(otherProps);\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevOtherProps = omit(['load'], prevProps);\n    const { load, ...otherProps } = this.props;\n\n    if (!equals(prevOtherProps, otherProps)) {\n      load(otherProps);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nLoader.propTypes = {\n  load: PropTypes.func.isRequired,\n};\n\nfunction buildLoader(loadFunction) {\n  return connect(\n    null,\n    { load: loadFunction },\n  )(Loader);\n}\n\nexport default buildLoader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { map, values, uniq } from 'ramda';\n\nimport { Spin } from 'antd';\n\nimport buildLoader from './buildLoader';\nimport {\n  loadCountryStatistics,\n  countryStatisticsLoadedSelector,\n  statisticSelector,\n  compiledCountryStatisticsSelector,\n  statisticSourcesSelector,\n} from '../store/statistics';\nimport { parseMapOfStatistics, addPopCountryStatistics } from '../utils';\n\nconst StatisticsLoader = buildLoader(({ countryStatistics }) =>\n  loadCountryStatistics(countryStatistics),\n);\n\nfunction defaultSelector(state, props) {\n  return {\n    value: props.statisticCode,\n  };\n}\n\nfunction mapStateToProps(state, props) {\n  const {\n    perCapita,\n    worldReference,\n    mapOfCountryStatistics: mapOfCountryStatisticsInput,\n    countryCode,\n  } = props;\n  const mapOfCountryStatistics =\n    perCapita && worldReference\n      ? {\n          ...mapOfCountryStatisticsInput,\n          world: {\n            countryCode: 'WORLD',\n            statisticCode: worldReference,\n          },\n        }\n      : mapOfCountryStatisticsInput;\n\n  const parsedMapOfCountryStatistics = parseMapOfStatistics(\n    mapOfCountryStatistics,\n    countryCode,\n  );\n  const mapOfCountryStatisticsToLoad = addPopCountryStatistics(\n    parsedMapOfCountryStatistics,\n    perCapita,\n  );\n  const countryStatisticsToLoad = values(mapOfCountryStatisticsToLoad);\n  const statisticCodes = uniq(\n    countryStatisticsToLoad.map(c => c.statisticCode),\n  );\n  const isLoaded = countryStatisticsLoadedSelector(\n    countryStatisticsToLoad,\n    state,\n  );\n  const data = isLoaded\n    ? compiledCountryStatisticsSelector(\n        {\n          mapOfCountryStatistics,\n          countryCode: props.countryCode,\n          perCapita: props.perCapita,\n        },\n        state,\n      )\n    : [];\n\n  return {\n    data,\n    statistics: map(\n      ({ statisticCode }) => statisticSelector(statisticCode, state),\n      parsedMapOfCountryStatistics,\n    ),\n    statisticSources: statisticSourcesSelector(statisticCodes, state),\n    isLoaded,\n    countryStatisticsToLoad,\n  };\n}\n\nfunction withCountryStatistics(\n  mapOfCountryStatisticsSelectorInput = defaultSelector,\n) {\n  const mapOfCountryStatisticsSelector =\n    typeof mapOfCountryStatisticsSelectorInput === 'object'\n      ? () => mapOfCountryStatisticsSelectorInput\n      : mapOfCountryStatisticsSelectorInput;\n\n  return function withCountryStatisticWrapper(WrappedComponent) {\n    return connect((state, props) =>\n      mapStateToProps(state, {\n        mapOfCountryStatistics: mapOfCountryStatisticsSelector(state, props),\n        ...props,\n      }),\n    )(props => (\n      <Spin spinning={!props.isLoaded}>\n        <StatisticsLoader countryStatistics={props.countryStatisticsToLoad} />\n        <WrappedComponent {...props} />\n      </Spin>\n    ));\n  };\n}\n\nexport default withCountryStatistics;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { values } from 'ramda';\nimport { withStateHandlers, compose } from 'recompose';\nimport { saveAs } from 'file-saver';\n\nimport { Icon, Popover, Switch, Button } from 'antd';\n\nimport withCountryStatistics from './withCountryStatistics';\nimport { displayUnit, chartToPngBlob } from '../utils';\nimport StatisticDetails from '../components/StatisticDetails';\n\nconst defaultHeight = 200;\n\nfunction ChartSettings(props) {\n  const {\n    perCapitaSwitch,\n    stackedSwitch,\n    perCapita,\n    stacked,\n    setPerCapita,\n    setStacked,\n  } = props;\n\n  return (\n    <div className=\"ChartSettings\">\n      {perCapitaSwitch && (\n        <div>\n          {'Per capita '}\n          <Switch size=\"small\" checked={perCapita} onChange={setPerCapita} />\n        </div>\n      )}\n      {stackedSwitch && (\n        <div>\n          {'Stacked '}\n          <Switch size=\"small\" checked={stacked} onChange={setStacked} />\n        </div>\n      )}\n    </div>\n  );\n}\nChartSettings.propTypes = {\n  perCapitaSwitch: PropTypes.bool.isRequired,\n  stackedSwitch: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  setStacked: PropTypes.func.isRequired,\n};\n\nfunction buildChart(options = {}) {\n  const {\n    mapOfCountryStatisticsSelector,\n    perCapitaSwitch = false,\n    stackedSwitch = false,\n  } = options;\n  const hocs = [];\n  const hasSettings = perCapitaSwitch || stackedSwitch;\n\n  if (hasSettings) {\n    hocs.push(\n      withStateHandlers(\n        ({ defaultPerCapita = false, defaultStacked = false }) => ({\n          perCapita: defaultPerCapita,\n          stacked: defaultStacked,\n        }),\n        {\n          setPerCapita: () => perCapita => ({ perCapita }),\n          setStacked: () => stacked => ({ stacked }),\n        },\n      ),\n    );\n  }\n  hocs.push(withCountryStatistics(mapOfCountryStatisticsSelector));\n\n  return function buildChartWrapper(WrappedChart) {\n    return compose(...hocs)(\n      class ChartWrapper extends Component {\n        constructor() {\n          super();\n          this.chartRef = React.createRef();\n          this.buttonRef = React.createRef();\n        }\n\n        render() {\n          const {\n            title,\n            description,\n            statistics,\n            statisticSources,\n            height,\n            perCapita = false,\n            stacked = false,\n            setPerCapita,\n            setStacked,\n          } = this.props;\n          const statisticList = values(statistics);\n          const statistic = statisticList[0];\n          const finalHeight = options.height || height || defaultHeight;\n          const file = title\n            ? title.replace(/ /g, '_')\n            : statistic.name.replace(/ /g, '_');\n\n          const descriptionStatistic = statisticList.find(\n            s => s.code === description,\n          );\n          const finalDescription =\n            statisticList.length < 2\n              ? description || statistic.description\n              : (descriptionStatistic && descriptionStatistic.description) ||\n                description;\n\n          return (\n            <div className=\"ChartWrapper\" ref={this.chartRef}>\n              <div className=\"ChartWrapper__header\">\n                <div className=\"ChartWrapper__header__left\">\n                  <span className=\"ChartWrapper__title\">\n                    {title || statistic.name}\n                  </span>\n                  <span className=\"ChartWrapper__title__unit\">\n                    {` (${displayUnit(statistic.unit, perCapita)})`}\n                  </span>\n                </div>\n                <div\n                  className=\"ChartWrapper__header__right\"\n                  data-html2canvas-ignore\n                >\n                  <div style={{ marginRight: '5px' }}>\n                    <Button\n                      icon=\"download\"\n                      size=\"small\"\n                      onClick={() => {\n                        chartToPngBlob(this.chartRef.current, 2)\n                          .then(blob => saveAs(blob, `${file}.png`))\n                          .catch(err => console.err(err));\n                      }}\n                    />\n                  </div>\n                  <StatisticDetails\n                    statisticSources={statisticSources}\n                    description={finalDescription}\n                  />\n                  {hasSettings && (\n                    <div>\n                      <Popover\n                        title=\"Settings\"\n                        arrowPointAtCenter\n                        content={\n                          // eslint-disable-next-line react/jsx-wrap-multilines\n                          <ChartSettings\n                            perCapitaSwitch={perCapitaSwitch}\n                            stackedSwitch={stackedSwitch}\n                            stacked={stacked}\n                            perCapita={perCapita}\n                            setPerCapita={setPerCapita}\n                            setStacked={setStacked}\n                          />\n                        }\n                        placement=\"bottomRight\"\n                      >\n                        <Button size=\"small\">\n                          <Icon type=\"setting\" theme=\"filled\" />\n                        </Button>\n                      </Popover>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <WrappedChart\n                {...this.props}\n                height={finalHeight}\n                perCapita={perCapita}\n                stacked={stacked}\n              />\n              <div className=\"ChartWrapper__footer\" />\n            </div>\n          );\n        }\n      },\n    );\n  };\n}\n\nexport default buildChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { formatNumber } from '../../../utils';\n\nfunction CustomTooltip(props) {\n  const { active, separator, payload, withTotal } = props;\n\n  if (active && payload && payload.length > 0) {\n    const { label, displayFilter, totalFilter, units } = props;\n    const filteredPayload = payload.filter(displayFilter);\n\n    if (filteredPayload.length < 2) {\n      const { formatter = formatNumber, unit, color, value } = payload[0];\n      return (\n        <div className=\"CustomTooltip\" style={{ color }}>\n          {`${label} : ${formatter(value)} ${unit}`}\n        </div>\n      );\n    }\n    const total = payload\n      .filter(totalFilter)\n      .reduce((sum, p) => sum + p.value, 0);\n    const totalUnit = filteredPayload[0].unit;\n\n    return (\n      <div className=\"CustomTooltip\">\n        <div>{label}</div>\n        <div>\n          {filteredPayload.map((p, i) => {\n            const {\n              formatter = formatNumber,\n              unit,\n              color,\n              name,\n              dataKey,\n              value,\n            } = p;\n            return (\n              <div key={dataKey || name} style={{ color }}>\n                {`${name}${separator}${formatter(value)} ${unit || units[i]}`}\n              </div>\n            );\n          })}\n          {withTotal && (\n            <div key=\"__total__\">\n              <hr size={1} />\n              {`Total${separator}${formatNumber(total)} ${totalUnit}`}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\nCustomTooltip.propTypes = {\n  active: PropTypes.bool.isRequired,\n  separator: PropTypes.string.isRequired,\n  payload: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n      unit: PropTypes.string.isRequired,\n      color: PropTypes.string,\n      formatter: PropTypes.func,\n    }).isRequired,\n  ).isRequired,\n  label: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n  withTotal: PropTypes.bool,\n  displayFilter: PropTypes.func,\n  totalFilter: PropTypes.func,\n  units: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n};\nCustomTooltip.defaultProps = {\n  label: '',\n  withTotal: false,\n  displayFilter: i => i,\n  totalFilter: i => i,\n  units: {},\n};\n\nexport default CustomTooltip;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Area,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { values } from 'ramda';\n\nimport { getNiceTickValues } from 'recharts-scale';\nimport { tickFormatter, displayUnit } from '../../../utils';\nimport { StatisticType } from '../../../utils/types';\nimport CustomTooltip from './CustomTooltip';\n\nfunction EnergyMixChart(props) {\n  const { data, stacked, perCapita, fuelConsumed, statistics } = props;\n  const { unit: coalUnit } = statistics.coal;\n  const unit = displayUnit(coalUnit, perCapita);\n  const LineArea = stacked ? Area : Line;\n  const defaultLineAreaProps = {\n    type: 'monotone',\n    dot: false,\n    activeDot: false,\n    unit,\n  };\n  const lineAreaProps = stacked\n    ? { stackId: '1', ...defaultLineAreaProps }\n    : { strokeWidth: 2, ...defaultLineAreaProps };\n\n  if (\n    values(statistics).some(statistic => statistic.unit.main !== coalUnit.main)\n  ) {\n    console.warn('EnergyMixChart : statistics have not same units');\n  }\n\n  const max = Math.max(\n    ...(stacked\n      ? data.map(d =>\n          Object.keys(fuelConsumed).reduce((sum, k) => sum + d[k], 0),\n        )\n      : data.map(d => Math.max(...Object.keys(fuelConsumed).map(k => d[k])))),\n    ...(perCapita ? data.map(d => d.world) : []),\n  );\n\n  const chartMax = max * 1.05;\n  const ticks = getNiceTickValues([0, chartMax], 5, true);\n\n  if (ticks[3] > chartMax) {\n    ticks.pop();\n  }\n  const domain = [0, ticks[ticks.length - 1]];\n\n  return (\n    <div className=\"EnergyMixChart\">\n      <ResponsiveContainer height={280} width=\"100%\">\n        <ComposedChart data={data}>\n          {fuelConsumed.coal && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"coal\"\n              name=\"Coal\"\n              stroke=\"black\"\n              fill=\"black\"\n            />\n          )}\n          {fuelConsumed.oil && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"oil\"\n              name=\"Oil\"\n              stroke=\"grey\"\n              fill=\"grey\"\n            />\n          )}\n          {fuelConsumed.gas && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"gas\"\n              name=\"Gas\"\n              stroke=\"orange\"\n              fill=\"orange\"\n            />\n          )}\n          {fuelConsumed.nuclear && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"nuclear\"\n              name=\"Nuclear\"\n              stroke=\"purple\"\n              fill=\"purple\"\n            />\n          )}\n          {fuelConsumed.hydro && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"hydro\"\n              name=\"Hydroelectricity\"\n              stroke=\"blue\"\n              fill=\"blue\"\n            />\n          )}\n          {fuelConsumed.biofuelsWaste && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"biofuelsWaste\"\n              name=\"Biofuels & Waste\"\n              stroke=\"saddlebrown\"\n              fill=\"saddlebrown\"\n            />\n          )}\n          {fuelConsumed.solarWindTideGeoth && (\n            <LineArea\n              {...lineAreaProps}\n              dataKey=\"solarWindTideGeoth\"\n              name=\"Geothermy, Wind, Solar & Tide\"\n              stroke=\"green\"\n              fill=\"green\"\n            />\n          )}\n          {perCapita && (\n            <Line\n              type=\"monotone\"\n              dataKey=\"world\"\n              strokeWidth={2}\n              dot={false}\n              activeDot={false}\n              name=\"World\"\n              stroke=\"red\"\n              unit={unit}\n            />\n          )}\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={4} />\n          <YAxis tickFormatter={tickFormatter} ticks={ticks} domain={domain} />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                withTotal\n                totalFilter={p => p.name !== 'World'}\n              />\n            )}\n          />\n          <Legend iconType=\"circle\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nEnergyMixChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number,\n      coal: PropTypes.number,\n      oil: PropTypes.number,\n      gas: PropTypes.number,\n      hydro: PropTypes.number,\n      nuclear: PropTypes.number,\n      biofuelsWaste: PropTypes.number,\n      solarWindTideGeoth: PropTypes.number,\n      world: PropTypes.number,\n    }).isRequired,\n  ).isRequired,\n  fuelConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n    hydro: PropTypes.bool,\n    nuclear: PropTypes.bool,\n    biofuelsWaste: PropTypes.bool,\n    solarWindTideGeoth: PropTypes.bool,\n  }).isRequired,\n  statistics: PropTypes.shape({\n    coal: StatisticType.isRequired,\n    oil: StatisticType.isRequired,\n    gas: StatisticType.isRequired,\n    hydro: StatisticType.isRequired,\n    nuclear: StatisticType.isRequired,\n    biofuelsWaste: StatisticType.isRequired,\n    solarWindTideGeoth: StatisticType.isRequired,\n  }).isRequired,\n  setStacked: PropTypes.func.isRequired,\n  setPerCapita: PropTypes.func.isRequired,\n  stacked: PropTypes.bool.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n};\n\nexport default EnergyMixChart;\n","import { connect } from 'react-redux';\n\nimport buildChart from '../../../HOC/buildChart';\nimport EnergyMixChart from '../components/EnergyMixChart';\n\nimport { fuelConsumedCountrySelector } from '../../../store/countries';\n\nconst EnergyMixChartBuilded = buildChart({\n  perCapitaSwitch: true,\n  stackedSwitch: true,\n})(EnergyMixChart);\n\nconst EnergyMixChartContainer = connect((state, { countryCode }) => ({\n  fuelConsumed: fuelConsumedCountrySelector(countryCode, state),\n}))(EnergyMixChartBuilded);\n\nexport default EnergyMixChartContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport EnergyMixChartContainer from '../containers/EnergyMixChartContainer';\n\nconst primaryMap = {\n  coal: 'COAL_CONSUMPTION_MTOE',\n  gas: 'GAS_CONSUMPTION_MTOE',\n  oil: 'OIL_CONSUMPTION_MTOE',\n  hydro: 'HYDRO_PRODUCTION_MTOE',\n  nuclear: 'NUCLEAR_PRODUCTION_MTOE',\n  biofuelsWaste: 'BIOFUELS_WASTE_CONSUMPTION_MTOE',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_PRODUCTION_MTOE',\n};\nconst primaryReference = 'PRIMARY_ENERGY_CONSUMPTION_MTOE';\n\nconst electrictyMap = {\n  coal: 'COAL_ELECTRICITY_GENERATION_TWH',\n  gas: 'GAS_ELECTRICITY_GENERATION_TWH',\n  oil: 'OIL_ELECTRICITY_GENERATION_TWH',\n  hydro: 'HYDRO_GENERATION_TWH',\n  nuclear: 'NUCLEAR_GENERATION_TWH',\n  biofuelsWaste: 'BIOFUELS_WASTE_ELECTRICITY_GENERATION_TWH',\n  solarWindTideGeoth: 'GEOTH_SOLAR_WIND_TIDE_ELECTRICITY_GENERATION_TWH',\n};\nconst electricityReference = 'ELECTRICITY_GENERATION_TWH';\n\nfunction SummaryTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"SummaryTab\">\n      <div>\n        <EnergyMixChartContainer\n          title=\"Primary energy consumption\"\n          description=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n          countryCode={countryCode}\n          mapOfCountryStatistics={primaryMap}\n          worldReference={primaryReference}\n          defaultPerCapita\n          defaultStacked\n        />\n      </div>\n      <div id=\"test\" style={{ marginTop: '20px' }}>\n        <EnergyMixChartContainer\n          title=\"Electricity generation by fuels\"\n          description=\"ELECTRICITY_GENERATION_TWH\"\n          countryCode={countryCode}\n          mapOfCountryStatistics={electrictyMap}\n          worldReference={electricityReference}\n          defaultPerCapita\n          defaultStacked\n        />\n      </div>\n    </div>\n  );\n}\n\nSummaryTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default SummaryTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ResponsiveContainer,\n  ComposedChart,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from 'recharts';\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\nimport CustomTooltip from './CustomTooltip';\n\nfunction ProdConsoChart(props) {\n  const { fuel, statistics, data, height } = props;\n\n  const consoStatistic = statistics.conso;\n  const prodStatistic = statistics.prod;\n  if (consoStatistic.unit.main !== prodStatistic.unit.main) {\n    // eslint-disable-next-line no-console\n    console.warn('Production and consommation have not the same unit', [\n      prodStatistic.code,\n      consoStatistic.code,\n    ]);\n  }\n  const unit = consoStatistic.unit.main;\n  const dataWithImportAndExport = data.map(l => {\n    const diff = Number((l.prod - l.conso).toFixed(2));\n    return {\n      year: l.year,\n      prod: l.prod,\n      conso: l.conso,\n      export: diff > 0 ? diff : null,\n      import: diff < 0 ? -diff : null,\n      base: Math.min(l.prod, l.conso),\n    };\n  });\n\n  return (\n    <div className=\"ProdConsoChart\">\n      <ResponsiveContainer height={height}>\n        <ComposedChart data={dataWithImportAndExport}>\n          <Area\n            type=\"monotone\"\n            dot={false}\n            dataKey=\"base\"\n            stroke=\"none\"\n            stackId=\"1\"\n            activeDot={false}\n            fill=\"none\"\n            unit={unit}\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} export`}\n            dataKey=\"export\"\n            activeDot={false}\n            stroke=\"green\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"green\"\n            stackId=\"1\"\n          />\n          <Area\n            type=\"monotone\"\n            dot={false}\n            unit={unit}\n            name={`${fuel} import`}\n            dataKey=\"import\"\n            activeDot={false}\n            stroke=\"red\"\n            strokeOpacity={0}\n            fillOpacity={0.8}\n            fill=\"red\"\n            stackId=\"1\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"conso\"\n            dot={false}\n            unit={unit}\n            stroke=\"#96281b\"\n            strokeWidth={3}\n            name={consoStatistic.name}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prod\"\n            dot={false}\n            unit={unit}\n            stroke=\"black\"\n            strokeWidth={3}\n            strokeOpacity={0.7}\n            name={prodStatistic.name}\n          />\n\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} />\n          <YAxis />\n          <Tooltip\n            tickFormatter={tickFormatter}\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                displayFilter={p => p.name !== 'base'}\n              />\n            )}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nProdConsoChart.propTypes = {\n  statistics: PropTypes.shape({\n    prod: StatisticType.isRequired,\n    conso: StatisticType.isRequired,\n  }).isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      prod: PropTypes.number,\n      conso: PropTypes.number,\n    }),\n  ).isRequired,\n  fuel: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nexport default ProdConsoChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Scatter,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ScatterChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter } from '../../../utils';\n\nfunction GDPByEnergyChart(props) {\n  const { data, color, statistics } = props;\n  // const statistic = statistics.value;\n  // const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"GDPByEnergyChart\">\n      <ResponsiveContainer height={300}>\n        <ScatterChart data={data} margin={{ bottom: 50 }}>\n          <Scatter\n            fill={color}\n            shape={props2 => (\n              <circle cx={props2.cx} cy={props2.cy} r={3} fill={color} />\n            )}\n            line\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis\n            dataKey=\"energy\"\n            name={statistics.energy.name}\n            type=\"number\"\n            domain={[\n              dataMin => Math.floor(0.95 * dataMin),\n              dataMax => Math.ceil(1.05 * dataMax),\n            ]}\n            tickFormatter={tickFormatter}\n            label={{\n              value: `${statistics.energy.name} (${\n                statistics.energy.unit.main\n              })`,\n              position: 'bottom',\n              style: { fill: '#666' },\n            }}\n            padding={{ left: 5, right: 5 }}\n          />\n          <YAxis\n            dataKey=\"gdp\"\n            name={statistics.gdp.name}\n            tickFormatter={tickFormatter}\n            padding={{ top: 5 }}\n          />\n          <Tooltip\n            content={props2 => (\n              <CustomTooltip\n                {...props2}\n                label={\n                  props2.payload &&\n                  props2.payload[0] &&\n                  props2.payload[0].payload.year\n                }\n                units={{\n                  '0': statistics.energy.unit.main,\n                  '1': statistics.gdp.unit.main,\n                }}\n              />\n            )}\n          />\n        </ScatterChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nGDPByEnergyChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      gdp: PropTypes.number,\n      energy: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    gdp: StatisticType,\n    energy: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  color: PropTypes.string,\n};\n\nGDPByEnergyChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default GDPByEnergyChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  LineChart,\n  ResponsiveContainer,\n  CartesianGrid,\n} from 'recharts';\nimport CustomTooltip from './CustomTooltip';\n\nimport { StatisticType } from '../../../utils/types';\nimport { tickFormatter, displayUnit } from '../../../utils';\n\nfunction BasicChart(props) {\n  const { data, statistics, color, perCapita, height } = props;\n  const statistic = statistics.value;\n  const unit = displayUnit(statistic.unit, perCapita);\n\n  return (\n    <div className=\"BasicChart\">\n      <ResponsiveContainer height={height}>\n        <LineChart data={data}>\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke={color}\n            strokeWidth={3}\n            dot={false}\n            name={statistic.name}\n            unit={` ${unit}`}\n          />\n          <CartesianGrid stroke=\"#ccc\" opacity={0.2} />\n          <XAxis dataKey=\"year\" interval={9} padding={{ left: 5, right: 5 }} />\n          <YAxis tickFormatter={tickFormatter} />\n          <Tooltip content={props2 => <CustomTooltip {...props2} />} />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nBasicChart.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      year: PropTypes.number.isRequired,\n      value: PropTypes.number,\n    }),\n  ).isRequired,\n  statistics: PropTypes.shape({\n    value: StatisticType,\n  }).isRequired,\n  height: PropTypes.number.isRequired,\n  perCapita: PropTypes.bool.isRequired,\n  color: PropTypes.string,\n};\n\nBasicChart.defaultProps = {\n  color: '#2c82c9',\n};\n\nexport default BasicChart;\n","import buildChart from '../../../HOC/buildChart';\nimport BasicChart from '../components/BasicChart';\n\nexport default buildChart()(BasicChart);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport buildChart from '../../../HOC/buildChart';\nimport ProdConsoChart from './ProdConsoChart';\nimport GDPByEnergyChart from './GDPByEnergyChart';\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nconst ProdConsoChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: (state, props) => ({\n    prod: props.prodStatisticCode,\n    conso: props.consoStatisticCode,\n  }),\n})(ProdConsoChart);\n\nconst GDPByEnergyChartContainer = buildChart({\n  mapOfCountryStatisticsSelector: {\n    gdp: 'GDP_2010_USD',\n    energy: 'PRIMARY_ENERGY_CONSUMPTION_MTOE',\n  },\n})(GDPByEnergyChart);\n\nfunction IndependencyTab(props) {\n  const { countryCode, fuelProducedOrConsumed } = props;\n  return (\n    <div className=\"IndependencyTab\">\n      <Row>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"ENERGY_SELF_SUFFICIENCY\"\n            countryCode={countryCode}\n            color=\"#f15a22\"\n          />\n        </Col>\n      </Row>\n      <Row gutter={20}>\n        <h3>Imports/Exports</h3>\n        {fuelProducedOrConsumed.coal && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"COAL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"COAL_CONSUMPTION_MTOE\"\n              fuel=\"Coal\"\n              title=\"Coal Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.oil && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"OIL_PRODUCTION_MTOE\"\n              consoStatisticCode=\"OIL_CONSUMPTION_MTOE\"\n              fuel=\"Oil\"\n              title=\"Oil Trade\"\n            />\n          </Col>\n        )}\n        {fuelProducedOrConsumed.gas && (\n          <Col md={8} sm={24}>\n            <ProdConsoChartContainer\n              countryCode={countryCode}\n              prodStatisticCode=\"GAS_PRODUCTION_MTOE\"\n              consoStatisticCode=\"GAS_CONSUMPTION_MTOE\"\n              fuel=\"Gas\"\n              title=\"Gas Trade\"\n            />\n          </Col>\n        )}\n      </Row>\n      <Row>\n        <h3>Energy/GDP coupling</h3>\n        <Col md={16} sm={24}>\n          <GDPByEnergyChartContainer\n            countryCode={countryCode}\n            title=\"GDP according to primary energy\"\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nIndependencyTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n  fuelProducedOrConsumed: PropTypes.shape({\n    coal: PropTypes.bool,\n    oil: PropTypes.bool,\n    gas: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default IndependencyTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Row, Col } from 'antd';\n\nimport BasicChartContainer from '../containers/BasicChartContainer';\n\nfunction ClimateTab(props) {\n  const { countryCode } = props;\n  return (\n    <div className=\"ClimateTab\">\n      <Row gutter={20}>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"FOSSIL_CO2_EMISSIONS_MT\"\n            perCapita\n            countryCode={countryCode}\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"PRIMARY_ENERGY_CONSUMPTION_MTOE\"\n            perCapita\n            countryCode={countryCode}\n          />\n        </Col>\n        <Col md={8} sm={24}>\n          <BasicChartContainer\n            statisticCode=\"CO2_INTENSITY_OF_ENERGY\"\n            countryCode={countryCode}\n          />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nClimateTab.propTypes = {\n  countryCode: PropTypes.string.isRequired,\n};\n\nexport default ClimateTab;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\n\n// import { countrySelector } from '../../store/countries';\nimport { countryWithAreasSelector } from '../../store/otherSelectors';\nimport { CountryType } from '../../utils/types';\n\nimport GeoJSONMap from '../../components/GeoJSONMap';\nimport SummaryTab from './components/SummaryTab';\nimport IndependencyTab from './components/IndependencyTab';\nimport ClimateTab from './components/ClimateTab';\n\nimport BasicChartContainer from './containers/BasicChartContainer';\nimport { isMobileOrTablet } from '../../utils';\nimport { fuelProducedOrConsumedCountrySelector } from '../../store/countries';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst tabContent = {\n  summary: countryCode => <SummaryTab countryCode={countryCode} />,\n  independency: countryCode => (\n    <IndependencyTabContainer countryCode={countryCode} />\n  ),\n  climate: countryCode => <ClimateTab countryCode={countryCode} />,\n};\n\nclass CountryView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'independency' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { country } = this.props;\n    const { currentTab } = this.state;\n\n    if (!country || country.disabled) {\n      return <Redirect to=\"/\" />;\n    }\n\n    const countryCode = country.alpha2Code;\n    const flag = isMobileOrTablet() ? country.flagIcon : '';\n    return (\n      <div className=\"CountryView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${flag} ${country.commonName}`}</h2>}>\n              <div>{`Capital: ${country.capital}`}</div>\n              <div>{`Area: ${country.area.toLocaleString()} km²`}</div>\n              <div>\n                {`Member of: `}\n                {country.areas.map((area, i) => (\n                  <Link key={area.code} to={`/area/${area.code}`}>\n                    {`${i > 0 ? ', ' : ''}${area.name}`}\n                  </Link>\n                ))}\n              </div>\n              <Row style={{ marginTop: '20px' }} gutter={20}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"POPULATION\"\n                    countryCode={countryCode}\n                    color=\"#2c82c9\"\n                  />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"GDP_2010_USD\"\n                    countryCode={countryCode}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <img\n              style={{\n                width: '100%',\n                marginBottom: '20px',\n                maxHeight: '180px',\n              }}\n              src={`/img/flags/${country.alpha3Code.toLowerCase()}.svg`}\n              alt={`Flag of ${country.commonName}`}\n            />\n            <GeoJSONMap geojson={country.geojson} center={country.latlng} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](countryCode)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nCountryView.propTypes = {\n  country: CountryType,\n};\nCountryView.defaultProps = {\n  country: null,\n};\n\nexport default connect((state, props) => ({\n  country: countryWithAreasSelector(props.match.params.countryCode, state),\n}))(CountryView);\n","import React from 'react';\n\nimport { Row, Card, Col } from 'antd';\n\nfunction AboutView() {\n  return (\n    <div className=\"AboutView\">\n      <Row>\n        <Col md={16}>\n          <Card title={<h1>About</h1>}>\n            <p>\n              The goals of this app are:\n              <ul>\n                <li>to ease the vizualization of energy and economy data</li>\n                <li>gather different data from different place</li>\n                <li>\n                  propose an open-source project to do so, in order to let\n                  everybody contribute to a better understanding of these data.\n                </li>\n              </ul>\n            </p>\n            <p>\n              {'This website has been developped by '}\n              <a href=\"https://github.com/ewoken\" rel=\"noopener noreferrer\">\n                ewoken\n              </a>\n              .\n            </p>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AboutView;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Row, Col, Card } from 'antd';\nimport GeoJSONMap from '../../components/GeoJSONMap';\n\nimport { areaWithCountriesSelector } from '../../store/otherSelectors';\nimport { AreaType } from '../../utils/types';\n\nimport SummaryTab from '../CountryView/components/SummaryTab';\nimport IndependencyTab from '../CountryView/components/IndependencyTab';\nimport ClimateTab from '../CountryView/components/ClimateTab';\nimport BasicChartContainer from '../CountryView/containers/BasicChartContainer';\n\nimport { fuelProducedOrConsumedCountrySelector } from '../../store/countries';\n\nconst tabList = [\n  { key: 'summary', tab: 'Summary' },\n  { key: 'independency', tab: 'Energy (in)dependency' },\n  { key: 'climate', tab: 'Climate change' },\n];\n\nconst IndependencyTabContainer = connect((state, props) => ({\n  fuelProducedOrConsumed: fuelProducedOrConsumedCountrySelector(\n    props.countryCode,\n    state,\n  ),\n}))(IndependencyTab);\n\nconst tabContent = {\n  summary: areaCode => <SummaryTab countryCode={areaCode} />,\n  independency: areaCode => <IndependencyTabContainer countryCode={areaCode} />,\n  climate: areaCode => <ClimateTab countryCode={areaCode} />,\n};\n\nclass AreaView extends Component {\n  constructor() {\n    super();\n    this.state = { currentTab: 'summary' };\n  }\n\n  setTab(tabKey) {\n    this.setState({ currentTab: tabKey });\n  }\n\n  render() {\n    const { area } = this.props;\n    const { currentTab } = this.state;\n    const latlng = [\n      area.countries.reduce((s, c) => c.latlng[0] + s, 0) /\n        area.countries.length,\n      area.countries.reduce((s, c) => c.latlng[1] + s, 0) /\n        area.countries.length,\n    ];\n\n    if (!area) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div className=\"AreaView\">\n        <Row gutter={16}>\n          <Col xs={24} sm={24} md={18}>\n            <Card title={<h2>{`${area.name}`}</h2>}>\n              {area.code !== 'WORLD' && (\n                <div>\n                  {`Members : `}\n                  {area.countries.map((country, i) => (\n                    <Link\n                      key={country.alpha2Code}\n                      to={`/country/${country.alpha2Code}`}\n                    >\n                      {`${i > 0 ? ', ' : ''}${country.commonName}`}\n                    </Link>\n                  ))}\n                </div>\n              )}\n              <Row style={{ marginTop: '20px' }} gutter={10}>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"POPULATION\"\n                    countryCode={area.code}\n                    color=\"#2c82c9\"\n                  />\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12}>\n                  <BasicChartContainer\n                    statisticCode=\"GDP_2010_USD\"\n                    countryCode={area.code}\n                    color=\"#f22613\"\n                    perCapita\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col xs={0} sm={0} md={6}>\n            <GeoJSONMap geojson={area.geojson} center={latlng} />\n          </Col>\n        </Row>\n        <Row>\n          <Card\n            tabList={tabList}\n            activeTabKey={currentTab}\n            onTabChange={tab => this.setTab(tab)}\n          >\n            {tabContent[currentTab](area.code)}\n          </Card>\n        </Row>\n      </div>\n    );\n  }\n}\n\nAreaView.propTypes = {\n  area: AreaType.isRequired,\n};\n\nexport default connect((state, props) => ({\n  area: areaWithCountriesSelector(props.match.params.areaCode, state),\n}))(AreaView);\n","import React from 'react';\nimport { Icon } from 'antd';\n\nfunction GitHubLink() {\n  return (\n    <a\n      href=\"https://github.com/ewoken/world-data-app\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <Icon type=\"github\" theme=\"outlined\" />\n      {'GitHub'}\n    </a>\n  );\n}\n\nexport default GitHubLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { sortBy } from 'ramda';\n\nimport { Menu, Select } from 'antd';\nimport GitHubLink from './GitHubLink';\n\nimport { CountryType, AreaType } from '../utils/types';\nimport { isMobileOrTablet } from '../utils';\n\nfunction HeaderMenu(props) {\n  const { countries, areas, goTo } = props;\n  return (\n    <Menu\n      mode=\"horizontal\"\n      theme=\"dark\"\n      selectable={false}\n      style={{ lineHeight: '64px' }}\n    >\n      <Menu.Item key=\"home\">\n        <Link to=\"/home\">\n          <strong>World Energy Data</strong>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Select\n          id=\"mainCountrySelect\"\n          placeholder=\"Countries\"\n          optionFilterProp=\"title\"\n          showSearch={!isMobileOrTablet()}\n          onSelect={value => {\n            goTo(`/country/${value}`);\n          }}\n        >\n          {sortBy(c => c.commonName, countries).map(country => (\n            <Select.Option\n              key={country.alpha2Code}\n              disabled={country.disabled}\n              title={`${country.commonName} (${country.alpha3Code})`}\n            >\n              {`${country.commonName}${country.disabled ? ' (No data)' : ''}`}\n            </Select.Option>\n          ))}\n        </Select>\n      </Menu.Item>\n      <Menu.SubMenu title=\"Areas\">\n        {sortBy(a => a.name, areas).map(area => (\n          <Menu.Item key={area.code}>\n            <Link to={`/area/${area.code}`}>{area.name}</Link>\n          </Menu.Item>\n        ))}\n      </Menu.SubMenu>\n      <Menu.Item key=\"about\">\n        <Link to=\"/about\">About</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <GitHubLink />\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nHeaderMenu.propTypes = {\n  countries: PropTypes.arrayOf(CountryType).isRequired,\n  areas: PropTypes.arrayOf(AreaType).isRequired,\n  goTo: PropTypes.func.isRequired,\n};\n\nexport default HeaderMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { Layout, Spin } from 'antd';\n\nimport HomeView from '../views/HomeView';\nimport CountryView from '../views/CountryView';\nimport AboutView from '../views/AboutView';\nimport AreaView from '../views/AreaView';\n\nimport HeaderMenu from './HeaderMenu';\n\nimport buildLoader from '../HOC/buildLoader';\n\nimport {\n  loadAllCountries,\n  countriesLoadedSelector,\n  countriesSelector,\n} from '../store/countries';\nimport {\n  loadAllStatistics,\n  statisticsLoadedSelector,\n} from '../store/statistics';\nimport {\n  loadAllAreas,\n  areasLoadedSelector,\n  areasSelector,\n} from '../store/areas';\n\nconst CountriesLoader = buildLoader(loadAllCountries);\nconst StatisticsLoader = buildLoader(loadAllStatistics);\nconst AreasLoader = buildLoader(loadAllAreas);\n\nconst ConnectedHeaderMenu = withRouter(\n  connect((state, props) => ({\n    countries: countriesSelector(state),\n    areas: areasSelector(state),\n    goTo: url => props.history.push(url),\n  }))(HeaderMenu),\n);\n\nfunction AppLayout(props) {\n  const { isLoaded } = props;\n  return (\n    <div className=\"AppLayout\">\n      <CountriesLoader />\n      <StatisticsLoader />\n      <AreasLoader />\n      <Spin size=\"large\" spinning={!isLoaded}>\n        <Layout>\n          <Layout.Header\n            style={{ position: 'fixed', zIndex: 10, width: '100%' }}\n          >\n            <ConnectedHeaderMenu />\n          </Layout.Header>\n          <Layout.Content>\n            {!isLoaded && <div className=\"AppLayout__splash\" />}\n            {isLoaded && (\n              <Switch>\n                <Route path=\"/home\" exact component={HomeView} />\n                <Route\n                  path=\"/country/:countryCode\"\n                  exact\n                  component={CountryView}\n                />\n                <Route path=\"/area/:areaCode\" exact component={AreaView} />\n                <Route path=\"/about\" exact component={AboutView} />\n                <Route\n                  component={() => <Redirect to={{ pathname: '/home' }} />}\n                />\n              </Switch>\n            )}\n          </Layout.Content>\n          <Layout.Footer>{' '}</Layout.Footer>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nAppLayout.propTypes = {\n  isLoaded: PropTypes.bool.isRequired,\n};\n\n// withRouter needed to prevent blocking\nexport default withRouter(\n  connect(state => ({\n    isLoaded:\n      countriesLoadedSelector(state) &&\n      statisticsLoadedSelector(state) &&\n      areasLoadedSelector(state),\n  }))(AppLayout),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport store from './store';\n\nimport AppLayout from './components/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Router>\n          <AppLayout />\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}